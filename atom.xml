<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>저장하고 까먹자</title>
  
  
  <link href="https://jungguji.github.io/atom.xml" rel="self"/>
  
  <link href="https://jungguji.github.io/"/>
  <updated>2021-03-25T13:08:42.000Z</updated>
  <id>https://jungguji.github.io/</id>
  
  <author>
    <name>Junggu Ji</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>백준 4796번: 캠핑</title>
    <link href="https://jungguji.github.io/2021/03/25/%EB%B0%B1%EC%A4%80-4796%EB%B2%88-%EC%BA%A0%ED%95%91/"/>
    <id>https://jungguji.github.io/2021/03/25/%EB%B0%B1%EC%A4%80-4796%EB%B2%88-%EC%BA%A0%ED%95%91/</id>
    <published>2021-03-25T13:08:42.000Z</published>
    <updated>2021-03-25T13:08:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p><a href="https://www.acmicpc.net/problem/4796">https://www.acmicpc.net/problem/4796</a></p><hr><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    String input = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="string">&quot;0 0 0&quot;</span>.equals(input = br.readLine())) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] lpv = convertStringArrayToIntegerArray(input.split(<span class="string">&quot; &quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> l = lpv[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> p = lpv[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> v = lpv[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        sb.append(<span class="string">&quot;Case &quot;</span>).append(++i).append(<span class="string">&quot;: &quot;</span>).append((v/p) * l + ((v%p) &gt; l ? l : (v%p))).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(sb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] convertStringArrayToIntegerArray(String[] args) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[args.length];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (String str : args) &#123;</span><br><span class="line">        array[i++] = Integer.parseInt(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="흐름"><a href="#흐름" class="headerlink" title="흐름"></a>흐름</h2><ol><li>V일 중에 연속되는 P일 동안 L일 만큼 휴가를 사용 할 수 있으므로</li><li>V에서 P를 나눈 값에서 L일을 곱하면 사용 가능한 휴가 일수가 구해지고</li><li>L이 V일에서 P일을 나눈 값보다 작을 땐 L일 만큼 휴가를 더 갈 수 있고</li><li>큰 경우엔 V % P 일 만큼 갈 수 있으므로 구한 값을 더하면</li><li>총 휴가 일수를 구할 수 있다.</li></ol><hr><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><img src="/2021/03/25/%EB%B0%B1%EC%A4%80-4796%EB%B2%88-%EC%BA%A0%ED%95%91/%EC%BA%A1%EC%B2%98.PNG" class="" title="백준 4796번: 캠핑">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/4796&quot;&gt;https://www.acmicpc.net</summary>
      
    
    
    
    
    <category term="알고리즘" scheme="https://jungguji.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
    <category term="그리디" scheme="https://jungguji.github.io/tags/%EA%B7%B8%EB%A6%AC%EB%94%94/"/>
    
    <category term="백준" scheme="https://jungguji.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
  </entry>
  
  <entry>
    <title>Requestbody Annotation 사용 시 기본 생성자 필요</title>
    <link href="https://jungguji.github.io/2021/02/05/Requestbody-Annotation-%EC%82%AC%EC%9A%A9-%EC%8B%9C-%EA%B8%B0%EB%B3%B8-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%84%EC%9A%94/"/>
    <id>https://jungguji.github.io/2021/02/05/Requestbody-Annotation-%EC%82%AC%EC%9A%A9-%EC%8B%9C-%EA%B8%B0%EB%B3%B8-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%84%EC%9A%94/</id>
    <published>2021-02-05T13:39:20.000Z</published>
    <updated>2021-02-05T13:39:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>사실, 제목이 결론이다. @Requestbody Annotation을 사용하려면 반드시 해당 DTO에는 기본 생성자가 명시적으로 존재하여야 한다. 뭔가 설정을 잘못했는지는 모르겠지만 intellij 에서 stacktrace가 출력되지 않아 이 사실을 알 수 가 없어서 엄청나게 삽질을 했기에 내용을 정리한다…</p><hr><h2 id="본론"><a href="#본론" class="headerlink" title="본론"></a>본론</h2><h3 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h3><p>controller 테스트에서 모든 조건을 맞췄는데도 500 에러가 발생하여 테스트를 통과하지 못하는 상황이었는데 @Requestbody annotation을 DTO가 아닌 HashMap으로 변경하니 테스트가 정상적으로 통과되어 JSON이 제대로 DTO로 매핑되지 않아서 발생하는 문제라고 판단했다.</p><h3 id="에러-발생"><a href="#에러-발생" class="headerlink" title="에러 발생"></a>에러 발생</h3><img src="/2021/02/05/Requestbody-Annotation-%EC%82%AC%EC%9A%A9-%EC%8B%9C-%EA%B8%B0%EB%B3%B8-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%84%EC%9A%94/%EA%B8%B0%EB%B3%B8%EC%83%9D%EC%84%B1%EC%9E%90_%EC%97%90%EB%9F%AC.png" class="" title="Requestbody Annotation 사용 시 기본 생성자 필요 에러 발생 에러 발생"><blockquote><p>No suitable constructor found for type [simple type, class 클래스명]: can not instantiate from JSON object (missing default constructor or creator, or perhaps need to add/enable type information?)</p></blockquote><p>직역하면 기본 생성자가 존재하지 않아서 에러가 발생했다는 내용이다.</p><h3 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h3><p>빌더패턴을 사용하던 클래스에 @Noargsconstructor annotation을 사용해서 기본 생성자를 생성하게 하였다.</p><img src="/2021/02/05/Requestbody-Annotation-%EC%82%AC%EC%9A%A9-%EC%8B%9C-%EA%B8%B0%EB%B3%B8-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%84%EC%9A%94/%EC%84%B1%EA%B3%B5.png" class="" title="Requestbody Annotation 사용 시 기본 생성자 필요 성공 테스트 성공"><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>@Requestbody와 DTO를 매핑되게 해야 할 경우 많은 조건이 필요하다.<br>이전 포스트에 작성했던 boolean의 변수명이라던가, 지금과 같은 기본 생성자라 라던지… 이게 모두 @Requestbody가 jackson 라이브러리를 이용해 매핑하기 때문이다. </p><hr><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><ul><li><a href="https://velog.io/@conatuseus/RequestBody%EC%97%90-%EA%B8%B0%EB%B3%B8-%EC%83%9D%EC%84%B1%EC%9E%90%EB%8A%94-%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%9C%EA%B0%800">https://velog.io/@conatuseus/RequestBody%EC%97%90-%EA%B8%B0%EB%B3%B8-%EC%83%9D%EC%84%B1%EC%9E%90%EB%8A%94-%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%9C%EA%B0%80</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;p&gt;사실, 제목이 결론이다. @Requestbody Annotation을 사용하려면 반드시 해당 DTO에는 기본 생성자가 명시적으</summary>
      
    
    
    
    
    <category term="Junit" scheme="https://jungguji.github.io/tags/Junit/"/>
    
    <category term="Test" scheme="https://jungguji.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot Heroku에 배포하기</title>
    <link href="https://jungguji.github.io/2021/01/28/Spring-boot-Heroku%EC%97%90-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/"/>
    <id>https://jungguji.github.io/2021/01/28/Spring-boot-Heroku%EC%97%90-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/</id>
    <published>2021-01-28T12:07:20.000Z</published>
    <updated>2021-01-28T12:07:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>AWS 프리티어는 이미 다른 서비스가 이용하고 있고 Java를 지원해주는 클라우드 서비스가 없었는데 <a href="https://www.heroku.com/">heroku</a>를 발견하여 사용방법을 정리 해둔다.</p><p><strong>참고로 데이터베이스는 한글을 지원하지 않는다.</strong></p><hr><h2 id="본론"><a href="#본론" class="headerlink" title="본론"></a>본론</h2><ol><li>heroku 회원 가입</li></ol><img src="/2021/01/28/Spring-boot-Heroku%EC%97%90-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85.PNG" class="" title="Spring boot Heroku에 배포하기 회원가입 회원가입"><ol start="2"><li>App 생성</li></ol><img src="/2021/01/28/Spring-boot-Heroku%EC%97%90-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/new_app.PNG" class="" title="Spring boot Heroku에 배포하기 Create a new app Create a new app"><p>위에 보이는 create a new app 버튼을 클릭하고</p><img src="/2021/01/28/Spring-boot-Heroku%EC%97%90-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/image.png" class="" title="Spring boot Heroku에 배포하기 app 이름 지정 app 이름 지정"><p>App name을 지정해야 하는데 이미 heroku에 존재하는 service의 name은 생성 할 수 없고,<br>여기서 지정한 App name으로 호스팅 될 URL이 생성된다.</p><ul><li>ex) appname : backjoonframeautomaticgenerat<br>  URL : <a href="https://backjoonframeautomaticgenerat.herokuapp.com/">https://backjoonframeautomaticgenerat.herokuapp.com/</a></li></ul><ol start="3"><li>heroku CLI 설치</li></ol><img src="/2021/01/28/Spring-boot-Heroku%EC%97%90-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/CLI_%EC%84%A4%EC%B9%98.png" class="" title="Spring boot Heroku에 배포하기 Heroku CLI 설치 Heroku CLI 설치"><p>생성이 완료되면 위 화면처럼 Deploy tab으로 이동되는데 설명되어 있는 것 처럼 먼저 <a href="https://devcenter.heroku.com/articles/heroku-cli">Heroku CLI</a>를 자신의 OS 버전에 맞게 설치한다.</p><ol start="4"><li>Procfile 생성</li></ol><p>Heroku는 실행 할 때 마다 port를 자동으로 지정해주는데 port를 고정시키기 위해 우선 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto-use-short-command-line-arguments">application.properties에 port를 바인딩</a> 해준다.</p><h3 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=$&#123;port:<span class="number">8080</span>&#125;</span><br></pre></td></tr></table></figure><p>그 후 Procfile을 Project 루트 디렉토리에 확장자 없이 생성하고 아래와 같이 작성한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web: java -Dserver.port=$PORT $JAVA_OPTS -jar [실행될 jar파일 경로]</span><br></pre></td></tr></table></figure><h3 id="Procfile의-경로"><a href="#Procfile의-경로" class="headerlink" title="Procfile의 경로"></a>Procfile의 경로</h3><img src="/2021/01/28/Spring-boot-Heroku%EC%97%90-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/Procfile_%EA%B2%BD%EB%A1%9C.png" class="" title="Spring boot Heroku에 배포하기 Procfile의 경로 Procfile의 경로 루트 디렉토리에 오도록 작성한다."><ol start="5"><li>배포</li></ol><p>이후엔 heroku의 가이드를 그대로 따라하면 된다.</p><img src="/2021/01/28/Spring-boot-Heroku%EC%97%90-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/%EB%B0%B0%ED%8F%AC%EC%99%84%EB%A3%8C.png" class="" title="Spring boot Heroku에 배포하기 배포 완료 배포 완료"><p>모든 가이드를 정상적으로 잘 따라하면 위 처럼 접속할 수 있는 URL이 출력되고 해당 URL로 접속하면</p><ol start="6"><li>확인</li></ol><p><a href="https://backjoonframeautomaticgenerat.herokuapp.com/">https://backjoonframeautomaticgenerat.herokuapp.com/</a></p><img src="/2021/01/28/Spring-boot-Heroku%EC%97%90-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/%ED%99%95%EC%9D%B8.PNG" class="" title="Spring boot Heroku에 배포하기 확인 배포가 마무리된 모습"><p>정상적으로 실행되어 서비스가 실행되는 것을 확인 할 수 있다.</p><hr><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>데이터베이스를 사용하지 않는 서비스나, 한글이 입력되지 않는 서비스의 경우 무료로 이용 할 수 있는 좋은 클라우드 서비스 인 것 같다.</p><p>참고로 30분간 접속이 없으면 휴면 모드로 전환되어 최초 접속이 다소 느릴 수 있으나 무료 서비스인 만큼 그정도는 감안해주자.</p><p>이 글에 소개한 CLI를 이용한 방법 말고 Github와 연결해서 branch에 push하면 자동으로 배포되게 할 수 도 있는 것 같으니 찾아보고 적용하면 이 방법 보다 더 편할 것이다.</p><hr><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><ul><li><a href="https://jeong-pro.tistory.com/182">https://jeong-pro.tistory.com/182</a></li><li><a href="https://wedul.site/590">https://wedul.site/590</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;p&gt;AWS 프리티어는 이미 다른 서비스가 이용하고 있고 Java를 지원해주는 클라우드 서비스가 없었는데 &lt;a href=&quot;https</summary>
      
    
    
    
    
    <category term="Spring boot" scheme="https://jungguji.github.io/tags/Spring-boot/"/>
    
    <category term="Heroku" scheme="https://jungguji.github.io/tags/Heroku/"/>
    
    <category term="Could" scheme="https://jungguji.github.io/tags/Could/"/>
    
  </entry>
  
  <entry>
    <title>failed to lazily initialize a collection of role</title>
    <link href="https://jungguji.github.io/2021/01/22/failed-to-lazily-initialize-a-collection-of-role/"/>
    <id>https://jungguji.github.io/2021/01/22/failed-to-lazily-initialize-a-collection-of-role/</id>
    <published>2021-01-22T13:31:53.000Z</published>
    <updated>2021-01-22T13:31:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>연관관계에 있는 객체를 가져와서 set 하는 메서드를 테스트 하는 도중 아래와 같은 에러가 발생하였다.</p><hr><h2 id="본론"><a href="#본론" class="headerlink" title="본론"></a>본론</h2><h3 id="해당-에러"><a href="#해당-에러" class="headerlink" title="해당 에러"></a>해당 에러</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: com.jjlee.wedding.payment.domain.Cost.costOptions, no session or session was closed</span><br><span class="line"></span><br><span class="line">at org.hibernate.collection.AbstractPersistentCollection.throwLazyInitializationException(AbstractPersistentCollection.java:<span class="number">383</span>)</span><br><span class="line">at org.hibernate.collection.AbstractPersistentCollection.throwLazyInitializationExceptionIfNotConnected(AbstractPersistentCollection.java:<span class="number">375</span>)</span><br><span class="line">at org.hibernate.collection.AbstractPersistentCollection.readSize(AbstractPersistentCollection.java:<span class="number">122</span>)</span><br><span class="line">at org.hibernate.collection.PersistentBag.size(PersistentBag.java:<span class="number">248</span>)</span><br><span class="line">at com.xxxxxx.ImplTest.가져와서_셋해야하는지_테스트(CostServiceImplTest.java:<span class="number">89</span>)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">at org.junit.runners.model.FrameworkMethod$<span class="number">1.</span>runReflectiveCall(FrameworkMethod.java:<span class="number">59</span>)</span><br><span class="line">at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:<span class="number">12</span>)</span><br><span class="line">at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:<span class="number">56</span>)</span><br><span class="line">at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:<span class="number">17</span>)</span><br><span class="line">at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:<span class="number">26</span>)</span><br><span class="line">at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:<span class="number">75</span>)</span><br><span class="line">at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:<span class="number">86</span>)</span><br><span class="line">at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:<span class="number">84</span>)</span><br><span class="line">at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:<span class="number">366</span>)</span><br><span class="line">at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:<span class="number">252</span>)</span><br><span class="line">at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:<span class="number">94</span>)</span><br><span class="line">at org.junit.runners.ParentRunner$<span class="number">4.</span>run(ParentRunner.java:<span class="number">331</span>)</span><br><span class="line">at org.junit.runners.ParentRunner$<span class="number">1.</span>schedule(ParentRunner.java:<span class="number">79</span>)</span><br><span class="line">at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:<span class="number">329</span>)</span><br><span class="line">at org.junit.runners.ParentRunner.access$<span class="number">100</span>(ParentRunner.java:<span class="number">66</span>)</span><br><span class="line">at org.junit.runners.ParentRunner$<span class="number">2.</span>evaluate(ParentRunner.java:<span class="number">293</span>)</span><br><span class="line">at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:<span class="number">61</span>)</span><br><span class="line">at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:<span class="number">70</span>)</span><br><span class="line">at org.junit.runners.ParentRunner$<span class="number">3.</span>evaluate(ParentRunner.java:<span class="number">306</span>)</span><br><span class="line">at org.junit.runners.ParentRunner.run(ParentRunner.java:<span class="number">413</span>)</span><br><span class="line">at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:<span class="number">191</span>)</span><br><span class="line">at org.junit.runner.JUnitCore.run(JUnitCore.java:<span class="number">137</span>)</span><br><span class="line">at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:<span class="number">68</span>)</span><br><span class="line">at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:<span class="number">33</span>)</span><br><span class="line">at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:<span class="number">230</span>)</span><br><span class="line">at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:<span class="number">58</span>)</span><br></pre></td></tr></table></figure><p>이 때 디버깅을 해보면 연결된 entitiy에서</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unable to evaluate the expression Method threw <span class="string">&#x27;org.hibernate.LazyInitializationException&#x27;</span> exception.</span><br></pre></td></tr></table></figure><p>라는 에러가 발생해 있는데 이는 결국 select 한 entitiy가 영속성 컨텍스트 내에 존재하지 않기 때문에 발생한 애러이다.<br>위 에러에서 말하는 세션이 바로 영속성 컨텍스트를 말하는 것이고, 이는 한 트랜잭션안에 해당 entitiy가 존재하지 않다는 것과 같은 말이다.</p><h3 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h3><p>이를 해결하기 위해선 현재 지연로딩으로 되어있는 연관관계를 즉시로딩으로 변경하여 한번에 가져오던가,<br>혹은 Test 메서드에 @Transactional 어노테이션을 줘서 트랜잭션 내에 존재하도록 해주면 테스트가 정상적으로 통과되게 된다.</p><h3 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h3><hr><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><ul><li><a href="%5Bhttps://bebong.tistory.com/entry/JPA-Lazy-Evaluation-LazyInitializationException-could-not-initialize-proxy-%E2%80%93-no-Session%5D(https://bebong.tistory.com/entry/JPA-Lazy-Evaluation-LazyInitializationException-could-not-initialize-proxy-%E2%80%93-no-Session)"><a href="https://bebong.tistory.com/entry/JPA-Lazy-Evaluation-LazyInitializationException-could-not-initialize-proxy-%E2%80%93-no-Session">https://bebong.tistory.com/entry/JPA-Lazy-Evaluation-LazyInitializationException-could-not-initialize-proxy-–-no-Session</a></a></li><li><a href="%5Bhttps://ankonichijyou.tistory.com/entry/JPA-OneToMany-%EC%98%A4%EB%A5%98%5D(https://ankonichijyou.tistory.com/entry/JPA-OneToMany-%EC%98%A4%EB%A5%98)"><a href="https://ankonichijyou.tistory.com/entry/JPA-OneToMany-%EC%98%A4%EB%A5%98">https://ankonichijyou.tistory.com/entry/JPA-OneToMany-오류</a></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;p&gt;연관관계에 있는 객체를 가져와서 set 하는 메서드를 테스트 하는 도중 아래와 같은 에러가 발생하였다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2</summary>
      
    
    
    
    
    <category term="Junit" scheme="https://jungguji.github.io/tags/Junit/"/>
    
    <category term="JPA" scheme="https://jungguji.github.io/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>Junit4 설정 주입 에러</title>
    <link href="https://jungguji.github.io/2021/01/12/Junit4-%EC%84%A4%EC%A0%95-%EC%A3%BC%EC%9E%85-%EC%97%90%EB%9F%AC/"/>
    <id>https://jungguji.github.io/2021/01/12/Junit4-%EC%84%A4%EC%A0%95-%EC%A3%BC%EC%9E%85-%EC%97%90%EB%9F%AC/</id>
    <published>2021-01-12T12:45:32.000Z</published>
    <updated>2021-01-12T12:45:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>현재 작업 중인 프로젝트에서 테스트 코드를 작성해 테스트할 일이 있었는데 프로젝트의 환경은 spring 4.3에 Junit 4.8이었다.</p><p>이에 원래 사용하던 junit5로 넘어갈까 하였으나 junit5를 사용하려면 설정을 spring boot으로 해야 한다는 글들이 있어 같은 테스트 환경을 만들기 위해 junit만 4.12 버전으로 업그레이드한 후 테스트를 진행하였는데 spring 프로젝트지만 config 설정들을 boot 처럼 java 파일로 관리하는 형태여서 java 파일과 properties 파일을 동시에 잡아 줄 필요가 있었는데<br>@Contextconfiguration(classes = {블라블라…}, locations = {블라블라…})로 잡으니 에러가 발생하여 해결한 방법을 작성해놓는다.</p><hr><h2 id="본론"><a href="#본론" class="headerlink" title="본론"></a>본론</h2><h3 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;</span></span><br><span class="line"><span class="meta">        DatabaseConfig.class,</span></span><br><span class="line"><span class="meta">        SecurityConfig.class,</span></span><br><span class="line"><span class="meta">        SocialConfig.class,</span></span><br><span class="line"><span class="meta">        EnumConfig.class,</span></span><br><span class="line"><span class="meta">        WebMvcConfig.class</span></span><br><span class="line"><span class="meta">&#125;, locations = &quot;classpath:properties/test.properties&quot;)</span></span><br></pre></td></tr></table></figure><p>서론에 적은 것 처럼 classes와 locations를 둘 다 설정하였더니 아래와 같이 에러가 발생하였다.</p><h3 id="에러"><a href="#에러" class="headerlink" title="에러"></a>에러</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: Cannot process locations AND classes <span class="keyword">for</span> context configuration [ContextConfigurationAttributes@64c87930 declaringClass = <span class="string">&#x27;com.xxxx.xxxImplTest&#x27;</span>, classes = <span class="string">&#x27;&#123;class com.xxxx.config.DatabaseConfig, class com.xxx.config.SecurityConfig, class com.xxx.config.SocialConfig, class com.xxx.config.EnumConfig, class com.xxx.config.WebMvcConfig&#125;&#x27;</span>, locations = <span class="string">&#x27;&#123;classpath:properties/test.properties&#125;&#x27;</span>, inheritLocations = <span class="keyword">true</span>, initializers = <span class="string">&#x27;&#123;&#125;&#x27;</span>, inheritInitializers = <span class="keyword">true</span>, name = [<span class="keyword">null</span>], contextLoaderClass = <span class="string">&#x27;org.springframework.test.context.ContextLoader&#x27;</span>]: configure one or the other, but not both.</span><br><span class="line"></span><br><span class="line">at org.springframework.util.Assert.isTrue(Assert.java:<span class="number">68</span>)</span><br><span class="line">at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.processContextConfiguration(AbstractDelegatingSmartContextLoader.java:<span class="number">154</span>)</span><br><span class="line">at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildMergedContextConfiguration(AbstractTestContextBootstrapper.java:<span class="number">371</span>)</span><br><span class="line">at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildMergedContextConfiguration(AbstractTestContextBootstrapper.java:<span class="number">305</span>)</span><br><span class="line">at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildTestContext(AbstractTestContextBootstrapper.java:<span class="number">112</span>)</span><br><span class="line">at org.springframework.test.context.TestContextManager.&lt;init&gt;(TestContextManager.java:<span class="number">120</span>)</span><br><span class="line">at org.springframework.test.context.TestContextManager.&lt;init&gt;(TestContextManager.java:<span class="number">105</span>)</span><br><span class="line">at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTestContextManager(SpringJUnit4ClassRunner.java:<span class="number">152</span>)</span><br><span class="line">at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.&lt;init&gt;(SpringJUnit4ClassRunner.java:<span class="number">143</span>)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">423</span>)</span><br><span class="line">at org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:<span class="number">104</span>)</span><br><span class="line">at org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:<span class="number">86</span>)</span><br><span class="line">at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:<span class="number">70</span>)</span><br><span class="line">at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:<span class="number">37</span>)</span><br><span class="line">at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:<span class="number">70</span>)</span><br><span class="line">at org.junit.internal.requests.ClassRequest.createRunner(ClassRequest.java:<span class="number">28</span>)</span><br><span class="line">at org.junit.internal.requests.MemoizingRequest.getRunner(MemoizingRequest.java:<span class="number">19</span>)</span><br><span class="line">at org.junit.internal.requests.FilterRequest.getRunner(FilterRequest.java:<span class="number">36</span>)</span><br><span class="line">at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:<span class="number">49</span>)</span><br><span class="line">at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:<span class="number">33</span>)</span><br><span class="line">at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:<span class="number">230</span>)</span><br><span class="line">at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:<span class="number">58</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p>@Testpropertysource(classpath:””)로 test properties를 잡아주고<br>@Contextconfiguration(classes = { XXXConfig.class}) 로 Java config 파일들을 잡아준다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;</span></span><br><span class="line"><span class="meta">        DatabaseConfig.class,</span></span><br><span class="line"><span class="meta">        SecurityConfig.class,</span></span><br><span class="line"><span class="meta">        SocialConfig.class,</span></span><br><span class="line"><span class="meta">        EnumConfig.class,</span></span><br><span class="line"><span class="meta">        WebMvcConfig.class</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Testpropertysource(&quot;classpath:properties/test.properties&quot;)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;p&gt;현재 작업 중인 프로젝트에서 테스트 코드를 작성해 테스트할 일이 있었는데 프로젝트의 환경은 spring 4.3에 Junit 4</summary>
      
    
    
    
    
    <category term="Junit" scheme="https://jungguji.github.io/tags/Junit/"/>
    
    <category term="Test" scheme="https://jungguji.github.io/tags/Test/"/>
    
    <category term="Spring" scheme="https://jungguji.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Hexo blog backup 방법</title>
    <link href="https://jungguji.github.io/2021/01/02/Hexo-blog-backup-%EB%B0%A9%EB%B2%95/"/>
    <id>https://jungguji.github.io/2021/01/02/Hexo-blog-backup-%EB%B0%A9%EB%B2%95/</id>
    <published>2021-01-02T06:54:05.000Z</published>
    <updated>2021-01-02T06:54:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>많은 블로그 서비스 중 필자는 Git, Github를 활용해서 사용하는 hexo로 github 블로그를 선택했지만, 다른 블로그 서비스들과는 달리 설치형 블로그의 특성상 설치된 PC가 아닌 경우엔 블로그에 글을 작성하는 일이 쉽지 않고, 블로그가 설치된 PC가 고장이라도 나는 날에는 고스라니 블로그를 날려버리는 상황이 닥치는 경우도 왕왕있다. (예로 필자는 블로그를 설치한 HDD가 고장나 블로그를 새로 작성했다.) 이런 경우를 방지하고, 블로그 작성의 확장성을 위해 github을 이용해 Hexo 블로그를 back up 하는 방법을 알아본다.</p><hr><h2 id="방법"><a href="#방법" class="headerlink" title="방법"></a>방법</h2><img src="/2021/01/02/Hexo-blog-backup-%EB%B0%A9%EB%B2%95/1_%EC%A0%80%EC%9E%A5%EC%86%8C.PNG" class="" title="Hexo blog backup 방법 post와 테마를 저장 할 저장소 생성 " alt="post와 테마를 저장 할 저장소 생성"><ol><li>우선 위 사진처럼 github에서 테마와 post를 저장 할 repository를 생성한다.<br>이 때 테마를 저장 할 저장소의 이름은 테마와 같게 한다.</li></ol><img src="/2021/01/02/Hexo-blog-backup-%EB%B0%A9%EB%B2%95/2_%ED%85%8C%EB%A7%88_%EC%A0%80%EC%9E%A5%EC%86%8C_%EB%B3%80%EA%B2%BD.PNG" class="" title="Hexo blog backup 방법 설치한 테마의 저장소 변경 " alt="설치한 테마의 저장소 변경"><ol start="2"><li>테마를 저장하기 위해 연결된 원격 저장소의 위치를 확인하고 설치한 테마 폴더 안에서 git 원격 저장소 주소를 변경한다.</li><li>변경 후 테마용 저장소에 테마를 push한다.</li></ol><img src="/2021/01/02/Hexo-blog-backup-%EB%B0%A9%EB%B2%95/3_%ED%85%8C%EB%A7%88-%EC%A0%80%EC%9E%A5%ED%99%95%EC%9D%B8.PNG" class="" title="Hexo blog backup 방법 push 된 테마 확인 " alt="push 된 테마 확인"><ol start="4"><li>위 처럼 정상적으로 저장되어 있는지 확인하고 themes 폴더안에서 테마를 삭제한다.</li><li>git의 submodule 기능을 이용해 저장한 테마를 submodule로 추가하는데 이 때 디렉토리의 위치는 themes 폴더 내로 이동해서 submodule 기능을 실행한다.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add 테마 저장소</span><br></pre></td></tr></table></figure><ol start="6"><li>post를 저장 할 저장소 주소를 추가한다.(cotent)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add content post 저장소</span><br></pre></td></tr></table></figure><img src="/2021/01/02/Hexo-blog-backup-%EB%B0%A9%EB%B2%95/4_post-%EC%A0%80%EC%9E%A5%ED%99%95%EC%9D%B8.PNG" class="" title="Hexo blog backup 방법 post 저장 확인 " alt="post 저장 확인"><ol start="7"><li>post 저장용 저장소에 내용을 push하고 정상적으로 저장되었는지 확인한다.</li><li>이 후엔 post 작성 후 post만 content 저장소로 push해주면 된다.</li></ol><hr><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><p>이제 우리는 불미스러운 사고로 블로그가 설치된 HDD가 고장나거나(ㅠㅠ), 블로그가 설치 안된 다른 PC or 노트북에서도 백업된 theme와 post들을 다운받아 블로그를 작성 할 수 있게 되었다.</p><p>여담이지만, 과거로 돌아간다면 나는 velog를 사용 할 듯 싶다.</p><hr><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><ul><li><a href="https://futurecreator.github.io/2018/07/18/hexo-blog-backup/">Hexo 배포 원리와 백업하기</a></li><li><a href="https://blog.naver.com/PostView.nhn?blogId=bestmic&logNo=220939712681&proxyReferer=https://www.google.com/">Git cached 삭제</a></li><li><a href="http://snowdeer.github.io/git/2018/08/01/how-to-remove-git-submodule/">Git Submodule 삭제방법</a></li><li><a href="https://stackoverflow.com/questions/24472596/git-fatal-pathspec-is-in-submodule">Git: fatal: Pathspec is in submodule</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;p&gt;많은 블로그 서비스 중 필자는 Git, Github를 활용해서 사용하는 hexo로 github 블로그를 선택했지만, 다른 블로</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>RequestBody Annotation 사용 시 boolean 변수 바인딩 에러</title>
    <link href="https://jungguji.github.io/2020/12/31/RequestBody-Annotation-%EC%82%AC%EC%9A%A9-%EC%8B%9C-boolean-%EB%B3%80%EC%88%98-%EB%B0%94%EC%9D%B8%EB%94%A9-%EC%97%90%EB%9F%AC/"/>
    <id>https://jungguji.github.io/2020/12/31/RequestBody-Annotation-%EC%82%AC%EC%9A%A9-%EC%8B%9C-boolean-%EB%B3%80%EC%88%98-%EB%B0%94%EC%9D%B8%EB%94%A9-%EC%97%90%EB%9F%AC/</id>
    <published>2020-12-31T13:08:54.000Z</published>
    <updated>2020-12-31T13:08:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>토이프로젝트 중 @Reqeust 어노테이션을 적용한 DTO에서 boolean 데이터를 제대로 전달 받지 못하는 문제가 발생하여 이를 정리한다.</p><hr><h2 id="문제-발생"><a href="#문제-발생" class="headerlink" title="문제 발생"></a>문제 발생</h2><p>vue.js에서 넘어온 데이터를 @RequestBody 어노테이션을 활용해 DTO 객체로 전달 받으려 하였는데 boolean 타입의 데이터가 정상적으로 넘어오지 않는 문제가 발생하였다.</p><h3 id="문제가-발생한-Test-Code"><a href="#문제가-발생한-Test-Code" class="headerlink" title="문제가 발생한 Test Code"></a>문제가 발생한 Test Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dto_boolean_test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//given</span></span><br><span class="line">    RequestDTO dto = RequestDTO.builder()</span><br><span class="line">            .isTestCase(<span class="keyword">true</span>)</span><br><span class="line">            .isNQuantity(<span class="keyword">true</span>)</span><br><span class="line">            .isSpaceIncludeNumber(<span class="keyword">true</span>)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    String test = objectMapper.writeValueAsString(dto);</span><br><span class="line"></span><br><span class="line">    System.out.println(test);</span><br><span class="line">    <span class="keyword">final</span> ResultActions action = mockMvc.perform(post(<span class="string">&quot;/frame&quot;</span>)</span><br><span class="line">            .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">            .content(test))</span><br><span class="line">            .andDo(print());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//then</span></span><br><span class="line">    MvcResult result = action</span><br><span class="line">            .andExpect(status().isOk())</span><br><span class="line">            .andExpect(content().json(test))</span><br><span class="line">            .andReturn();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="에러-결과"><a href="#에러-결과" class="headerlink" title="에러 결과"></a>에러 결과</h3><img src="/2020/12/31/RequestBody-Annotation-%EC%82%AC%EC%9A%A9-%EC%8B%9C-boolean-%EB%B3%80%EC%88%98-%EB%B0%94%EC%9D%B8%EB%94%A9-%EC%97%90%EB%9F%AC/test%EC%8B%A4%ED%8C%A8.PNG" class="" title="RequestBody Annotation 사용 시 boolean 변수 바인딩 에러"><hr><h2 id="원인"><a href="#원인" class="headerlink" title="원인"></a>원인</h2><blockquote><p> You can annotate any field with @Getter and/or @Setter, to let lombok generate the default getter/setter automatically.<br>A default getter simply returns the field, and is named getFoo if the field is called foo (or isFoo if the field’s type is boolean). </p><footer><strong>Project Lombok</strong><cite><a href="https://projectlombok.org/features/GetterSetter">Project Lombok</a></cite></footer></blockquote><p>위 설명처럼 lombok에서 제공하는 @Getter 혹은 @Setter 어노테이션을 사용 할 경우 자동으로 getter/setter 메서드를 생성해주는데<br>이 때 boolean 타입의 변수에 붙는 prefix는 get이 아닌 is이므로 @RequestBody에서 찾을 수 없어 바인딩 되지 않아 발생하는 문제였다.</p><h3 id="실패한-코드"><a href="#실패한-코드" class="headerlink" title="실패한 코드"></a>실패한 코드</h3><img src="/2020/12/31/RequestBody-Annotation-%EC%82%AC%EC%9A%A9-%EC%8B%9C-boolean-%EB%B3%80%EC%88%98-%EB%B0%94%EC%9D%B8%EB%94%A9-%EC%97%90%EB%9F%AC/%EC%8B%A4%ED%8C%A8%ED%95%9C_%EC%BD%94%EB%93%9C.PNG" class="" title="RequestBody Annotation 사용 시 boolean 변수 바인딩 에러 실패한_코드 실패했을 당시 DTO 실패한_코드 실패했을 당시 DTO"><p>이 처럼 boolean 변수에 is prefix를 붙여놓은 상태에서 @Getter 어노테이션을 사용하니, 내부적으로 isIsTestCase() 같은 이상한 네이밍의 메서드가 생성되서<br>@RequestBody에서 바인딩에 사용하는 Jackson 라이브러리의 ObjectMapper에서 필드를 찾을 수 없어서 바인딩 되지 않아 DTO에 정상적으로 값이 입력되지 않았던 것이다.</p><blockquote><p>By default Jackson maps the fields of a JSON object to fields in a Java object by matching the names of the JSON field to the getter and setter methods in the Java object. Jackson removes the “get” and “set” part of the names of the getter and setter methods, and converts the first character of the remaining name to lowercase.</p><footer><strong>Jackson ObjectMapper</strong><cite><a href="https://tutorials.jenkov.com/java-json/jackson-objectmapper.html#how-jackson-objectmapper-matches-json-fields-to-java-fields">Jackson ObjectMapper</a></cite></footer></blockquote><hr><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><ol><li>boolean 변수명에서 is prefix를 제거한다.</li><li>default로 false로 되어 있는 lombok.getter.noIsPrefix=true 설정을 추가한다.<br>이 설정을 추가하면 boolean 변수도 get prefix를 사용한다.</li></ol><p>필자는 boolean 변수에서 is prefix를 제거하는 방식으로 처리했다.<br>다른 타입은 자료형에 따라 prefix를 붙이지 않는 상황에서 boolean 변수에만 붙이는 것이 옳지 않다고 생각했기 때문에 1번을 선택했다.</p><h3 id="수정된-코드"><a href="#수정된-코드" class="headerlink" title="수정된 코드"></a>수정된 코드</h3><img src="/2020/12/31/RequestBody-Annotation-%EC%82%AC%EC%9A%A9-%EC%8B%9C-boolean-%EB%B3%80%EC%88%98-%EB%B0%94%EC%9D%B8%EB%94%A9-%EC%97%90%EB%9F%AC/%EC%84%B1%EA%B3%B5%ED%95%9C_%EC%BD%94%EB%93%9C.PNG" class="" title="RequestBody Annotation 사용 시 boolean 변수 바인딩 에러 문제를 수정한 DTO 에러 문제를 수정한 DTO"><h3 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h3><img src="/2020/12/31/RequestBody-Annotation-%EC%82%AC%EC%9A%A9-%EC%8B%9C-boolean-%EB%B3%80%EC%88%98-%EB%B0%94%EC%9D%B8%EB%94%A9-%EC%97%90%EB%9F%AC/test%EC%84%B1%EA%B3%B5.PNG" class="" title="RequestBody Annotation 사용 시 boolean 변수 바인딩 에러 수정 후 성공한 테스트 에러 수정 후 성공한 테스트"><hr><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><ul><li><a href="https://projectlombok.org/features/GetterSetter">https://projectlombok.org/features/GetterSetter</a></li><li><a href="https://velog.io/@conatuseus/RequestBody%EC%97%90-%EC%99%9C-%EA%B8%B0%EB%B3%B8-%EC%83%9D%EC%84%B1%EC%9E%90%EB%8A%94-%ED%95%84%EC%9A%94%ED%95%98%EA%B3%A0-Setter%EB%8A%94-%ED%95%84%EC%9A%94-%EC%97%86%EC%9D%84%EA%B9%8C-3-idnrafiw">https://velog.io/@conatuseus/RequestBody%EC%97%90-%EC%99%9C-%EA%B8%B0%EB%B3%B8-%EC%83%9D%EC%84%B1%EC%9E%90%EB%8A%94-%ED%95%84%EC%9A%94%ED%95%98%EA%B3%A0-Setter%EB%8A%94-%ED%95%84%EC%9A%94-%EC%97%86%EC%9D%84%EA%B9%8C-3-idnrafiw</a></li><li><a href="http://tutorials.jenkov.com/java-json/jackson-objectmapper.html#how-jackson-objectmapper-matches-json-fields-to-java-fields">http://tutorials.jenkov.com/java-json/jackson-objectmapper.html#how-jackson-objectmapper-matches-json-fields-to-java-fields</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;p&gt;토이프로젝트 중 @Reqeust 어노테이션을 적용한 DTO에서 boolean 데이터를 제대로 전달 받지 못하는 문제가 발생하여</summary>
      
    
    
    
    
    <category term="-Spring-Boot -" scheme="https://jungguji.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>백준 18870번: 좌표 압축</title>
    <link href="https://jungguji.github.io/2020/12/15/%EB%B0%B1%EC%A4%80-18870%EB%B2%88-%EC%A2%8C%ED%91%9C-%EC%95%95%EC%B6%95/"/>
    <id>https://jungguji.github.io/2020/12/15/%EB%B0%B1%EC%A4%80-18870%EB%B2%88-%EC%A2%8C%ED%91%9C-%EC%95%95%EC%B6%95/</id>
    <published>2020-12-15T05:43:55.000Z</published>
    <updated>2020-12-15T05:43:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p><a href="https://www.acmicpc.net/problem/18870">https://www.acmicpc.net/problem/18870</a></p><hr><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    br.readLine();</span><br><span class="line">    Integer[] array = convertStringArrayToIntegerArray(br.readLine().split(<span class="string">&quot; &quot;</span>));</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(array.clone());</span><br><span class="line"></span><br><span class="line">    Collections.sort(list);</span><br><span class="line"></span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(i)) &#123;</span><br><span class="line">            map.put(i, index++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : array) &#123;</span><br><span class="line">            sb.append(map.get(i)).append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(sb.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Integer[] convertStringArrayToIntegerArray(String[] args) &#123;</span><br><span class="line">    Integer[] array = <span class="keyword">new</span> Integer[args.length];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (String str : args) &#123;</span><br><span class="line">        array[i++] = Integer.parseInt(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="흐름"><a href="#흐름" class="headerlink" title="흐름"></a>흐름</h2><ol><li>입력받은 좌표를 저장한 리스트로 수정하면 출력 순서를 맞출 수 없으니 우선 좌표 list를 복사한다.</li><li>복사한 list를 정렬하고 순서대로 반복하면서 좌표값을 key로 index를 저장한다.<ol><li>{-10 : 0}, {-9, 1}… {4,4}</li></ol></li><li>입력받은 좌표를 순서대로 반복하면서 map에 key로 index를 가져온다.</li><li>끝</li></ol><hr><h2 id="좌표-압축의-이유"><a href="#좌표-압축의-이유" class="headerlink" title="좌표 압축의 이유"></a>좌표 압축의 이유</h2><img src="/2020/12/15/%EB%B0%B1%EC%A4%80-18870%EB%B2%88-%EC%A2%8C%ED%91%9C-%EC%95%95%EC%B6%95/%EC%95%95%EC%B6%95%EC%A0%84.PNG" class="" title="백준 18870번: 좌표 압축 좌표 {2 4 -10 4 -9} 압축 전 " alt="좌표 {2 4 -10 4 -9} 압축 전"><br /><img src="/2020/12/15/%EB%B0%B1%EC%A4%80-18870%EB%B2%88-%EC%A2%8C%ED%91%9C-%EC%95%95%EC%B6%95/%EC%95%95%EC%B6%95%ED%9B%84.PNG" class="" title="백준 18870번: 좌표 압축 좌표 {2 4 -10 4 -9} 압축 전 " alt="좌표 {2 4 -10 4 -9} 압축 후"><ul><li>문제의 예제인 좌표 {2 4 -10 4 -9}을 위와 같은 알고리즘으로 압축하면 {2 3 0 3 1}이 되는데 위 그림 처럼 압축된 점들도 같은 동일선상 안에 놓이게 된다.</li><li>이렇게 범위가 매우 넓은 좌표의 경우에 좌표를 인덱싱해서 처리 할 경우 손쉽게 처리 할 수 있게 된다.</li></ul><hr><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><img src="/2020/12/15/%EB%B0%B1%EC%A4%80-18870%EB%B2%88-%EC%A2%8C%ED%91%9C-%EC%95%95%EC%B6%95/%EC%BA%A1%EC%B2%98.PNG" class="" title="백준 1406번: 에디터"><hr><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><ul><li><a href="https://www.desmos.com/calculator/id7dqtpnmv?lang=ko">https://www.desmos.com/calculator/id7dqtpnmv?lang=ko</a></li><li><a href="https://codingdog.tistory.com/entry/%EC%A2%8C%ED%91%9C-%EC%95%95%EC%B6%95-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%B2%94%EC%9C%84%EA%B0%80-%ED%81%B4-%EB%95%8C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B3%B5%EA%B0%84%EC%9D%84-%EC%A4%84%EC%9D%BC%EA%B9%8C%EC%9A%94">https://codingdog.tistory.com/entry/%EC%A2%8C%ED%91%9C-%EC%95%95%EC%B6%95-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%B2%94%EC%9C%84%EA%B0%80-%ED%81%B4-%EB%95%8C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B3%B5%EA%B0%84%EC%9D%84-%EC%A4%84%EC%9D%BC%EA%B9%8C%EC%9A%94</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/18870&quot;&gt;https://www.acmicpc.ne</summary>
      
    
    
    
    
    <category term="알고리즘" scheme="https://jungguji.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
    <category term="백준" scheme="https://jungguji.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
    <category term="좌표압축" scheme="https://jungguji.github.io/tags/%EC%A2%8C%ED%91%9C%EC%95%95%EC%B6%95/"/>
    
    <category term="정렬" scheme="https://jungguji.github.io/tags/%EC%A0%95%EB%A0%AC/"/>
    
  </entry>
  
  <entry>
    <title>백준 1406번: 에디터</title>
    <link href="https://jungguji.github.io/2020/12/14/%EB%B0%B1%EC%A4%80-1406%EB%B2%88-%EC%97%90%EB%94%94%ED%84%B0/"/>
    <id>https://jungguji.github.io/2020/12/14/%EB%B0%B1%EC%A4%80-1406%EB%B2%88-%EC%97%90%EB%94%94%ED%84%B0/</id>
    <published>2020-12-14T06:12:57.000Z</published>
    <updated>2020-12-14T06:12:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p><a href="https://www.acmicpc.net/problem/1406">https://www.acmicpc.net/problem/1406</a></p><hr><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">char</span>[] input = br.readLine().toCharArray();</span><br><span class="line"></span><br><span class="line">    LinkedList&lt;Character&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : input) &#123;</span><br><span class="line">        list.add(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListIterator&lt;Character&gt; it = list.listIterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        it.next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        String command = br.readLine();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (command) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;L&quot;</span> :</span><br><span class="line">                <span class="keyword">if</span> (it.hasPrevious()) &#123;</span><br><span class="line">                    it.previous();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;D&quot;</span> :</span><br><span class="line">                <span class="keyword">if</span> (it.hasNext()) &#123;</span><br><span class="line">                    it.next();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;B&quot;</span> :</span><br><span class="line">                <span class="keyword">if</span> (it.hasPrevious() &amp;&amp; !list.isEmpty()) &#123;</span><br><span class="line">                    it.previous();</span><br><span class="line">                    it.remove();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                it.add(command.charAt(<span class="number">2</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : list) &#123;</span><br><span class="line">        sb.append(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(sb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>이 문제는 로직보다 걸리는 시간이 문제였다.</li><li>처음엔 LinkedList를 그대로 사용해 add, remove를 했지만 시간초과로 인해 <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ListIterator.html">ListIterator</a>을 이용해 해결했다.</li></ul><hr><h2 id="ListIterator"><a href="#ListIterator" class="headerlink" title="ListIterator"></a>ListIterator</h2><ul><li>List를 양방향으로 탐색하고, 루프 중에 리스트를 수정하고, 리스트에서 현재 위치를 가져올 수 있다.</li><li>커서는 previous()로 리턴되는 원소와 next()로 리턴되는 원소 사이에 존재한다.</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">                    Element(0)   Element(1)   Element(2)   ... Element(n-1)</span><br><span class="line">cursor positions:  ^            ^            ^            ^                  ^</span><br></pre></td></tr></table></figure><ul><li>remove()와 set()를 호출해도 커서의 위치는 움직이지 않는다.</li><li>remove() 호출 시 next()혹은 preivous()에 의해 리턴된 마지막 요소를 리스트에서 제거한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&quot;B&quot;</span> :</span><br><span class="line">        <span class="keyword">if</span> (it.hasPrevious() &amp;&amp; !list.isEmpty()) &#123;</span><br><span class="line">            it.previous();</span><br><span class="line">            it.remove();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><img src="/2020/12/14/%EB%B0%B1%EC%A4%80-1406%EB%B2%88-%EC%97%90%EB%94%94%ED%84%B0/%EC%BA%A1%EC%B2%98.PNG" class="" title="백준 1406번: 에디터"><hr><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><ul><li><a href="https://www.acmicpc.net/board/view/59173">https://www.acmicpc.net/board/view/59173</a></li><li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ListIterator.html">https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ListIterator.html</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/1406&quot;&gt;https://www.acmicpc.net</summary>
      
    
    
    
    
    <category term="알고리즘" scheme="https://jungguji.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
    <category term="백준" scheme="https://jungguji.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
    <category term="자료구조" scheme="https://jungguji.github.io/tags/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/"/>
    
  </entry>
  
  <entry>
    <title>백준 11724번: 연결 요소의 개수</title>
    <link href="https://jungguji.github.io/2020/12/08/%EB%B0%B1%EC%A4%80-11724%EB%B2%88-%EC%97%B0%EA%B2%B0-%EC%9A%94%EC%86%8C%EC%9D%98-%EA%B0%9C%EC%88%98/"/>
    <id>https://jungguji.github.io/2020/12/08/%EB%B0%B1%EC%A4%80-11724%EB%B2%88-%EC%97%B0%EA%B2%B0-%EC%9A%94%EC%86%8C%EC%9D%98-%EA%B0%9C%EC%88%98/</id>
    <published>2020-12-08T06:42:15.000Z</published>
    <updated>2020-12-08T06:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p><a href="https://www.acmicpc.net/problem/11724">https://www.acmicpc.net/problem/11724</a></p><hr><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] nm = convertStringArrayToIntegerArray(br.readLine().split(<span class="string">&quot; &quot;</span>));</span><br><span class="line">    <span class="keyword">int</span> n = nm[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> m = nm[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span>[][] graph = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (m-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] xy = convertStringArrayToIntegerArray(br.readLine().split(<span class="string">&quot; &quot;</span>));</span><br><span class="line"></span><br><span class="line">        graph[xy[<span class="number">0</span>]][xy[<span class="number">1</span>]] = <span class="keyword">true</span>;</span><br><span class="line">        graph[xy[<span class="number">1</span>]][xy[<span class="number">0</span>]] = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span>[] isVisit = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; graph.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isVisit[i]) &#123;</span><br><span class="line">            answer += bfs(isVisit, graph, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(answer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] convertStringArrayToIntegerArray(String[] args) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[args.length];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (String str : args) &#123;</span><br><span class="line">        array[i++] = Integer.parseInt(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">boolean</span>[] isVisit, <span class="keyword">boolean</span>[][] graph,<span class="keyword">int</span> startIndex)</span> </span>&#123;</span><br><span class="line">    Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    queue.offer(startIndex);</span><br><span class="line">    isVisit[startIndex] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = queue.poll();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; isVisit.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isVisit[i]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (graph[x][i]) &#123;</span><br><span class="line">                queue.offer(i);</span><br><span class="line">                isVisit[i] = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="흐름"><a href="#흐름" class="headerlink" title="흐름"></a>흐름</h2><ol><li>그래프의 연결 관계를 <a href="https://ko.wikipedia.org/wiki/%EC%9D%B8%EC%A0%91%ED%96%89%EB%A0%AC">인접행렬</a>로 만들기 위해 정점의 개수 + n한 크기의 2차원 배열을 만들고, </li><li>이 문제에서 그래프는 방향이 없는 무방향 그래프이기 때문에 a-&gt;b로 가는 간선이 있으면 b-&gt;a로 가는 간선도 있는 것이므로 대칭이 되도록 배열에 저장한다.</li><li>이후 정점의 개수만큼 루프 돌면서 연결요소의 개수를 구하는데 아직 간선이 연결되지 않은 정점일 경우에만 BFS 탐색을 통해 탐색한다.</li><li>queue를 이용해 bfs를 구현하는데 우선 탐색이 시작되는 정점의 index를 queue에 저장하고, isVisit[] 변수에도 true로 해당 index를 탐색했다고 저장한다.</li><li>queue가 빌 때 까지 반복하면서 queue에 저장된 index를 poll한다.</li><li>정점의 개수 만큼 반복하면서 이미 연결된 정점이면 넘어가고</li><li>아직 연결되지 않은 정점이면서 다른 정점과 연결된 정점이면 queue에 해당 index를 저장하고, 방문했으니 true도 저장한다.</li><li>queue가 비어 루프가 종료되면 연결 요소 하나가 완성된 것이므로 1을 return 하고 bfs를 종료한다.</li><li>return된 1들을 저장해 모든 정점을 탐색 후 종료한다.</li><li>끝</li></ol><hr><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><img src="/2020/12/08/%EB%B0%B1%EC%A4%80-11724%EB%B2%88-%EC%97%B0%EA%B2%B0-%EC%9A%94%EC%86%8C%EC%9D%98-%EA%B0%9C%EC%88%98/%EC%BA%A1%EC%B2%98.PNG" class="" title="백준 11724번: 연결 요소의 개수"><hr><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><ul><li><a href="https://sarah950716.tistory.com/12">https://sarah950716.tistory.com/12</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/11724&quot;&gt;https://www.acmicpc.ne</summary>
      
    
    
    
    
    <category term="알고리즘" scheme="https://jungguji.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
    <category term="백준" scheme="https://jungguji.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
    <category term="탐색" scheme="https://jungguji.github.io/tags/%ED%83%90%EC%83%89/"/>
    
    <category term="BFS" scheme="https://jungguji.github.io/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>백준 5525번: IOIOI</title>
    <link href="https://jungguji.github.io/2020/12/02/%EB%B0%B1%EC%A4%80-5525%EB%B2%88-IOIOI/"/>
    <id>https://jungguji.github.io/2020/12/02/%EB%B0%B1%EC%A4%80-5525%EB%B2%88-IOIOI/</id>
    <published>2020-12-02T09:02:25.000Z</published>
    <updated>2020-12-02T09:02:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p><a href="https://www.acmicpc.net/problem/5525">https://www.acmicpc.net/problem/5525</a></p><hr><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">    br.readLine();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> answer = solution(n, br.readLine());</span><br><span class="line"></span><br><span class="line">    System.out.println(answer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> n, String target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>[] s = target.toCharArray();</span><br><span class="line">    <span class="keyword">char</span>[] targetString = getTargetString(n).toCharArray();</span><br><span class="line">    <span class="keyword">int</span>[] fail = failFunction(targetString);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (start &lt;= s.length - targetString.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m &lt; targetString.length &amp;&amp; s[start + m] == targetString[m]) &#123;</span><br><span class="line">            ++m;</span><br><span class="line">            <span class="keyword">if</span> (m == targetString.length) &#123;</span><br><span class="line">                answer++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>  (m == <span class="number">0</span>) &#123;</span><br><span class="line">                start++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                start += (m - fail[m - <span class="number">1</span>]);</span><br><span class="line">                m = fail[m - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getTargetString</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    sb.append(<span class="string">&quot;I&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        sb.append(<span class="string">&quot;OI&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] failFunction(<span class="keyword">char</span>[] target) &#123;</span><br><span class="line">    <span class="keyword">int</span> n = target.length;</span><br><span class="line">    <span class="keyword">int</span>[] fail = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (start + m &lt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target[start + m] == target[m]) &#123;</span><br><span class="line">            m++;</span><br><span class="line">            fail[start + m - <span class="number">1</span>] = m;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">                start++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                start += (m - fail[m - <span class="number">1</span>]);</span><br><span class="line">                m = fail[m - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="흐름"><a href="#흐름" class="headerlink" title="흐름"></a>흐름</h2><ul><li><strong><a href="https://ko.wikipedia.org/wiki/%EC%BB%A4%EB%88%84%EC%8A%A4-%EB%AA%A8%EB%A6%AC%EC%8A%A4-%ED%94%84%EB%9E%AB_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98">KMP 알고리즘</a></strong> 을 이용해 해결</li></ul><ol><li>S에서 찾을 문자열(targetString)을 만든다.</li><li>찾을 문자열에서 실패함수 값을 구한다.</li><li>배열의 범위를 벗어나기 전까지 반복한다.</li><li>검색 할 문자열 s에서 찾을 단어을 한 문자씩 비교한다.</li><li>한 문자가 같으면, 그 다음 문자를 비교 할 수 있게 m을 1씩 더해서 최종적으로 문자열에 단어가 포함되어 있으면 answer를 증가시킨다.</li><li>문자가 일치하지 않으면<ol><li>m이 0이면 시작도 못해본거니깐 검색 할 문자열에서 한 문자 뒤로 간다.<br>ex) S = ABCDEF 일 경우, B부터 검색하도록 start를 증가</li><li>0이 아니면 단어에서 어느정도 일치한 문자열이 존재한 것이므로 비교 시작 할 문자의 index를 m에서 실패함수 값을 빼서 구한다.</li><li>일치한 문자열 뒤 부터 검색하면 되므로 m도 실패함수 값에서 구한다.</li></ol></li><li>반복이 끝나면 answer 값을 return 한다.</li><li>끝.</li></ol><hr><h2 id="KMP-알고리즘-해설"><a href="#KMP-알고리즘-해설" class="headerlink" title="KMP 알고리즘 해설"></a>KMP 알고리즘 해설</h2><blockquote><p>문자열에서 특정 패턴을 찾아내는 문자열 검색 알고리즘</p><footer><strong>위키백과</strong></footer></blockquote><ul><li>비교한 정보를 최대한 활용</li><li>문자열 S = OOIOIIOIOIOIOIOIOIOIOOIOI 에서 패턴 M = IOIOI 를 찾는다고 가정</li><li>우선 패턴 M의 실패함수를 구하기 위해 IOIOI에서 접두사와 접미사의 길이가 가장 긴 부분을 구한다.</li></ul><h3 id="실패함수"><a href="#실패함수" class="headerlink" title="실패함수"></a>실패함수</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] failFunction(<span class="keyword">char</span>[] target) &#123;</span><br><span class="line">    <span class="keyword">int</span> n = target.length;</span><br><span class="line">    <span class="keyword">int</span>[] fail = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (start + m &lt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target[start + m] == target[m]) &#123;</span><br><span class="line">            m++;</span><br><span class="line">            fail[start + m - <span class="number">1</span>] = m;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">                start++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                start += (m - fail[m - <span class="number">1</span>]);</span><br><span class="line">                m = fail[m - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>IOIOI 패턴에서 index 1에 저장된 ‘O’와 0에 저장된 ‘I’는 같지 않으므로 비교가 시작되는 위치를 1 증가 시킨다. (현재 start = 2, m = 0)</li><li>루프에 의해 다시 비교하면 2에 저장된 ‘I’와 0에 저장된 ‘O’는 같으니 m을 증가시키고 접두사와 접미사가 일치한 값인 m를 저장한다. (현재 start = 2, m = 1)<ol><li>IOIOI에서 IOI까지 진행한 상태에서 I와 I가 일치 했으므로 길이 1이 일치한 것</li></ol></li><li>3에 저장된 ‘O’과 1에 저장된 ‘O’가 같으므로, 다시 m을 1 증가 시키고 접두사와 접미사가 일치한 값인 m을 저장한다. (현재 start = 2, m = 2)<ol><li>IOIOI에서 IOIO까지 진행한 상태에서 ‘IO’와 ‘IO’가 같으므로 길이 2가 일치한 것</li></ol></li><li>4에 저장된 ‘I’과 2에 저장된 ‘I’가 같으므로, 다시 m을 1 증가 시키고 접두사와 접미사가 일치한 값인 m을 저장한다. (현재 start = 2, m = 3)<ol><li>IOIOI는 접두사 ‘IOI’와 ‘IOI’의 길이가 3이므로 3</li></ol></li><li>array return</li><li>끝</li></ol><h3 id="KMP-알고리즘"><a href="#KMP-알고리즘" class="headerlink" title="KMP 알고리즘"></a>KMP 알고리즘</h3><ul><li>실패함수 값 구하는 것과 동일하다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> n, String target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>[] s = target.toCharArray();</span><br><span class="line">    <span class="keyword">char</span>[] targetString = getTargetString(n).toCharArray();</span><br><span class="line">    <span class="keyword">int</span>[] fail = failFunction(targetString);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (start &lt;= s.length - targetString.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m &lt; targetString.length &amp;&amp; s[start + m] == targetString[m]) &#123;</span><br><span class="line">            ++m;</span><br><span class="line">            <span class="keyword">if</span> (m == targetString.length) &#123;</span><br><span class="line">                answer++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>  (m == <span class="number">0</span>) &#123;</span><br><span class="line">                start++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                start += (m - fail[m - <span class="number">1</span>]);</span><br><span class="line">                m = fail[m - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>실패함수 array [0, 0, 1, 2, 3]</li></ul><ol><li>m이 패턴의 길이보다 작고, 문자열 s(OOIOIIOIOIOIOIOIOIOIOOIOI) 에서 start+m 한 index의 문자와 비교할 패턴(IOIOI)의 m 번째 문자가 같지 않으므로 s에서 비교가 시작되는 위치를 1 증가 시킨다. (현재 start = 1, m = 0)</li><li>S의 1와 패턴의 0을 비교해도 여전히 같지 않으므로 시작 위치를 또 증가 시킨다. (start = 2, m = 0)</li><li>S의 2와 패턴의 0을 비교하면 둘다 ‘I’로 같으므로 m을 증가 시키고 패턴의 길이와 같을 때 까지 반복한다. (start = 2, m = 1)</li><li>S의 3와 패턴의 1을 비교하면 둘다 ‘O’로 같으므로 m을 증가 시키고 패턴의 길이와 같을 때 까지 반복한다. (start = 2, m = 2)</li><li>S의 4와 패턴의 2을 비교하면 둘다 ‘I’로 같으므로 m을 증가 시키고 패턴의 길이와 같을 때 까지 반복한다. (start = 2, m = 3)</li><li>S의 5와 패턴의 3을 비교하면 같지 않고 이제 m이 0이 아니므로,</li><li>s의 시작 위치를 증가 시켜야 하는데 1을 증가 시키는게 아니라 이전에 구한 실패 함수 값에서 찾아온다.<ol><li>(m(3) - 실패함수 값 array[m(3) - 1]) = 2</li><li>즉 현재 시작 위치에서 1을 더한 값이 아닌 2를 더한다.</li><li>이미 index 4까지는 접두사 접미사가 2 자리까지 같기 때문에</li></ol></li><li>m 역시 실패함수 값을 가져온다.<ol><li>IOIOI에서 IOIO까지 비교한 값에서 실패했기 떄문에 </li><li>그 이전 접미사 접두사 길이만큼으로 비교한다.</li></ol></li><li>이 시점에서 start = 4, m = 1이 되고 루프를 반복한다.</li><li>4와 1은 같지 않으므로 다시 7번부터 8번까지 반복해서 start와 m을 조정한다.<ol><li>이 예제로 하면 처음부터 같지 않았으므로 start는 한칸만 뒤로 가고</li><li>m 역시 접두사 접미사 1 짜리도 실패했으므로 처음부터 비교한다.</li><li>(start = 5, m = 0)</li></ol></li><li>(5, 0), (6, 1), (7, 2), (8, 3), (9, 4) 이 쭉~ 같으므로 드디어 문자열 s에서 패턴을 찾은 것이므로 answer을 증가 시킨다.</li><li>그 이후로 다시 비교하면 m의 길이가 패턴의 길이를 넘어 갔으므로,</li><li>start와 m의 위치를 다시 조정한다.</li><li>반복</li><li>끝.</li></ol><ul><li>결국 정리하면, 처음 말한 것 처럼 이미 비교한 값은 다시 비교하지 않고 그 다음 부터 비교하는 방식으로 시간을 줄인다.</li><li>더 자세한 설명들은 글 마지막 참고 사이트를 찾아가면 다른 분들이 매우 자세하게 설명해주시고 계신다.</li></ul><hr><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><img src="/2020/12/02/%EB%B0%B1%EC%A4%80-5525%EB%B2%88-IOIOI/%EC%BA%A1%EC%B2%98.PNG" class="" title="백준 5525번: IOIOI"><hr><h2 id="테스트-케이스"><a href="#테스트-케이스" class="headerlink" title="테스트 케이스"></a>테스트 케이스</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">assertEquals(<span class="number">4</span>, test.solution(<span class="number">1</span>, <span class="string">&quot;OOIOIOIOIIOII&quot;</span>));</span><br><span class="line">assertEquals(<span class="number">6</span>, test.solution(<span class="number">2</span>, <span class="string">&quot;OOIOIIOIOIOIOIOIOIOIOOIOI&quot;</span>));</span><br><span class="line">assertEquals(<span class="number">7</span>, test.solution(<span class="number">1</span>, <span class="string">&quot;IOIOIOIOIOIOIOI&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><ul><li><a href="https://m.blog.naver.com/tpinlab/10119424299">https://m.blog.naver.com/tpinlab/10119424299</a></li><li><a href="https://blog.naver.com/PostView.nhn?blogId=kks227&logNo=220917078260&categoryNo=299&parentCategoryNo=0&viewDate=&currentPage=4&postListTopCurrentPage=&from=menu&userTopListOpen=true&userTopListCount=5&userTopListManageOpen=false&userTopListCurrentPage=4">https://blog.naver.com/PostView.nhn?blogId=kks227&amp;logNo=220917078260&amp;categoryNo=299&amp;parentCategoryNo=0&amp;viewDate=&amp;currentPage=4&amp;postListTopCurrentPage=&amp;from=menu&amp;userTopListOpen=true&amp;userTopListCount=5&amp;userTopListManageOpen=false&amp;userTopListCurrentPage=4</a></li><li><a href="https://baeharam.github.io/posts/algorithm/kmp/">https://baeharam.github.io/posts/algorithm/kmp/</a></li><li><a href="https://vvshinevv.tistory.com/2">https://vvshinevv.tistory.com/2</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/5525&quot;&gt;https://www.acmicpc.net</summary>
      
    
    
    
    
    <category term="알고리즘" scheme="https://jungguji.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
    <category term="백준" scheme="https://jungguji.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
    <category term="문자열" scheme="https://jungguji.github.io/tags/%EB%AC%B8%EC%9E%90%EC%97%B4/"/>
    
    <category term="KMP" scheme="https://jungguji.github.io/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>프로세스와 스레드</title>
    <link href="https://jungguji.github.io/2020/11/18/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9C/"/>
    <id>https://jungguji.github.io/2020/11/18/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9C/</id>
    <published>2020-11-18T08:50:57.000Z</published>
    <updated>2020-11-18T08:50:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><ul><li>프로세스(Process)란 메모리 위에 올라와서 실행 중인 프로그램으로 각각의 프로세스는 모두 독립적인 상태이고 Os로부터 자원을 할당 받은 작업의 단위.</li><li>스레드(Thread)란 프로세스 내에서 실행되는 작업의 수행 단위로 각각의 스레드는 프로세스가 할당받은 자원을 이용하면서 스레드간 메모리를 공유하며 작동한다.</li></ul><hr><h2 id="작동-방식"><a href="#작동-방식" class="headerlink" title="작동 방식"></a>작동 방식</h2><h3 id="프로세스"><a href="#프로세스" class="headerlink" title="프로세스"></a>프로세스</h3><img src="/2020/11/18/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9C/process.png" class="" title="프로세스와 스레드 OS에서 자원을 할당받은 프로세스들 " alt="OS에서 자원을 할당받은 프로세스들 (이미지 출처: https:&#x2F;&#x2F;gmlwjd9405.github.io&#x2F;2018&#x2F;09&#x2F;14&#x2F;process-vs-thread.html)"><ul><li>프로세스는 OS로부터 Code, Data, Stack, Heap으로 이루어진 독립된 메모리 영역을 할당 받는다.</li><li>각각 독립된 영역을 할당 받으므로 기본적으로 프로세스들 간에는 다른 프로세스의 변수나, 자료구조에 접근 할 수 없으며 서로 간 통신을 위해선 커널 영역에 IPC를 이용해 프로세스간 통신을 할 수 있다.</li></ul><h3 id="프로세스-내-메모리-구조"><a href="#프로세스-내-메모리-구조" class="headerlink" title="프로세스 내 메모리 구조"></a>프로세스 내 메모리 구조</h3><ol><li>Code 영역 : 프로그램에서 수행 할 코드가 로딩 되는 메모리</li><li>Data 영역 : 프로그램이 실행 될 때 생성되고, 종료 될 때 시스템에 반환되며 BBS와 Data영역으로 나뉘는데 BBS엔 초기화 되지 않은 변수를 위한 영역이고, Data는 초기화된 데이터를 저장하는 메모리이다.</li><li>Heap 영역 : 프로그램이 실행되는 동안 필요에 의해 동적으로 사요되는 메모리 영역으로 대표적으로 C언어의 malloc함수를 이용해 메모리를 할당한다면 이 영역에 할당되고 Java의 Object 타입들은 heap 영역에 생성된다.</li><li>Stack 영역 : 프로그램이 자동으로 사용하는 임시 메모리 영역으로 지연벽수, 파라미터, 리턴 값 등 잠시 사용됐다가 사라지는 데이터를 저장하는 영역으로 함수 호출 시 생성되고 함수가 끝나면 반환된다. 예로 메서드 내에서 선언한 지역 변수는 Stack 영역에 저장되기 때문에 메서드가 끝날 때 함께 사라지므로 다른 메서드에서 호출 할 수 없다.</li></ol><h3 id="스레드"><a href="#스레드" class="headerlink" title="스레드"></a>스레드</h3><img src="/2020/11/18/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9C/thread.png" class="" title="프로세스와 스레드 프로세스에서 자원을 할당받은 스레드들 " alt="프로세스에서 자원을 할당받은 스레드들 (이미지 출처: https:&#x2F;&#x2F;gmlwjd9405.github.io&#x2F;2018&#x2F;09&#x2F;14&#x2F;process-vs-thread.html)"><ul><li>스레드는 프로세스 내부에 존재하고 Stack 영역만 각 스레드마다 독립적으로 할당 받고 그 외에 프로세스 영역에 있는 code, data, heap 영역은 프로세스 내에 있는 스레드 끼리 공유한다.</li><li>때문에 한 스레드에서 공유된 영역의 자원을 수정한다면 다른 스레드에서 그 자원을 사용 할 때 변경된 자원을 사용하게 되고</li><li>결국 개발자가 자원을 동기적으로 사용 할 수 있도록 처리 할 수 있어야 한다.</li><li>프로세스 내 자원을 함께 공유하기 때문에 모든 자원을 각각 독립되게 할당 받은 프로세스와 달리 같은 프로세스 내의 스레드가 문제가 생긴다면 다른 스레드들도 강제로 종료되게 된다.</li></ul><hr><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><ul><li><a href="https://www.yalco.kr/14_process_thread/">https://www.yalco.kr/14_process_thread/</a></li><li><a href="https://gmlwjd9405.github.io/2018/09/14/process-vs-thread.html">https://gmlwjd9405.github.io/2018/09/14/process-vs-thread.html</a></li><li><a href="https://velog.io/@raejoonee/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EC%B0%A8%EC%9D%B4">https://velog.io/@raejoonee/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EC%B0%A8%EC%9D%B4</a></li><li><a href="https://recorda.tistory.com/entry/20160503%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0">https://recorda.tistory.com/entry/20160503%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0</a></li><li><a href="https://ehpub.co.kr/54-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0/">https://ehpub.co.kr/54-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;결론&quot;&gt;&lt;a href=&quot;#결론&quot; class=&quot;headerlink&quot; title=&quot;결론&quot;&gt;&lt;/a&gt;결론&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;프로세스(Process)란 메모리 위에 올라와서 실행 중인 프로그램으로 각각의 프로세스는 모두 독립적인 상태이고 O</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Synchronous, Asynchronous와 Blocking, Non-Blocking</title>
    <link href="https://jungguji.github.io/2020/11/16/Synchronous-Asynchronous%EC%99%80-Blocking-Non-Blocking/"/>
    <id>https://jungguji.github.io/2020/11/16/Synchronous-Asynchronous%EC%99%80-Blocking-Non-Blocking/</id>
    <published>2020-11-16T13:47:28.000Z</published>
    <updated>2020-11-16T13:47:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><ul><li>Synchronous, Asynchronous 는 두 개 이상의 대상에 대한 시간 을 관리하는 방법이고</li><li>Blocking, Non-Blocking 은 직접 제어 할 수 없는 대상을 처리하는 방법에 대한 것이다.</li></ul><h3 id="Synchronous-Asynchronous"><a href="#Synchronous-Asynchronous" class="headerlink" title="Synchronous, Asynchronous"></a>Synchronous, Asynchronous</h3><ul><li>두 개 이상의 대상들의 시간을 처리하는 방식</li><li>Synchronous는 두 개 이상의 대상들의 시간을 일치 시키는 것 으로 메서드가 종료되는 시간과 결과를 전달받은 시간이 일치하면 Synchronous(동기) 방식이다.</li><li>Asynchronous는 두 개 이상의 대상들의 시간을 일치 시키자 않는 것 으로 메서드가 종료되는 시간과 결과를 전달받은 시간이 일치하지 않으면 Asynchronous(비동기) 방식이다.</li></ul><h3 id="Blocking-Non-Blocking"><a href="#Blocking-Non-Blocking" class="headerlink" title="Blocking, Non-Blocking"></a>Blocking, Non-Blocking</h3><ul><li>직접 제어 할 수 없는 대상에 대한 처리 방식</li><li>Blocking은 직접 제어 할 수 없는 대상이 작업이 끝날 떄 까지 <strong>제어권을 넘기지 않아 작업이 끝날 떄 까지 대기</strong> 하는 방식이다.</li><li>Non-Blocking은 직접 제어 할 수 없는 대상의 작업의 종료와 관계없이 <strong>제어권을 바로 다시 얻어와 다른 일을 할 수 있게</strong> 하는 방식이다.</li></ul><hr><h2 id="본론"><a href="#본론" class="headerlink" title="본론"></a>본론</h2><h3 id="Synchronous"><a href="#Synchronous" class="headerlink" title="Synchronous"></a>Synchronous</h3><p>우선 Synchronous의 뜻을 사전에선 아래와 같이 정의하고 있다.</p><blockquote><p>동시 발생하는</p><footer><strong>네이버 어학사전</strong></footer></blockquote><p>이 처럼 두 개 이상의 작업을 동시에 발생시키거나 동시에 종료시키는 행동을 말한다.</p><p>동기 방식을 사용 할 경우 메서드를 호출 했을 때 결과를 호출한 쪽에서 스스로 확인하고 처리하기 떄문에 결과를 처리 할 때까지 기다렸다가 결과를 전달받고 메서드를 종료 시킨다.</p><p>간단히 요약하면 메서드를 호출하면 그 메서드가 종료되는 시간과 결과가 return 되는 시간이 같다는 것으로 메서드가 종료되는 시간과 결과가 return 되는 시간이 같으므로 동기 방식이라 말한다.</p><p>혹은 2개 이상의 일을 각각 실행시켜 A가 끝나는 시간과 B가 시작하는 시간이 같은 경우도 마찬가지로 동기 방식이라고 할 수 있다.</p><p>Java로 예를 들면 쓰레드를 동기 시키기 위해 사용하는 <a href="https://www.javamex.com/tutorials/synchronization_concurrency_synchronized1.shtml">synchronized</a>가 있고 일반적으로는 일부러 설정하지 않는 한 보통의 메서드 호출은 모두 동기 방식으로 사용된다.</p><h3 id="Asynchronous"><a href="#Asynchronous" class="headerlink" title="Asynchronous"></a>Asynchronous</h3><p>Asynchronous 비동기 방식은 부정형 접두사 A를 붙여서 두 개 이상의 대상의 시간을 일치 시키지 않는 방식으로 동기 방식과 반대로 동작한다.</p><p>즉 메서드를 호출 했을 때 결과가 리턴되지 않더라도 다른 작업을 수행하거나 메서드를 종료하고 나중에 처리되면 그 때 결과물을 가져온다.</p><p>이 때 메서드를 호출한 시간과 리턴 받은 시간이 일치하지 않으므로 이러한 방식을 비동기 방식이라 한다.</p><p>보통 ajax를 통해 많이 사용 해봤을 것이고, Java에선 쓰레드를 활용해 비동기적으로 처리 할 수 있고, Spring에선 <a href="https://www.baeldung.com/spring-async">@Async Annotation</a>을 이용해 비동기 방식을 처리 할 수 있다.</p><h3 id="Blocking"><a href="#Blocking" class="headerlink" title="Blocking"></a>Blocking</h3><p>결론에서 말한 것 처럼 Blocking은 직접 제어 할 수 없는 대상이 작업이 끝날 때 까지 제어권을 넘기지 않아 작업이 끝날 때 까지 대기하게 하는 방식이다.</p><p>예를 들면 스타크래프트에서 테란의 SCV는 한번 건물을 짓기 시작하면 건설이 끝날 때 까지 다른 동작을 할 수 없으므로, Blocking 상태라고 할 수 있고, Java에선 System.in 같은 I/O 처리를 예로 들 수 있다.</p><h3 id="Non-Blocking"><a href="#Non-Blocking" class="headerlink" title="Non-Blocking"></a>Non-Blocking</h3><p>Blocking과 반대되는 방식으로 작업의 처리 여부와 상관없이 작업을 호출한 쪽이 다시 제어권을 가져와서 자유롭게 다른 일을 처리할 수 있는 방식을 Non-Blocking 방식이라고 한다.</p><p>예를 들어 프로토스의 프로브는 건물을 짓게 하면 차원 균열만 개방하고 바로 미네라를 캐는 등의 다른 일을 수행 할 수 있으므로 프로브는 Non-Blocking 상태라고 할 수 있다.</p><img src="/2020/11/16/Synchronous-Asynchronous%EC%99%80-Blocking-Non-Blocking/scv.gif" class="" title="Synchronous, Asynchronous와 Blocking, Non-Blocking 서플라이디포를 건설 하는 동안 다른 행위를 할 수 없는 SCV " alt="서플라이디포를 건설 하는 동안 다른 행위를 할 수 없는 SCV"><img src="/2020/11/16/Synchronous-Asynchronous%EC%99%80-Blocking-Non-Blocking/%ED%94%84%EB%A1%9C%EB%B8%8C.png" class="" title="Synchronous, Asynchronous와 Blocking, Non-Blocking 첫 번째 파일럿을 소환 후 파일럿이 완성되기 전에 두 번째 파일럿을 소환 할 수 있는 프로브 " alt="첫 번째 파일럿을 소환 후 파일럿이 완성되기 전에 두 번째 파일럿을 소환 할 수 있는 프로브"><hr><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><ul><li><a href="https://velog.io/@codemcd/Sync-VS-Async-Blocking-VS-Non-Blocking-sak6d01fhx">https://velog.io/@codemcd/Sync-VS-Async-Blocking-VS-Non-Blocking-sak6d01fhx</a></li><li><a href="https://www.youtube.com/watch?v=HKlUvCv9hvA&amp;t=806s">https://www.youtube.com/watch?v=HKlUvCv9hvA&amp;t=806s</a></li><li><a href="https://nesoy.github.io/articles/2017-01/Synchronized">https://nesoy.github.io/articles/2017-01/Synchronized</a></li><li><a href="https://homoefficio.github.io/2017/02/19/Blocking-NonBlocking-Synchronous-Asynchronous/">https://homoefficio.github.io/2017/02/19/Blocking-NonBlocking-Synchronous-Asynchronous/</a></li><li><a href="https://www.notion.so/Sync-vs-Async-Block-vs-Non-block-da3e458e74c84201abfd4bcbf2ed00c2">https://www.notion.so/Sync-vs-Async-Block-vs-Non-block-da3e458e74c84201abfd4bcbf2ed00c2</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;결론&quot;&gt;&lt;a href=&quot;#결론&quot; class=&quot;headerlink&quot; title=&quot;결론&quot;&gt;&lt;/a&gt;결론&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Synchronous, Asynchronous 는 두 개 이상의 대상에 대한 시간 을 관리하는 방법이고&lt;/li&gt;
&lt;</summary>
      
    
    
    
    
    <category term="면접 질문" scheme="https://jungguji.github.io/tags/%EB%A9%B4%EC%A0%91-%EC%A7%88%EB%AC%B8/"/>
    
    <category term="개발" scheme="https://jungguji.github.io/tags/%EA%B0%9C%EB%B0%9C/"/>
    
  </entry>
  
  <entry>
    <title>백준 2751번: 수 정렬하기 2</title>
    <link href="https://jungguji.github.io/2020/11/12/%EB%B0%B1%EC%A4%80-2751%EB%B2%88-%EC%88%98-%EC%A0%95%EB%A0%AC%ED%95%98%EA%B8%B0-2/"/>
    <id>https://jungguji.github.io/2020/11/12/%EB%B0%B1%EC%A4%80-2751%EB%B2%88-%EC%88%98-%EC%A0%95%EB%A0%AC%ED%95%98%EA%B8%B0-2/</id>
    <published>2020-11-12T10:10:20.000Z</published>
    <updated>2020-11-12T10:10:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p><a href="https://www.acmicpc.net/problem/2751">https://www.acmicpc.net/problem/2751</a></p><hr><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in))) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> amount = Integer.parseInt(br.readLine());</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; amount; i++) &#123;</span><br><span class="line">            list.add(Integer.parseInt(br.readLine()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Collections.sort(list);</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : list) &#123;</span><br><span class="line">            sb.append(i).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(sb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Arrays-sort-int-vs-Arrays-sort-Object-and-Collections-sort-List"><a href="#Arrays-sort-int-vs-Arrays-sort-Object-and-Collections-sort-List" class="headerlink" title="Arrays.sort(int[]) vs Arrays.sort(Object[]) and Collections.sort(List)"></a>Arrays.sort(int[]) vs Arrays.sort(Object[]) and Collections.sort(List)</h2><h3 id="Arrays-sort-int"><a href="#Arrays-sort-int" class="headerlink" title="Arrays.sort(int[])"></a>Arrays.sort(int[])</h3><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#sort-byte:A-">DualPivotQuicksort</a>라는 피벗을 두 개를 정해 구간을 3개로 하는 퀵소트를 사용한다.</li><li>API에 따르면 이 때 평균 O(n log(n)) 성능을 제공하며 일반적으로 기존 (one-pivot) 쿽소트 보다 빠르다고 한다.</li><li>하지만 여전히 최악의 경우 O(n^2)인 것은 여전하다.</li></ul><h3 id="Arrays-sort-Object-and-Collections-sort-List"><a href="#Arrays-sort-Object-and-Collections-sort-List" class="headerlink" title="Arrays.sort(Object[]) and Collections.sort(List)"></a>Arrays.sort(Object[]) and Collections.sort(List)</h3><ul><li>java.util.Arrays.useLegacyMergeSort 설정에 따라 true면 legacyMergeSort를 통해 <a href="https://ko.wikipedia.org/wiki/%ED%95%A9%EB%B3%91_%EC%A0%95%EB%A0%AC">Merge sort</a>로 정렬하고 false면 TimeSort를 통해 <a href="https://en.wikipedia.org/wiki/Timsort">Tim sort</a>로 정렬한다.</li><li>이 때 기본적으로 java.util.Arrays.useLegacyMergeSort 설정은 false로 지정되어 있다.</li><li>Tim sort는 Insertion sort와 Merge sort를 결합하여 만든 정렬로 최선의 경우 O(n), 평균적으로 O(n log(n)), 최악의 경우 O(n log(n))의 성능을 제공한다.</li><li><a href="https://d2.naver.com/helloworld/0315536">Tim sort에 대한 자세한 설명</a></li></ul><h2 id="java-util-Arrays-useLegacyMergeSort-확인"><a href="#java-util-Arrays-useLegacyMergeSort-확인" class="headerlink" title="java.util.Arrays.useLegacyMergeSort 확인"></a>java.util.Arrays.useLegacyMergeSort 확인</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LegacyMergeSort</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> userRequested =</span><br><span class="line">            java.security.AccessController.doPrivileged(</span><br><span class="line">                <span class="keyword">new</span> sun.security.action.GetBooleanAction(</span><br><span class="line">                    <span class="string">&quot;java.util.Arrays.useLegacyMergeSort&quot;</span>)).booleanValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>new sun.security.action.GetBooleanAction(“java.util.Arrays.useLegacyMergeSort”)).booleanValue(); 를 sysout으로 출력해보면 false가 return 되는 것을 확인할 수 있다.</li></ul><hr><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><img src="/2020/11/12/%EB%B0%B1%EC%A4%80-2751%EB%B2%88-%EC%88%98-%EC%A0%95%EB%A0%AC%ED%95%98%EA%B8%B0-2/%EA%B2%B0%EA%B3%BC.PNG" class="" title="백준 2751번: 수 정렬하기 2 순서대로 Arrays.sort(int[]), Arrays.sort(Object[]), Collections.sort(List)의 결과 "><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2751&quot;&gt;https://www.acmicpc.net</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>프로그래머스: 방금 그 곡</title>
    <link href="https://jungguji.github.io/2020/11/12/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EB%B0%A9%EA%B8%88-%EA%B7%B8-%EA%B3%A1/"/>
    <id>https://jungguji.github.io/2020/11/12/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EB%B0%A9%EA%B8%88-%EA%B7%B8-%EA%B3%A1/</id>
    <published>2020-11-12T10:05:46.000Z</published>
    <updated>2020-11-12T10:05:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p><a href="https://programmers.co.kr/learn/courses/30/lessons/17683">https://programmers.co.kr/learn/courses/30/lessons/17683</a></p><hr><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">solution</span><span class="params">(String m, String[] musicinfos)</span> </span>&#123;</span><br><span class="line">    String answer = <span class="string">&quot;(None)&quot;</span>;</span><br><span class="line"></span><br><span class="line">    m = getSharpReplace(m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> maxPlayTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String music : musicinfos) &#123;</span><br><span class="line">        String[] info = music.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> playTimeToMinute = getPlayTime(info[<span class="number">0</span>], info[<span class="number">1</span>]);</span><br><span class="line">        String melody = getMelody(playTimeToMinute, info[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (melody.contains(m)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (maxPlayTime &lt; playTimeToMinute) &#123;</span><br><span class="line">                answer = info[<span class="number">2</span>];</span><br><span class="line">                maxPlayTime = playTimeToMinute;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getSharpReplace</span><span class="params">(String arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg.replace(<span class="string">&quot;C#&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">            .replace(<span class="string">&quot;D#&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            .replace(<span class="string">&quot;E#&quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">            .replace(<span class="string">&quot;F#&quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">            .replace(<span class="string">&quot;G#&quot;</span>, <span class="string">&quot;5&quot;</span>)</span><br><span class="line">            .replace(<span class="string">&quot;A#&quot;</span>, <span class="string">&quot;6&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getPlayTime</span><span class="params">(String start, String end)</span> </span>&#123;</span><br><span class="line">    LocalTime startTime = convertLocalTime(start);</span><br><span class="line">    LocalTime endTime = convertLocalTime(end);</span><br><span class="line"></span><br><span class="line">    LocalTime playTime = endTime.minusHours(startTime.getHour()).minusMinutes(startTime.getMinute());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> playTime.getHour() * <span class="number">60</span> + playTime.getMinute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> LocalTime <span class="title">convertLocalTime</span><span class="params">(String time)</span> </span>&#123;</span><br><span class="line">    String[] hourAndMinute = time.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> LocalTime.of(Integer.parseInt(hourAndMinute[<span class="number">0</span>]), Integer.parseInt(hourAndMinute[<span class="number">1</span>]), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getMelody</span><span class="params">(<span class="keyword">int</span> playtime, String melody)</span> </span>&#123;</span><br><span class="line">    String sharpReplaceMelody = getSharpReplace(melody);</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>[] array = sharpReplaceMelody.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; playtime; i++) &#123;</span><br><span class="line">        sb.append(array[i % sharpReplaceMelody.length()]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="흐름"><a href="#흐름" class="headerlink" title="흐름"></a>흐름</h2><ol><li>“#”이 붙은 음계들을 유일한 값으로 치환한다.</li><li>곡 정보를 담은 musicinfos의 개수만큼 반복한다.</li><li>돌면서 “,”로 잘라 시작시간, 끝난시간, 곡 이름, 멜로디 순으로 구분하여 String array에 저장한다.</li><li>시작 시간과 끝난 시간을 LocalTime type으로 만들어서 끝난 시간에서 시작 시간을 빼서 얼마나 오래 방송 됐는지 playTime을 구한다.</li><li>곡 정보에 있는 멜로디에서도 “#”이 붙은 음계들을 1번에서 한 것과 같은 값으로 치환한다.</li><li>playtime에 따라 멜로디에 음계를 추가하기 위해 멜로디를 char array로 변경한다.</li><li>playtime 만큼 반복하면서 멜로디를 만든다.<ol><li>playtime보다 멜로디가 짧은 경우엔 지금 멜로디에 음계를 이어 붙여 playtime 길이 만큼 만든다.</li><li>멜로디가 더 긴 경우엔 playtime 만큼 자른다.</li></ol></li><li>이렇게 구한 멜로디에 기억 중인 멜로디 m이 포함된다면 playtime이 가장 긴지 확인하고 곡 정보를 저장한다.</li><li>끝.</li></ol><hr><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><table><thead><tr><th>번호</th><th>속도</th></tr></thead><tbody><tr><td>테스트 1</td><td>통과 (1.31ms, 54.1MB)</td></tr><tr><td>테스트 2</td><td>통과 (1.38ms, 52.7MB)</td></tr><tr><td>테스트 3</td><td>통과 (3.19ms, 52.6MB)</td></tr><tr><td>테스트 4</td><td>통과 (1.33ms, 51.7MB)</td></tr><tr><td>테스트 5</td><td>통과 (1.44ms, 52.7MB)</td></tr><tr><td>테스트 6</td><td>통과 (1.42ms, 52.2MB)</td></tr><tr><td>테스트 7</td><td>통과 (2.26ms, 52.7MB)</td></tr><tr><td>테스트 8</td><td>통과 (2.27ms, 53.3MB)</td></tr><tr><td>테스트 9</td><td>통과 (2.38ms, 52.5MB)</td></tr><tr><td>테스트 10</td><td>통과 (2.31ms, 52MB)</td></tr><tr><td>테스트 11</td><td>통과 (2.24ms, 53.4MB)</td></tr><tr><td>테스트 12</td><td>통과 (2.03ms, 53.2MB)</td></tr><tr><td>테스트 13</td><td>통과 (2.27ms, 53.2MB)</td></tr><tr><td>테스트 14</td><td>통과 (2.23ms, 52.2MB)</td></tr><tr><td>테스트 15</td><td>통과 (2.19ms, 53.2MB)</td></tr><tr><td>테스트 16</td><td>통과 (2.22ms, 52.1MB)</td></tr><tr><td>테스트 17</td><td>통과 (1.78ms, 52.4MB)</td></tr><tr><td>테스트 18</td><td>통과 (2.22ms, 53MB)</td></tr><tr><td>테스트 19</td><td>통과 (2.66ms, 52.5MB)</td></tr><tr><td>테스트 20</td><td>통과 (2.42ms, 52.1MB)</td></tr><tr><td>테스트 21</td><td>통과 (2.41ms, 52.3MB)</td></tr><tr><td>테스트 22</td><td>통과 (3.55ms, 52.9MB)</td></tr><tr><td>테스트 23</td><td>통과 (3.94ms, 53.2MB)</td></tr><tr><td>테스트 24</td><td>통과 (2.15ms, 51.9MB)</td></tr><tr><td>테스트 25</td><td>통과 (1.24ms, 52.3MB)</td></tr><tr><td>테스트 26</td><td>통과 (1.30ms, 53.2MB)</td></tr><tr><td>테스트 27</td><td>통과 (1.41ms, 52.6MB)</td></tr><tr><td>테스트 28</td><td>통과 (1.12ms, 53.1MB)</td></tr><tr><td>테스트 29</td><td>통과 (12.67ms, 53.4MB)</td></tr><tr><td>테스트 30</td><td>통과 (13.24ms, 53.1MB)</td></tr></tbody></table><hr><h2 id="테스트-케이스"><a href="#테스트-케이스" class="headerlink" title="테스트 케이스"></a>테스트 케이스</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">assertEquals(<span class="string">&quot;HELLO&quot;</span>, test.solution(<span class="string">&quot;ABCDEFG&quot;</span>, <span class="keyword">new</span> String[] &#123;<span class="string">&quot;12:00,12:14,HELLO,CDEFGAB&quot;</span>, <span class="string">&quot;13:00,13:05,WORLD,ABCDEF&quot;</span>&#125;));</span><br><span class="line">assertEquals(<span class="string">&quot;FOO&quot;</span>, test.solution(<span class="string">&quot;CC#BCC#BCC#BCC#B&quot;</span>, <span class="keyword">new</span> String[] &#123;<span class="string">&quot;03:00,03:30,FOO,CC#B&quot;</span>, <span class="string">&quot;04:00,04:08,BAR,CC#BCC#BCC#B&quot;</span>&#125;));</span><br><span class="line">assertEquals(<span class="string">&quot;WORLD&quot;</span>, test.solution(<span class="string">&quot;ABC&quot;</span>, <span class="keyword">new</span> String[] &#123;<span class="string">&quot;12:00,12:14,HELLO,C#DEFGAB&quot;</span>, <span class="string">&quot;13:00,13:05,WORLD,ABCDEF&quot;</span>&#125;));</span><br><span class="line">assertEquals(<span class="string">&quot;(None)&quot;</span>, test.solution(<span class="string">&quot;CDEFGAC&quot;</span>, <span class="keyword">new</span> String[] &#123;<span class="string">&quot;12:00,12:06,HELLO,CDEFGA&quot;</span>&#125;));</span><br><span class="line">assertEquals(<span class="string">&quot;FOO&quot;</span>, test.solution(<span class="string">&quot;CCB&quot;</span>, <span class="keyword">new</span> String[] &#123;<span class="string">&quot;03:00,03:10,FOO,CCB#CCB&quot;</span>, <span class="string">&quot;04:00,04:08,BAR,ABC&quot;</span>&#125;));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/17683&quot;&gt;htt</summary>
      
    
    
    
    
    <category term="알고리즘" scheme="https://jungguji.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
    <category term="프로그래머스" scheme="https://jungguji.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>프로그래머스: 파일명 정렬</title>
    <link href="https://jungguji.github.io/2020/11/12/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%ED%8C%8C%EC%9D%BC%EB%AA%85-%EC%A0%95%EB%A0%AC/"/>
    <id>https://jungguji.github.io/2020/11/12/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%ED%8C%8C%EC%9D%BC%EB%AA%85-%EC%A0%95%EB%A0%AC/</id>
    <published>2020-11-12T09:44:54.000Z</published>
    <updated>2020-11-12T09:44:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p><a href="https://programmers.co.kr/learn/courses/30/lessons/17686">https://programmers.co.kr/learn/courses/30/lessons/17686</a></p><hr><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] solution(String[] files) &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;File&gt; fileList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span>[] array = files[i].toCharArray();</span><br><span class="line"></span><br><span class="line">        String originName = files[i];</span><br><span class="line">        String head = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        Integer number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isString = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> numberStartIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isString &amp;&amp; isNumber(array[j])) &#123;</span><br><span class="line">                head = <span class="keyword">new</span> String(array, <span class="number">0</span>, j).toUpperCase();</span><br><span class="line">                numberStartIndex = j;</span><br><span class="line">                isString = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!isString &amp;&amp; !isNumber(array[j])) &#123;</span><br><span class="line">                number = Integer.parseInt(<span class="keyword">new</span> String(array, numberStartIndex, j - numberStartIndex));</span><br><span class="line">                isString = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isString) &#123;</span><br><span class="line">            number = Integer.parseInt(<span class="keyword">new</span> String(array, numberStartIndex, array.length - numberStartIndex));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fileList.add(<span class="keyword">new</span> File(originName, head, number, i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(fileList);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fileList.stream()</span><br><span class="line">            .map(File::getOriginName)</span><br><span class="line">            .toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(List&lt;File&gt; fileList)</span> </span>&#123;</span><br><span class="line">    fileList.sort((f1, f2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (f1.head.compareTo(f2.head) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> f1.head.compareTo(f2.head);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (f1.number.compareTo(f2.number) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> f1.number.compareTo(f2.number);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> f1.index.compareTo(f2.index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isNumber</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">48</span> &lt;= ch &amp;&amp; ch &lt;= <span class="number">57</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String originName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String head;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer number;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer index;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(String originName, String head, Integer number, Integer index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.originName = originName;</span><br><span class="line">        <span class="keyword">this</span>.head = head;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOriginName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.originName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="흐름"><a href="#흐름" class="headerlink" title="흐름"></a>흐름</h2><ol><li>file 개수만큼 반복하면서 파일명을 char array로 만든다.</li><li>char array를 숫자가 나올 때 까지 반복한다.</li><li>숫자가 나오면 0부터 숫자가 나온 index까지 짤라서 head 변수에 저장시키고 숫자가 시작된 index와 다음에 숫자인지 체크 할 flag 변수를 false로 변경한다.</li><li>head를 만들고 난 후엔 숫자만 뽑아서 number로 저장해야 하므로</li><li>돌면서 현재 문자가 아니고 지금 값도 숫자가 아니면 지금 index까지 잘라서 number에 저장한다.</li><li>만약 tail이 없어서 이번 조건문에 걸리지 않았다면, 숫자가 시직된 index부터 array 길이에서 숫자가 시작된 index를 뺀 크기 만큼 잘라서 number에 저장한다.</li><li>구한 head, number를 가지고 원래 파일명, head, number, 원래 순서를 갖는 File Object를 생성하고 List에 추가한다.</li><li>리스트를 문제의 제약조건 처럼 정렬한다.<ol><li>head로 비교해서 정렬</li><li>head가 같으면 number로 비교해서 정렬</li><li>둘 다 같으면 원래 순서대로 정렬</li></ol></li><li>정렬한 List를 String[]로 만들어서 return 한다.</li><li>끝</li></ol><hr><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><table><thead><tr><th>번호</th><th>속도</th></tr></thead><tbody><tr><td>테스트 1</td><td>통과 (2.80ms, 52.3MB)</td></tr><tr><td>테스트 2</td><td>통과 (2.92ms, 52.8MB)</td></tr><tr><td>테스트 3</td><td>통과 (15.41ms, 54.1MB)</td></tr><tr><td>테스트 4</td><td>통과 (17.89ms, 54.3MB)</td></tr><tr><td>테스트 5</td><td>통과 (16.74ms, 54.3MB)</td></tr><tr><td>테스트 6</td><td>통과 (15.07ms, 53.3MB)</td></tr><tr><td>테스트 7</td><td>통과 (21.21ms, 54.5MB)</td></tr><tr><td>테스트 8</td><td>통과 (21.20ms, 53.8MB)</td></tr><tr><td>테스트 9</td><td>통과 (17.57ms, 53.6MB)</td></tr><tr><td>테스트 10</td><td>통과 (20.00ms, 53.5MB)</td></tr><tr><td>테스트 11</td><td>통과 (15.30ms, 53.8MB)</td></tr><tr><td>테스트 12</td><td>통과 (14.44ms, 54.1MB)</td></tr><tr><td>테스트 13</td><td>통과 (10.24ms, 53.8MB)</td></tr><tr><td>테스트 14</td><td>통과 (12.50ms, 54.1MB)</td></tr><tr><td>테스트 15</td><td>통과 (18.61ms, 54.1MB)</td></tr><tr><td>테스트 16</td><td>통과 (20.40ms, 53.9MB)</td></tr><tr><td>테스트 17</td><td>통과 (10.36ms, 53.8MB)</td></tr><tr><td>테스트 18</td><td>통과 (13.84ms, 54.6MB)</td></tr><tr><td>테스트 19</td><td>통과 (16.07ms, 54.4MB)</td></tr><tr><td>테스트 20</td><td>통과 (14.91ms, 53.8MB)</td></tr></tbody></table><hr><hr><h2 id="정렬을-stream에-추가-할-경우"><a href="#정렬을-stream에-추가-할-경우" class="headerlink" title="정렬을 stream에 추가 할 경우"></a>정렬을 stream에 추가 할 경우</h2><h3 id="stream-sorted"><a href="#stream-sorted" class="headerlink" title="stream sorted"></a>stream sorted</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> fileList.stream()</span><br><span class="line">        .sorted(Comparator.comparing(File::getHead)</span><br><span class="line">        .thenComparing(Comparator.comparing(File::getNumber)</span><br><span class="line">        .thenComparing(File::getIndex)))</span><br><span class="line">        .map(File::getOriginName)</span><br><span class="line">        .toArray(String[]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure><h3 id="결과-1"><a href="#결과-1" class="headerlink" title="결과"></a>결과</h3><table><thead><tr><th>번호</th><th>속도</th></tr></thead><tbody><tr><td>테스트 1</td><td>통과 (10.64ms, 53.2MB)</td></tr><tr><td>테스트 2</td><td>통과 (18.65ms, 53.2MB)</td></tr><tr><td>테스트 3</td><td>통과 (25.96ms, 54.7MB)</td></tr><tr><td>테스트 4</td><td>통과 (24.73ms, 54.8MB)</td></tr><tr><td>테스트 5</td><td>통과 (20.97ms, 54.3MB)</td></tr><tr><td>테스트 6</td><td>통과 (29.57ms, 54.3MB)</td></tr><tr><td>테스트 7</td><td>통과 (30.45ms, 54.3MB)</td></tr><tr><td>테스트 8</td><td>통과 (24.91ms, 54.3MB)</td></tr><tr><td>테스트 9</td><td>통과 (26.40ms, 54.8MB)</td></tr><tr><td>테스트 10</td><td>통과 (28.88ms, 54.1MB)</td></tr><tr><td>테스트 11</td><td>통과 (22.73ms, 54.7MB)</td></tr><tr><td>테스트 12</td><td>통과 (25.60ms, 54.4MB)</td></tr><tr><td>테스트 13</td><td>통과 (22.06ms, 54.2MB)</td></tr><tr><td>테스트 14</td><td>통과 (19.49ms, 54.9MB)</td></tr><tr><td>테스트 15</td><td>통과 (17.53ms, 54.2MB)</td></tr><tr><td>테스트 16</td><td>통과 (20.05ms, 54.1MB)</td></tr><tr><td>테스트 17</td><td>통과 (18.01ms, 54.7MB)</td></tr><tr><td>테스트 18</td><td>통과 (18.53ms, 53.7MB)</td></tr><tr><td>테스트 19</td><td>통과 (26.25ms, 54.2MB)</td></tr><tr><td>테스트 20</td><td>통과 (20.81ms, 55.2MB)</td></tr></tbody></table><hr><h2 id="테스트-케이스"><a href="#테스트-케이스" class="headerlink" title="테스트 케이스"></a>테스트 케이스</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">assertArrayEquals(<span class="keyword">new</span> String[] &#123;<span class="string">&quot;img1.png&quot;</span>, <span class="string">&quot;IMG01.GIF&quot;</span>, <span class="string">&quot;img02.png&quot;</span>, <span class="string">&quot;img2.JPG&quot;</span>, <span class="string">&quot;img10.png&quot;</span>, <span class="string">&quot;img12.png&quot;</span>&#125;, test.solution(<span class="keyword">new</span> String[] &#123;<span class="string">&quot;img12.png&quot;</span>, <span class="string">&quot;img10.png&quot;</span>, <span class="string">&quot;img02.png&quot;</span>, <span class="string">&quot;img1.png&quot;</span>, <span class="string">&quot;IMG01.GIF&quot;</span>, <span class="string">&quot;img2.JPG&quot;</span>&#125;));</span><br><span class="line">assertArrayEquals(<span class="keyword">new</span> String[] &#123;<span class="string">&quot;A-10 Thunderbolt II&quot;</span>, <span class="string">&quot;B-50 Superfortress&quot;</span>, <span class="string">&quot;F-5 Freedom Fighter&quot;</span>, <span class="string">&quot;F-14 Tomcat&quot;</span>&#125;, test.solution(<span class="keyword">new</span> String[] &#123;<span class="string">&quot;F-5 Freedom Fighter&quot;</span>, <span class="string">&quot;B-50 Superfortress&quot;</span>, <span class="string">&quot;A-10 Thunderbolt II&quot;</span>, <span class="string">&quot;F-14 Tomcat&quot;</span>&#125;));</span><br><span class="line">assertArrayEquals(<span class="keyword">new</span> String[] &#123;<span class="string">&quot;img100.p2ng&quot;</span>, <span class="string">&quot;img202.png123&quot;</span>&#125;, test.solution(<span class="keyword">new</span> String[] &#123;<span class="string">&quot;img202.png123&quot;</span>, <span class="string">&quot;img100.p2ng&quot;</span>&#125;));</span><br><span class="line">assertArrayEquals(<span class="keyword">new</span> String[] &#123;<span class="string">&quot;foo010bar020.zip&quot;</span>, <span class="string">&quot;foo010bar030.zip&quot;</span>&#125;, test.solution(<span class="keyword">new</span> String[] &#123;<span class="string">&quot;foo010bar020.zip&quot;</span>, <span class="string">&quot;foo010bar030.zip&quot;</span>&#125;));</span><br><span class="line">assertArrayEquals(<span class="keyword">new</span> String[] &#123;<span class="string">&quot;F-15&quot;</span>, <span class="string">&quot;F-17&quot;</span>, <span class="string">&quot;F-22&quot;</span>&#125;, test.solution(<span class="keyword">new</span> String[] &#123;<span class="string">&quot;F-22&quot;</span>, <span class="string">&quot;F-17&quot;</span>, <span class="string">&quot;F-15&quot;</span>&#125;));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/17686&quot;&gt;htt</summary>
      
    
    
    
    
    <category term="알고리즘" scheme="https://jungguji.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
    <category term="프로그래머스" scheme="https://jungguji.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>프로그래머스: 프렌즈4블록</title>
    <link href="https://jungguji.github.io/2020/11/12/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%ED%94%84%EB%A0%8C%EC%A6%884%EB%B8%94%EB%A1%9D/"/>
    <id>https://jungguji.github.io/2020/11/12/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%ED%94%84%EB%A0%8C%EC%A6%884%EB%B8%94%EB%A1%9D/</id>
    <published>2020-11-12T09:38:01.000Z</published>
    <updated>2020-11-12T09:38:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p><a href="https://programmers.co.kr/learn/courses/30/lessons/17679">https://programmers.co.kr/learn/courses/30/lessons/17679</a></p><hr><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ASCII = <span class="number">32</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span> EMPTY = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, String[] board)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span>[][] charBoard = convertStringArrayToCharArray(m, n, board);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> isEnd = box(charBoard);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isEnd) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        answer += delete(charBoard);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">char</span>[][] convertStringArrayToCharArray(<span class="keyword">int</span> m, <span class="keyword">int</span> n, String[] board) &#123;</span><br><span class="line">    <span class="keyword">char</span>[][] charBoard = <span class="keyword">new</span> <span class="keyword">char</span>[m][n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (String str : board) &#123;</span><br><span class="line">        <span class="keyword">char</span>[] toChar = str.toCharArray();</span><br><span class="line">        charBoard[i] = toChar;</span><br><span class="line">        ++i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> charBoard;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">toLowerCase</span><span class="params">(<span class="keyword">char</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">char</span>) ((value &gt;= <span class="number">65</span> &amp;&amp; value &lt;= <span class="number">90</span>) ? (value + ASCII) : value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">box</span><span class="params">(<span class="keyword">char</span>[][] charBoard)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isEnd = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; charBoard.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; charBoard[i].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (validation(i, j, charBoard)) &#123;</span><br><span class="line">                <span class="keyword">char</span> value = toLowerCase(charBoard[i][j]);</span><br><span class="line">                charBoard[i][j] = value;</span><br><span class="line">                charBoard[i][j+<span class="number">1</span>] = value;</span><br><span class="line">                charBoard[i+<span class="number">1</span>][j] = value;</span><br><span class="line">                charBoard[i+<span class="number">1</span>][j+<span class="number">1</span>] = value;</span><br><span class="line"></span><br><span class="line">                isEnd = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> isEnd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">validation</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">char</span>[][] charBoard)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((i + <span class="number">1</span>) == charBoard.length || (j + <span class="number">1</span>) == charBoard[<span class="number">0</span>].length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> position = toLowerCase(charBoard[i][j]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (position == EMPTY) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> moveX = toLowerCase(charBoard[i][j+<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">char</span> moveY = toLowerCase(charBoard[i+<span class="number">1</span>][j]);</span><br><span class="line">    <span class="keyword">char</span> moveXY = toLowerCase(charBoard[i+<span class="number">1</span>][j+<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (position != moveX) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (position != moveY) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (position != moveXY) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">char</span>[][] charBoard)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; charBoard.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; charBoard[i].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (charBoard[i][j] == EMPTY) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (charBoard[i][j] &gt;= <span class="number">97</span> &amp;&amp; charBoard[i][j] &lt;= <span class="number">122</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &gt; <span class="number">0</span>; k--) &#123;</span><br><span class="line">                        charBoard[k][j] = charBoard[k-<span class="number">1</span>][j];</span><br><span class="line">                        charBoard[k-<span class="number">1</span>][j] = EMPTY;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    charBoard[i][j] = EMPTY;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                ++answer;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="흐름"><a href="#흐름" class="headerlink" title="흐름"></a>흐름</h2><ol><li>String array로 넘어온 board를 2차원 array로 만든다.</li><li>무한루프를 돌면서 char로 만든 board array의 element들을 모두 꺼내면서</li><li>제약조건을 확인하여 모두 통과할 때만 true를 return 한다.<ol><li>현재 element가 있는 위치가 맨 끝인지</li><li>현재 element가 빈 값인지</li><li>현재 element의 오른쪽 element와 값이 같지 않은지</li><li>현재 element의 아래쪽 element와 값이 같지 않은지</li><li>현재 element의 우하(右下)쪽 element와 값이 같지 않은지</li></ol></li><li>제약조건을 통과하면 현재 위치에서 오른쪽, 아래쪽, 우하(右下)쪽 element들을 소문자로 만들고 삭제 할 블록이 남았으므로, false를 return 한다.</li><li>다시 board array를 반복하면서 element가 소문자인 경우</li><li>현재 높이가 0이라면 위에서 내려올 블록이 없으므로 바로 빈 값을 저장하고</li><li>0이 아니라면 현재 위치부터 값을 1씩 빼면서 위에 블록을 현재 위치에 저장 시키고 위 블록은 빈 값으로 저장한다.</li><li>블록을 제거 할 때 마다 제거시킨 블록 개수를 저장하는 변수를 증가시킨다.</li><li>삭제 할 블록이 없을 때 까지 2번부터 8번까지 반복하고 삭제 할 블록이 없으면 루프를 빠져 나오고 삭제한 블록의 개수를 return 한다.</li><li>끝</li></ol><hr><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><table><thead><tr><th>번호</th><th>속도</th></tr></thead><tbody><tr><td>테스트 1</td><td>통과 (0.07ms, 52.3MB)</td></tr><tr><td>테스트 2</td><td>통과 (0.09ms, 51.7MB)</td></tr><tr><td>테스트 3</td><td>통과 (0.04ms, 51.9MB)</td></tr><tr><td>테스트 4</td><td>통과 (1.08ms, 52.5MB)</td></tr><tr><td>테스트 5</td><td>통과 (14.40ms, 52.6MB)</td></tr><tr><td>테스트 6</td><td>통과 (3.08ms, 52.3MB)</td></tr><tr><td>테스트 7</td><td>통과 (0.81ms, 52.3MB)</td></tr><tr><td>테스트 8</td><td>통과 (1.81ms, 53.7MB)</td></tr><tr><td>테스트 9</td><td>통과 (0.07ms, 53.4MB)</td></tr><tr><td>테스트 10</td><td>통과 (0.59ms, 51.7MB)</td></tr><tr><td>테스트 11</td><td>통과 (1.38ms, 52.7MB)</td></tr></tbody></table><hr><h2 id="테스트-케이스"><a href="#테스트-케이스" class="headerlink" title="테스트 케이스"></a>테스트 케이스</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">assertEquals(<span class="number">14</span>, test.solution(<span class="number">4</span>,<span class="number">5</span>, <span class="keyword">new</span> String[] &#123;<span class="string">&quot;CCBDE&quot;</span>, <span class="string">&quot;AAADE&quot;</span>, <span class="string">&quot;AAABF&quot;</span>, <span class="string">&quot;CCBBF&quot;</span>&#125;));</span><br><span class="line">assertEquals(<span class="number">15</span>, test.solution(<span class="number">6</span>,<span class="number">6</span>, <span class="keyword">new</span> String[] &#123;<span class="string">&quot;TTTANT&quot;</span>, <span class="string">&quot;RRFACC&quot;</span>, <span class="string">&quot;RRRFCC&quot;</span>, <span class="string">&quot;TRRRAA&quot;</span>, <span class="string">&quot;TTMMMF&quot;</span>, <span class="string">&quot;TMMTTJ&quot;</span>&#125;));</span><br><span class="line">assertEquals(<span class="number">14</span>, test.solution(<span class="number">4</span>,<span class="number">5</span>, <span class="keyword">new</span> String[] &#123;<span class="string">&quot;AAAAA&quot;</span>,<span class="string">&quot;AUUUA&quot;</span>,<span class="string">&quot;AUUAA&quot;</span>,<span class="string">&quot;AAAAA&quot;</span>&#125;));</span><br><span class="line">assertEquals(<span class="number">4</span>, test.solution(<span class="number">2</span>,<span class="number">2</span>, <span class="keyword">new</span> String[] &#123;<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;AA&quot;</span>&#125;));</span><br><span class="line">assertEquals(<span class="number">0</span>, test.solution(<span class="number">2</span>,<span class="number">2</span>, <span class="keyword">new</span> String[] &#123;<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;AB&quot;</span>&#125;));</span><br><span class="line">assertEquals(<span class="number">4</span>, test.solution(<span class="number">3</span>,<span class="number">2</span>, <span class="keyword">new</span> String[] &#123;<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;AA&quot;</span>, <span class="string">&quot;AB&quot;</span>&#125;));</span><br><span class="line">assertEquals(<span class="number">8</span>, test.solution(<span class="number">4</span>,<span class="number">2</span>, <span class="keyword">new</span> String[] &#123;<span class="string">&quot;CC&quot;</span>,<span class="string">&quot;AA&quot;</span>, <span class="string">&quot;AA&quot;</span>, <span class="string">&quot;CC&quot;</span>&#125;));</span><br><span class="line">assertEquals(<span class="number">12</span>, test.solution(<span class="number">6</span>,<span class="number">2</span>, <span class="keyword">new</span> String[] &#123;<span class="string">&quot;DD&quot;</span>, <span class="string">&quot;CC&quot;</span>, <span class="string">&quot;AA&quot;</span>, <span class="string">&quot;AA&quot;</span>, <span class="string">&quot;CC&quot;</span>, <span class="string">&quot;DD&quot;</span>&#125;));</span><br><span class="line">assertEquals(<span class="number">8</span>, test.solution(<span class="number">8</span>,<span class="number">2</span>, <span class="keyword">new</span> String[] &#123;<span class="string">&quot;FF&quot;</span>, <span class="string">&quot;AA&quot;</span>, <span class="string">&quot;CC&quot;</span>, <span class="string">&quot;AA&quot;</span>, <span class="string">&quot;AA&quot;</span>, <span class="string">&quot;CC&quot;</span>, <span class="string">&quot;DD&quot;</span>, <span class="string">&quot;FF&quot;</span>&#125;));</span><br><span class="line">assertEquals(<span class="number">8</span>, test.solution(<span class="number">6</span>,<span class="number">2</span>, <span class="keyword">new</span> String[] &#123;<span class="string">&quot;AA&quot;</span>, <span class="string">&quot;AA&quot;</span>, <span class="string">&quot;CC&quot;</span>, <span class="string">&quot;AA&quot;</span>, <span class="string">&quot;AA&quot;</span>, <span class="string">&quot;DD&quot;</span>&#125;));</span><br><span class="line">assertEquals(<span class="number">8</span>, test.solution(<span class="number">4</span>,<span class="number">4</span>, <span class="keyword">new</span> String[] &#123;<span class="string">&quot;ABCD&quot;</span>, <span class="string">&quot;BACE&quot;</span>, <span class="string">&quot;BCDD&quot;</span>, <span class="string">&quot;BCDD&quot;</span>&#125;));</span><br><span class="line">assertEquals(<span class="number">27</span>, test.solution(<span class="number">8</span>,<span class="number">9</span>, <span class="keyword">new</span> String[] &#123;<span class="string">&quot;ABCDADFDA&quot;</span>, <span class="string">&quot;ABDFQWERF&quot;</span>, <span class="string">&quot;WKDNFNRIT&quot;</span>, <span class="string">&quot;AKAKWODCJ&quot;</span>, <span class="string">&quot;AKAKWODCJ&quot;</span>, <span class="string">&quot;KKKKKKKKK&quot;</span>, <span class="string">&quot;KKKKKKKKK&quot;</span>, <span class="string">&quot;KKKKKKKKK&quot;</span>&#125;));</span><br><span class="line">assertEquals(<span class="number">15</span>, test.solution(<span class="number">4</span>,<span class="number">5</span>, <span class="keyword">new</span> String[] &#123;<span class="string">&quot;AAAAA&quot;</span>, <span class="string">&quot;AAAAU&quot;</span>, <span class="string">&quot;AAAUU&quot;</span>, <span class="string">&quot;UUUUU&quot;</span>&#125;));</span><br><span class="line">assertEquals(<span class="number">24</span>, test.solution(<span class="number">5</span>,<span class="number">6</span>, <span class="keyword">new</span> String[] &#123;<span class="string">&quot;AAAAAA&quot;</span>, <span class="string">&quot;BBAATB&quot;</span>, <span class="string">&quot;BBAATB&quot;</span>, <span class="string">&quot;JJJTAA&quot;</span>, <span class="string">&quot;JJJTAA&quot;</span>&#125;));</span><br><span class="line">assertEquals(<span class="number">32</span>, test.solution(<span class="number">6</span>,<span class="number">6</span>, <span class="keyword">new</span> String[] &#123;<span class="string">&quot;AABBEE&quot;</span>, <span class="string">&quot;AAAEEE&quot;</span>, <span class="string">&quot;VAAEEV&quot;</span>, <span class="string">&quot;AABBEE&quot;</span>, <span class="string">&quot;AACCEE&quot;</span>, <span class="string">&quot;VVCCEE&quot;</span>&#125;));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/17679&quot;&gt;htt</summary>
      
    
    
    
    
    <category term="알고리즘" scheme="https://jungguji.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
    <category term="프로그래머스" scheme="https://jungguji.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>Vue 개발 순서 정리</title>
    <link href="https://jungguji.github.io/2020/11/10/Vue-%EA%B0%9C%EB%B0%9C-%EC%88%9C%EC%84%9C-%EC%A0%95%EB%A6%AC/"/>
    <id>https://jungguji.github.io/2020/11/10/Vue-%EA%B0%9C%EB%B0%9C-%EC%88%9C%EC%84%9C-%EC%A0%95%EB%A6%AC/</id>
    <published>2020-11-10T10:10:35.000Z</published>
    <updated>2020-11-10T10:10:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>Spring boot + Vue를 활용해 토이 프로젝트 진행하고 있는데 헷갈리는 부분을 차후 또 Vue로 개발 할 일이 있을 경우 참고하기 위해 글로 남겨 놓는다.</p><h2 id="개발-순서"><a href="#개발-순서" class="headerlink" title="개발 순서"></a>개발 순서</h2><ul><li>Vue는 설치되어 있다고 가정한다.</li></ul><ol><li>root 디렉토리에 vue.config.js 생성하고 필요한 설정 추가</li></ol><h3 id="vue-config-js"><a href="#vue-config-js" class="headerlink" title="vue.config.js"></a>vue.config.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  assetsDir: <span class="string">&quot;static&quot;</span>,</span><br><span class="line">  outputDir: path.resolve(__dirname, <span class="string">&quot;../backend/src/main/resources/static&quot;</span>),</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">&quot;/&quot;</span>: &#123;</span><br><span class="line">        target: <span class="string">&quot;http://localhost:9312&quot;</span>,</span><br><span class="line">        ws: <span class="literal">true</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> svgRule = config.module.rule(<span class="string">&quot;svg&quot;</span>);</span><br><span class="line">    svgRule.uses.clear();</span><br><span class="line">    svgRule.use(<span class="string">&quot;vue-svg-loader&quot;</span>).loader(<span class="string">&quot;vue-svg-loader&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>views/ 에 화면이 될 vue 파일 생성</li><li>src/ 에 api 폴더 생성</li><li>api/ 에 화면 별로 필요한 js 파일 생성<ol><li>이 js 파일들엔 각 컴포넌트 별로 필요한 api 주소를 호출 할 수 있는 js 코드를 작성한다.</li></ol></li><li>api 호출 시 공통으로 들어갈 header를 포함하는 common.js 생성</li></ol><h3 id="common-js"><a href="#common-js" class="headerlink" title="common.js"></a>common.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AXIOS = axios.create(&#123;</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">&quot;Access-Control-Allow-Origin&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json; charset = utf-8&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  timeout: <span class="number">1000</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="6"><li>components/ 에 2번에서 만든 화면에 출력 될 component vue 파일 생성</li><li>router/index.js 에 추가한 vue path 추가<ul><li>rotuer에 추가하지 않으면 화면이 나오지 않음</li></ul></li></ol><h3 id="router-index-js"><a href="#router-index-js" class="headerlink" title="router/index.js"></a>router/index.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/main&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;Main&quot;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/Main&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;p&gt;Spring boot + Vue를 활용해 토이 프로젝트 진행하고 있는데 헷갈리는 부분을 차후 또 Vue로 개발 할 일이 있을 </summary>
      
    
    
    
    
    <category term="Vue.js" scheme="https://jungguji.github.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>JQPL은 return class로 Inner class는 불가능</title>
    <link href="https://jungguji.github.io/2020/11/10/JQPL%EC%9D%80-return-class%EB%A1%9C-Inner-class%EB%8A%94-%EB%B6%88%EA%B0%80%EB%8A%A5/"/>
    <id>https://jungguji.github.io/2020/11/10/JQPL%EC%9D%80-return-class%EB%A1%9C-Inner-class%EB%8A%94-%EB%B6%88%EA%B0%80%EB%8A%A5/</id>
    <published>2020-11-10T09:39:23.000Z</published>
    <updated>2020-11-10T09:39:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p><strong>JPQL의 return 값으로 Inner class를 지정하면 class를 찾을 수 없다는 에러가 발생 하므로 Inner class 말고 따로 class를 생성하고 그 class를 return class로 지정해줘야 한다.</strong></p><hr><h2 id="발견"><a href="#발견" class="headerlink" title="발견"></a>발견</h2><p>아래 처럼 DTO를 생성하고 view별로 inner class로 DTO를 만들고 jpql의 return class로 지정해주었는데 클래스를 찾을 수 없다는 에러가 발생하였다.</p><h3 id="DTO"><a href="#DTO" class="headerlink" title="DTO"></a>DTO</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelDTO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SubChannelList</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Integer subChannel;</span><br><span class="line">        <span class="keyword">private</span> KillTime killTime;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Builder</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SubChannelList</span><span class="params">(Integer subChannel, KillTime killTime)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.subChannel = subChannel;</span><br><span class="line">            <span class="keyword">this</span>.killTime = killTime;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JPQL-호출-메서드"><a href="#JPQL-호출-메서드" class="headerlink" title="JPQL 호출 메서드"></a>JPQL 호출 메서드</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SubChannelList&gt; <span class="title">findSubChannelList</span><span class="params">(Integer dungeonId, Integer mainChannel)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> em.createQuery(</span><br><span class="line">            <span class="string">&quot;select new com.jungguji.windbossgentimer.web.dto.channel.ChannelDTO.SubChannelList&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;(c.subChannel, k)&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; FROM Channel c left join c.killTimes k&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; WHERE c.dungeon.id = :dungeonId AND c.mainChannel = :mainChannel&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&quot;</span>, SubChannelList.class)</span><br><span class="line">            .setParameter(<span class="string">&quot;dungeonId&quot;</span>, dungeonId)</span><br><span class="line">            .setParameter(<span class="string">&quot;mainChannel&quot;</span>, mainChannel)</span><br><span class="line">            .getResultList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="발생한-에러"><a href="#발생한-에러" class="headerlink" title="발생한 에러"></a>발생한 에러</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.hibernate.hql.internal.ast.QuerySyntaxException: Unable to locate class [com.jungguji.windbossgentimer.web.dto.channel.ChannelDTO.SubChannelList] [select new com.jungguji.windbossgentimer.web.dto.channel.ChannelDTO.SubChannelList(c.subChannel, k) FROM com.jungguji.windbossgentimer.domain.channel.Channel c left join c.killTimes k WHERE c.dungeon.id = :dungeonId AND c.mainChannel = :mainChannel]</span><br><span class="line">    at org.hibernate.hql.internal.ast.QuerySyntaxException.convert(QuerySyntaxException.java:<span class="number">74</span>)</span><br><span class="line">    at org.hibernate.hql.internal.ast.ErrorTracker.throwQueryException(ErrorTracker.java:<span class="number">93</span>)</span><br><span class="line">    at org.hibernate.hql.internal.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:<span class="number">282</span>)</span><br><span class="line">    at org.hibernate.hql.internal.ast.QueryTranslatorImpl.doCompile(QueryTranslatorImpl.java:<span class="number">192</span>)</span><br><span class="line">    at org.hibernate.hql.internal.ast.QueryTranslatorImpl.compile(QueryTranslatorImpl.java:<span class="number">144</span>)</span><br><span class="line">    at org.hibernate.engine.query.spi.HQLQueryPlan.&lt;init&gt;(HQLQueryPlan.java:<span class="number">113</span>)</span><br><span class="line">    at org.hibernate.engine.query.spi.HQLQueryPlan.&lt;init&gt;(HQLQueryPlan.java:<span class="number">73</span>)</span><br><span class="line">    at org.hibernate.engine.query.spi.QueryPlanCache.getHQLQueryPlan(QueryPlanCache.java:<span class="number">162</span>)</span><br><span class="line">    at org.hibernate.internal.AbstractSharedSessionContract.getQueryPlan(AbstractSharedSessionContract.java:<span class="number">604</span>)</span><br><span class="line">    at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:<span class="number">716</span>)</span><br><span class="line">    ... <span class="number">73</span> more</span><br></pre></td></tr></table></figure><hr><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p>Inner class로 되어있던 DTO를 class로 생성한다.</p><h3 id="따로-생성한-DTO"><a href="#따로-생성한-DTO" class="headerlink" title="따로 생성한 DTO"></a>따로 생성한 DTO</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubChannelListResponseDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer subChannel;</span><br><span class="line">    <span class="keyword">private</span> KillTime killTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Builder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SubChannelListResponseDTO</span><span class="params">(Integer subChannel, KillTime killTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subChannel = subChannel;</span><br><span class="line">        <span class="keyword">this</span>.killTime = killTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h3><p><img src="source_posts%5CJQPL%EC%9D%80-return-class%EB%A1%9C-Inner-class%EB%8A%94-%EB%B6%88%EA%B0%80%EB%8A%A5%5C%EA%B2%B0%EA%B3%BC.PNG" alt="Junit Test 통과한 모습"></p><hr><h2 id="P-S"><a href="#P-S" class="headerlink" title="P.S"></a>P.S</h2><ul><li>일반적으로 class명과 table명을 헷갈려 대소문자 때문에 발생하는 에러 이므로 대소문자도 잘 확인 하여야 한다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;결론&quot;&gt;&lt;a href=&quot;#결론&quot; class=&quot;headerlink&quot; title=&quot;결론&quot;&gt;&lt;/a&gt;결론&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;JPQL의 return 값으로 Inner class를 지정하면 class를 찾을 수 없다는 에러가 발생 하므로 </summary>
      
    
    
    
    
    <category term="JPA" scheme="https://jungguji.github.io/tags/JPA/"/>
    
    <category term="JPQL" scheme="https://jungguji.github.io/tags/JPQL/"/>
    
  </entry>
  
  <entry>
    <title>백준 18111번: 마인크래프트</title>
    <link href="https://jungguji.github.io/2020/11/10/%EB%B0%B1%EC%A4%80-18111%EB%B2%88-%EB%A7%88%EC%9D%B8%ED%81%AC%EB%9E%98%ED%94%84%ED%8A%B8/"/>
    <id>https://jungguji.github.io/2020/11/10/%EB%B0%B1%EC%A4%80-18111%EB%B2%88-%EB%A7%88%EC%9D%B8%ED%81%AC%EB%9E%98%ED%94%84%ED%8A%B8/</id>
    <published>2020-11-10T09:33:11.000Z</published>
    <updated>2020-11-10T09:33:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p><a href="https://www.acmicpc.net/problem/18111">https://www.acmicpc.net/problem/18111</a></p><hr><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 마인크래프트 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in))) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] nmb = convertStringArrayToIntegerArray(br.readLine().split(<span class="string">&quot; &quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> n = nmb[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> m = nmb[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span>[][] ground = initGround(br, n, m);</span><br><span class="line">            <span class="keyword">int</span>[] minAndMax = getMinAndMax(ground);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span>[] timeAndHigh = getMinimumConstructionTime(ground, nmb[<span class="number">2</span>], minAndMax[<span class="number">0</span>], minAndMax[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">            System.out.println(timeAndHigh[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + timeAndHigh[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] convertStringArrayToIntegerArray(String[] args) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[args.length];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (String str : args) &#123;</span><br><span class="line">            array[i++] = Integer.parseInt(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] initGround(BufferedReader br, <span class="keyword">int</span> n, <span class="keyword">int</span> m) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">int</span>[][] ground = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            ground[i] = convertStringArrayToIntegerArray(br.readLine().split(<span class="string">&quot; &quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ground;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getMinAndMax(<span class="keyword">int</span>[][] ground) &#123;</span><br><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] i : ground) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j : i) &#123;</span><br><span class="line">                min = min &gt; j ? j : min;</span><br><span class="line">                max = max &lt; j ? j : max;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;min, max&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getMinimumConstructionTime(<span class="keyword">int</span>[][] ground, <span class="keyword">int</span> inventory, <span class="keyword">int</span> min, <span class="keyword">int</span> max) &#123;</span><br><span class="line">        <span class="keyword">int</span> answerTime = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> answerHigh = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> currentHigh = min; currentHigh &lt;= max; currentHigh++) &#123;</span><br><span class="line">            <span class="keyword">int</span> up = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> down = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ground.length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ground[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                    <span class="keyword">int</span> high = ground[i][j] - currentHigh;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (high &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        down += high;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (high &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        up -= high;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (down + inventory &gt;= up) &#123;</span><br><span class="line">                <span class="keyword">int</span> time = (down * <span class="number">2</span>) + up;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (answerTime &gt;= time) &#123;</span><br><span class="line">                    answerTime = time;</span><br><span class="line">                    answerHigh = currentHigh;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;answerTime, answerHigh&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="흐름"><a href="#흐름" class="headerlink" title="흐름"></a>흐름</h2><ol><li>n * m 크기의 2차원 배열을 만들어서 저장한다.</li><li>땅 높이를 저장한 2차원 배열을 돌면서 가장 작은 높이와 가장 큰 높이를 구한다.</li><li>우선, 가장 낮은 높이부터 가장 높은 높이 까지 반복하면서</li><li>3번에 해당하는 높이를 기준으로 2차원 배열을 2중 루프 돌면서 모든 땅에서 현재 땅 높이를 뺀다. (int high = ground[i][j] - currentHigh;)</li><li>그 높이가 0보다 크면 기준이 되는 땅보다 높은 것 이므로 땅을 깎아서 기준이 되는 높이와 맞추기 위해 down 변수에 높이를 더한다.</li><li>반대로 0 보다 작으면 기준이 되는 땅 보다 낮은 것이므로 땅을 높여서 기준이 되는 높이와 맞추기 위해 up 변수에 높이를 더해야 하는데 high가 0보다 작으면 - 이므로 up에 높이를 - 해서 더한다.</li><li>그렇게 2차원 배열을 전부 반복했으면 땅을 깎으면서 구한 블록과 원래 인벤토리에 있던 블록의 갯수가 쌓아야되는 블록의 갯수보다 크거나 같아야 높이를 맞출 수 있으므로 크거나 같은지 비교해서</li><li>땅을 깎는건 2초가 걸리므로 down * 2 한 값에 쌓아야 되는 높이 만큼 더한다.</li><li>그렇게 구한 걸리는 시간이 이전에 구한 최소 시간 보다 작으면 최소 시간을 지금 구한 time으로 변경하고</li><li>걸리는 시간이 같은 경우엔 가장 높은 높이로 구해야 하므로</li><li>높이도 현재 높이로 바꿔준다.<ul><li>높이는 제일 작은 높이부터 제일 큰 높이로 순차적으로 올라가고 있으므로 나중에 구한 높이가 이전에 구한 높이 보다 무조건 높다.</li></ul></li><li>끝.</li></ol><hr><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><p><img src="source_posts%5C%EB%B0%B1%EC%A4%80-18111%EB%B2%88-%EB%A7%88%EC%9D%B8%ED%81%AC%EB%9E%98%ED%94%84%ED%8A%B8%5C%EA%B2%B0%EA%B3%BC.PNG" alt="결과"></p><hr><h2 id="P-S-BFS로-시도했던-코드"><a href="#P-S-BFS로-시도했던-코드" class="headerlink" title="P.S BFS로 시도했던 코드"></a>P.S BFS로 시도했던 코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm.baekjoon.class2.bruteforce;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 마인크래프트 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in))) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] nmb = convertStringArrayToIntegerArray(br.readLine().split(<span class="string">&quot; &quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> n = nmb[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> m = nmb[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span>[][] ground = initGround(br, n, m);</span><br><span class="line">            <span class="keyword">boolean</span>[][] isPassed = <span class="keyword">new</span> <span class="keyword">boolean</span>[n][m];</span><br><span class="line"></span><br><span class="line">            List&lt;Block&gt; blockList = getBlockList(n, m, ground, isPassed);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span>[] timeAndHigh = getMinimumConstructionTime(blockList, nmb[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">            System.out.println(timeAndHigh[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + timeAndHigh[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] convertStringArrayToIntegerArray(String[] args) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[args.length];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (String str : args) &#123;</span><br><span class="line">            array[i++] = Integer.parseInt(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] initGround(BufferedReader br, <span class="keyword">int</span> n, <span class="keyword">int</span> m) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">int</span>[][] ground = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            ground[i]= convertStringArrayToIntegerArray(br.readLine().split(<span class="string">&quot; &quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ground;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Block&gt; <span class="title">getBlockList</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span>[][] ground, <span class="keyword">boolean</span>[][] isPassed)</span> </span>&#123;</span><br><span class="line">        List&lt;Block&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isPassed[i][j]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> count = breadthFirstSearch(i, j, ground, isPassed);</span><br><span class="line"></span><br><span class="line">                list.add(<span class="keyword">new</span> Block(ground[i][j], count));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">breadthFirstSearch</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span>[][] picture, <span class="keyword">boolean</span>[][] isPassed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span>[] xAround = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span>[] yAround = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> areaRange = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        Queue&lt;Position&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        setPassedArea(isPassed, queue, x, y);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            Position currentPosition = queue.poll();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; xAround.length; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> moveX = xAround[i] + currentPosition.x;</span><br><span class="line">                <span class="keyword">int</span> moveY = yAround[i] + currentPosition.y;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!isSameAreaValidation(moveX, moveY, picture, isPassed, currentPosition)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                setPassedArea(isPassed, queue, moveX, moveY);</span><br><span class="line">                ++areaRange;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> areaRange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setPassedArea</span><span class="params">(<span class="keyword">boolean</span>[][] isPassed, Queue&lt;Position&gt; queue, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        isPassed[x][y] = <span class="keyword">true</span>;</span><br><span class="line">        queue.offer(<span class="keyword">new</span> Position(x, y));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSameAreaValidation</span><span class="params">(<span class="keyword">int</span> moveX, <span class="keyword">int</span> moveY, <span class="keyword">int</span>[][] picture, <span class="keyword">boolean</span>[][] isPassed, Position currentPosition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isOutOfPicture(moveX, moveY, picture)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isPassed[moveX][moveY]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (picture[currentPosition.x][currentPosition.y] != picture[moveX][moveY]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isOutOfPicture</span><span class="params">(<span class="keyword">int</span> moveX, <span class="keyword">int</span> moveY, <span class="keyword">int</span>[][] picture)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (moveX &lt; <span class="number">0</span> || moveY &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (picture.length &lt;= moveX || picture[<span class="number">0</span>].length &lt;= moveY) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getMinimumConstructionTime(List&lt;Block&gt; blockList, <span class="keyword">int</span> inventory) &#123;</span><br><span class="line">        <span class="keyword">int</span> answerTime = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> answerHigh = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Block currentBlock : blockList) &#123;</span><br><span class="line">            <span class="keyword">int</span> currentHigh = currentBlock.high;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> up = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> down = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Block loopBlock : blockList) &#123;</span><br><span class="line">                <span class="keyword">int</span> loopHigh = loopBlock.high;</span><br><span class="line">                <span class="keyword">int</span> loopCount = loopBlock.count;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (currentHigh &gt; loopHigh) &#123;</span><br><span class="line">                    up += (currentHigh - loopHigh) * loopCount;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentHigh &lt; loopHigh) &#123;</span><br><span class="line">                    down += (loopHigh - currentHigh) * loopCount;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (down + inventory &gt;= up) &#123;</span><br><span class="line">                <span class="keyword">int</span> time = (down * <span class="number">2</span>) + up;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (answerTime &gt; time) &#123;</span><br><span class="line">                    answerTime = time;</span><br><span class="line">                    answerHigh = currentBlock.high;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;answerTime, answerHigh&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Integer high;</span><br><span class="line">        <span class="keyword">private</span> Integer count;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Block</span><span class="params">(Integer high, Integer count)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.high = high;</span><br><span class="line">            <span class="keyword">this</span>.count = count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Position</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Position</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>BFS로 높이 별 갯수를 구한 후 높이 별로 sorting 하여 처리 하려고 했는데 시간 초과로 실패</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/18111&quot;&gt;https://www.acmicpc.ne</summary>
      
    
    
    
    
    <category term="알고리즘" scheme="https://jungguji.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
    <category term="백준" scheme="https://jungguji.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
    <category term="브루트포스" scheme="https://jungguji.github.io/tags/%EB%B8%8C%EB%A3%A8%ED%8A%B8%ED%8F%AC%EC%8A%A4/"/>
    
  </entry>
  
</feed>
