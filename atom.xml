<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>저장하고 까먹자</title>
  
  
  <link href="https://jungguji.github.io/atom.xml" rel="self"/>
  
  <link href="https://jungguji.github.io/"/>
  <updated>2021-04-30T14:02:05.000Z</updated>
  <id>https://jungguji.github.io/</id>
  
  <author>
    <name>Junggu Ji</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysqldump를 활용한 MySQL backup</title>
    <link href="https://jungguji.github.io/2021/04/30/mysqldump%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-MySQL-backup/"/>
    <id>https://jungguji.github.io/2021/04/30/mysqldump%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-MySQL-backup/</id>
    <published>2021-04-30T14:02:05.000Z</published>
    <updated>2021-04-30T14:02:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>평소와 다름없이 유튜브를 배회하던 중 <a href="https://www.youtube.com/watch?v=SWZcrdmmLEU">재난급 서버 장애내고 개발자 인생 끝날뻔 한 썰</a>이란 영상을 보게 되었는데… ‘나는 지금 어떻게 하고 있지..?’ 라는 생각이 문득 들어서 얼른 나도 백업을 수시로 해둬야겠다는 생각에 적용한 mysql backup 방법을 남겨둔다.</p><hr><h2 id="왜-mysqldump로-했어요"><a href="#왜-mysqldump로-했어요" class="headerlink" title="왜 mysqldump로 했어요??"></a>왜 mysqldump로 했어요??</h2><p><a href="https://dev.mysql.com/doc/refman/5.7/en/mysqldump.html">mysqldump</a>는 스토리지 엔진에 관계없이 논리 백업을 수행 할 수 있는 도구다.<br>무엇을 이용해서 backup을 해야할까 고민 하던 중 <a href="https://woowabros.github.io/experience/2018/05/28/billingjul.html">장애와 관련된 XtraBackup 적용기</a>를 보게 되었는데<br>데이터 사이즈가 크지 않다면 mysqldump를 사용하는 것이 간단하며 복원 시에도 신경 써야 할 것이 적다는 내용을 보고 mysqldump로 backup을 진행하기로 결정했다.</p><h2 id="그럼-어떻게-해요"><a href="#그럼-어떻게-해요" class="headerlink" title="그럼 어떻게 해요??"></a>그럼 어떻게 해요??</h2><p>mysqldump엔 여러가지 옵션들이 있지만 그 중 필자는 아래 처럼 사용 했다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqldump --single-transaction --databases [db명] --tables [테이블명] -h [db주소] -u [username] -p | gzip &gt; [파일명].gz</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="mysqldump-option"><a href="#mysqldump-option" class="headerlink" title="mysqldump option"></a>mysqldump option</h3><ul><li>–single-transaction : lock 을 걸지 않고도 dump 파일의 정합성 보장하는데 InnoDB 테이블이 아닌 MyISAM or MEMORY 테이블인 경우에는 여전히 상태가 변경 될 수 있다.<br>MySQL에선 큰 테이블을 덤프하려면 –quick 옵션과 결합하기를 권장한다.</li><li>–databases : dump 할 db명을 지정한다. 여러 개를 한번에 지정하는 것도 가능하다.</li><li>–tables : dump 할 table명을 지정한다. 마찬가지로 여러 개를 한번에 지정 할 수 있다.</li></ul><p>그리고 필자는 테이블 별로 데이터를 <a href="https://zetawiki.com/wiki/%EB%A6%AC%EB%88%85%EC%8A%A4_gzip">gzip 형식</a>으로 압축하기 위해 gzip 명령어를 사용했다.</p><h3 id="그-결과"><a href="#그-결과" class="headerlink" title="그 결과"></a>그 결과</h3><p>명령어를 실행하면 이 처럼 해당 경로에 .gz로 압축된 파일이 생성되고 이 파일의 압축을 해제하면 sql 파일이 된다.</p><h3 id="예외-상황"><a href="#예외-상황" class="headerlink" title="예외 상황"></a>예외 상황</h3><p>mysqldump는 mysql  client 유틸리티 이므로 당연히 mysql client가 있어야 실행 가능한데 아래 메시지는 그 mysql client가 설치되지 않았으니 설치 한 후 사용하라는 메시지이다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">The program &#x27;mysqldump&#x27; can be found in the following packages:</span><br><span class="line"> * mysql-client-5.5</span><br><span class="line"> * mariadb-client-5.5</span><br><span class="line"> * mysql-client-5.6</span><br><span class="line"> * percona-xtradb-cluster-client-5.5</span><br><span class="line">Try: sudo apt-get install &lt;selected package&gt;</span><br></pre></td></tr></table></figure><p>이 처럼 메시지가 출력 될 경우 위 리스트 중 하나를 설치하면 정상적으로 mysqldump가 이용 가능해 질 것이다.</p><hr><h2 id="shell-script로-작성하기"><a href="#shell-script로-작성하기" class="headerlink" title="shell script로 작성하기"></a>shell script로 작성하기</h2><p>이제 이 명령어를 스케줄러에 등록하기 위해 우선 쉘 스크립트 파일로 작성해야 하는데 필자 같은 경우는 아래와 같이 작성해서 사용하고 있다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">HOST=host명</span><br><span class="line">USER=user명</span><br><span class="line">PASSWORD=password</span><br><span class="line">DATABASE=db명</span><br><span class="line">TABLES=(</span><br><span class="line">table1</span><br><span class="line">table2</span><br><span class="line">table3</span><br><span class="line">...</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">TABLES_STRING=&#x27;&#x27;</span><br><span class="line">for TABLE in &quot;$&#123;TABLES[@]&#125;&quot;</span><br><span class="line">do :</span><br><span class="line">   sudo mysqldump --single-transaction --databases $&#123;DATABASE&#125; --tables $&#123;TABLE&#125; --host $&#123;HOST&#125; --user $&#123;USER&#125; --password $&#123;PASSWORD&#125; | gzip &gt; /home/backup/$&#123;TABLE&#125;.sql.gz</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>이렇게 작성한 sh 파일을 bash 명령어로 실행하면 테이블 갯수만큼 비밀번호를 입력하면 백업 작업을 정상적으로 완료하게 된다… (정말?)</p><hr><h2 id="crontab을-자동-backup"><a href="#crontab을-자동-backup" class="headerlink" title="crontab을 자동 backup"></a>crontab을 자동 backup</h2><p>이제 백업을 자동으로 실행하게 하기 위해서 리눅스에 존재하는 <a href="%5Bhttps://zetawiki.com/wiki/%EB%A6%AC%EB%88%85%EC%8A%A4_%EB%B0%98%EB%B3%B5_%EC%98%88%EC%95%BD%EC%9E%91%EC%97%85_cron,_crond,_crontab%5D(https://zetawiki.com/wiki/%EB%A6%AC%EB%88%85%EC%8A%A4_%EB%B0%98%EB%B3%B5_%EC%98%88%EC%95%BD%EC%9E%91%EC%97%85_cron,_crond,_crontab)">crontab</a>을 이용하기로 한다.</p><h3 id="crontab-등록-방법"><a href="#crontab-등록-방법" class="headerlink" title="crontab 등록 방법"></a>crontab 등록 방법</h3><p>리눅스 서버에 접속해서</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure><p>명령어를 실행하면 아래 처럼 <strong>해당 유저</strong>로 서버에 등록된 스케줄들이 보이게 되는데 해당 유저로 등록된 서비스가 없다면 아래 처럼</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user명@ip-127.0.0.1:~$ crontab -l</span><br><span class="line">no crontab for user명</span><br></pre></td></tr></table></figure><p>메시지가 출력되고 해당 유저로 등록된 서버스가 존재 할 경우엔</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">user명@ip-127.0.0.1:~$ crontab -l</span><br><span class="line"><span class="meta">#</span><span class="bash"> Edit this file to introduce tasks to be run by cron.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Each task to run has to be defined through a single line</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> indicating with different fields when the task will be run</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> and what <span class="built_in">command</span> to run <span class="keyword">for</span> the task</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> To define the time you can provide concrete values <span class="keyword">for</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> minute (m), hour (h), day of month (dom), month (mon),</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> and day of week (dow) or use <span class="string">&#x27;*&#x27;</span> <span class="keyword">in</span> these fields (<span class="keyword">for</span> <span class="string">&#x27;any&#x27;</span>).<span class="comment"># </span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Notice that tasks will be started based on the cron<span class="string">&#x27;s system</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> daemon<span class="string">&#x27;s notion of time and timezones.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Output of the crontab <span class="built_in">jobs</span> (including errors) is sent through</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> email to the user the crontab file belongs to (unless redirected).</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> For example, you can run a backup of all your user accounts</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> at 5 a.m every week with:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> For more information see the manual pages of crontab(5) and cron(8)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> m h  dom mon dow   <span class="built_in">command</span></span></span><br><span class="line">10 04 * * * bash 백업 실행 파일.sh</span><br></pre></td></tr></table></figure><p>위 처럼 cat 명령어를 실행 한 것 처럼 콘솔에 crontab의 내용이 보여지게 된다.<br>이렇게 저장된 스케줄러들을 확인난 후에</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>명령어를 통해 스케줄러를 등록하면 되는데 이 때 crontab -e 명령어를 실행시키면 crontab을 열 텍스트 에디터를 선택하라는 메시지가 출력되거나, 디폴트로 지정된 텍스트 에디터로 crontab이 열리게 된다.</p><p>어떤 식이든 crontab이 열리면</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* * * * *  수행할 명령어</span><br><span class="line">┬ ┬ ┬ ┬ ┬</span><br><span class="line">│ │ │ │ │</span><br><span class="line">│ │ │ │ │</span><br><span class="line">│ │ │ │ └───────── 요일 (0 - 6) (0:일요일, 1:월요일, 2:화요일, …, 6:토요일)</span><br><span class="line">│ │ │ └───────── 월 (1 - 12)</span><br><span class="line">│ │ └───────── 일 (1 - 31)</span><br><span class="line">│ └───────── 시 (0 - 23)</span><br><span class="line">└───────── 분 (0 - 59)</span><br></pre></td></tr></table></figure><p>위 형식에 맞춰 언제마다 실행 시킬 지 정한 후 우리가 만든 backup용 sh 파일을 실행하게 하면 된다.</p><p>필자는 매일 04시 10분에 실행 시키기 위해 아래와 같이 작성하여 등록했다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 04 * * * bash 백업 실행 파일.sh</span><br></pre></td></tr></table></figure><p>이렇게 작성하고 테스트를 하기 위해 date 명령어로 서버 시간을 확인한 후 실행 시간을 현재 시간에서 2분 뒤로 변경하여 2분 뒤에 실행하게 하였는데…</p><hr><h2 id="왜-백업이-안되지…"><a href="#왜-백업이-안되지…" class="headerlink" title="왜 백업이 안되지…?"></a>왜 백업이 안되지…?</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;p&gt;평소와 다름없이 유튜브를 배회하던 중 &lt;a href=&quot;https://www.youtube.com/watch?v=SWZcrdmm</summary>
      
    
    
    
    
    <category term="db" scheme="https://jungguji.github.io/tags/db/"/>
    
    <category term="mysql" scheme="https://jungguji.github.io/tags/mysql/"/>
    
    <category term="리눅스" scheme="https://jungguji.github.io/tags/%EB%A6%AC%EB%88%85%EC%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>org.junit.platform.commons.JUnitException: TestEngine with ID junit-vintage failed to discover tests</title>
    <link href="https://jungguji.github.io/2021/04/19/org-junit-platform-commons-JUnitException-TestEngine-with-ID-junit-vintage-failed-to-discover-tests/"/>
    <id>https://jungguji.github.io/2021/04/19/org-junit-platform-commons-JUnitException-TestEngine-with-ID-junit-vintage-failed-to-discover-tests/</id>
    <published>2021-04-19T13:09:46.000Z</published>
    <updated>2021-04-19T13:09:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>기존에 jar파일을 추가해서 Junit4로 테스트하던 프로젝트를 마찬가지로 jar파일을 Junit5로 버전 업해서 사용하고 있었는데<br>‘굳이 이럴 필요없이 maven 프로젝트로 변경하면 되지 않나?’라는 생각에 maven 프로젝트로 변경 후 발생했던 에러를 해결한 방법을 작성해둔다…</p><h2 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h2><p>위에서 적은 것 처럼 기존에 Junit jar를 다운받아서 직접 경로를 지정하는 방식으로 junit4, 5를 둘 다 사용하고 있었는데 프로젝트를 maven으로 변경 후 의존성 충돌이 발생해 아래와 같은 에러가 발생하며 테스트가 진행되지 않았다.</p><h3 id="발생한-에러"><a href="#발생한-에러" class="headerlink" title="발생한 에러"></a>발생한 에러</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Internal Error occurred.</span><br><span class="line">org.junit.platform.commons.JUnitException: TestEngine with ID <span class="string">&#x27;junit-vintage&#x27;</span> failed to discover tests</span><br><span class="line">  at org.junit.platform.launcher.core.EngineDiscoveryOrchestrator.discoverEngineRoot(EngineDiscoveryOrchestrator.java:<span class="number">111</span>)</span><br><span class="line">  at org.junit.platform.launcher.core.EngineDiscoveryOrchestrator.discover(EngineDiscoveryOrchestrator.java:<span class="number">85</span>)</span><br><span class="line">  at org.junit.platform.launcher.core.DefaultLauncher.discover(DefaultLauncher.java:<span class="number">92</span>)</span><br><span class="line">  at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:<span class="number">75</span>)</span><br><span class="line">  at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:<span class="number">71</span>)</span><br><span class="line">  at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:<span class="number">33</span>)</span><br><span class="line">  at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:<span class="number">220</span>)</span><br><span class="line">  at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:<span class="number">53</span>)</span><br><span class="line">Caused by: org.junit.platform.commons.JUnitException: Unsupported version of junit:junit: <span class="number">3.8</span>.<span class="number">1.</span> Please upgrade to version <span class="number">4.12</span> or later.</span><br><span class="line">  at org.junit.vintage.engine.JUnit4VersionCheck.checkSupported(JUnit4VersionCheck.java:<span class="number">49</span>)</span><br><span class="line">  at org.junit.vintage.engine.JUnit4VersionCheck.checkSupported(JUnit4VersionCheck.java:<span class="number">35</span>)</span><br><span class="line">  at org.junit.vintage.engine.VintageTestEngine.discover(VintageTestEngine.java:<span class="number">62</span>)</span><br><span class="line">  at org.junit.platform.launcher.core.EngineDiscoveryOrchestrator.discoverEngineRoot(EngineDiscoveryOrchestrator.java:<span class="number">103</span>)</span><br><span class="line">  ... <span class="number">7</span> more</span><br><span class="line"></span><br><span class="line">Process finished with exit code -<span class="number">2</span></span><br></pre></td></tr></table></figure><p>위 에러 로그처럼 ‘junit-vintage’를 아이디로 하는 테스트 엔진을 찾지 못했다는 에러가 발생해서 <a href="https://mvnrepository.com/artifact/org.junit.vintage/junit-vintage-engine">junit-vintage</a> 의존성을 추가해주었는데..</p><hr><h2 id="그-후-삽질"><a href="#그-후-삽질" class="headerlink" title="그 후 삽질"></a>그 후 삽질</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.junit.vintage/junit-vintage-engine --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>추가 해줘도 똑같은 에러만 반복 할 뿐이었다.</p><p>그래서 공식 문서를 살펴보니..</p><blockquote><p>JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</p><footer><strong>JUnit 5 User Guide</strong><cite><a href="https://junit.org/junit5/docs/current/user-guide/#overview-what-is-junit-5">What is JUnit 5?</a></cite></footer></blockquote><p>라고 떡하니 써 적혀있어서 위에 3 개의 의존성을 모두 추가한 후 리빌드 후 다시 테스트를 실행해봤다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Only needed to run tests in a version of IntelliJ IDEA that bundles older versions --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-platform-launcher<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>하지만 결과는 마찬가지였고… .m2폴더에서 Junit 의존성을 다 삭제하고, Intellij project setting에서 Modules, Libraies에서 모두 삭제하고 이것저것 다 해봤지만 모두 실패로 돌아가서 결국 새 maven 프로젝트를 만들어서 하나씩 비교해보기로 했다.</p><hr><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p>그 결과… .iml 파일에 아래 처럼 의존성들이 남아있는 것을 확인했고…</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">orderEntry</span> <span class="attr">type</span>=<span class="string">&quot;module-library&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;TEST&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">library</span> <span class="attr">name</span>=<span class="string">&quot;JUnit5.4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">CLASSES</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">root</span> <span class="attr">url</span>=<span class="string">&quot;jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter/5.4.2/junit-jupiter-5.4.2.jar!/&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">root</span> <span class="attr">url</span>=<span class="string">&quot;jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.4.2/junit-jupiter-api-5.4.2.jar!/&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">root</span> <span class="attr">url</span>=<span class="string">&quot;jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.0.0/apiguardian-api-1.0.0.jar!/&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">root</span> <span class="attr">url</span>=<span class="string">&quot;jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.1.1/opentest4j-1.1.1.jar!/&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">root</span> <span class="attr">url</span>=<span class="string">&quot;jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.4.2/junit-platform-commons-1.4.2.jar!/&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">root</span> <span class="attr">url</span>=<span class="string">&quot;jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-params/5.4.2/junit-jupiter-params-5.4.2.jar!/&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">root</span> <span class="attr">url</span>=<span class="string">&quot;jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.4.2/junit-jupiter-engine-5.4.2.jar!/&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">root</span> <span class="attr">url</span>=<span class="string">&quot;jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.4.2/junit-platform-engine-1.4.2.jar!/&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">CLASSES</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">JAVADOC</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SOURCES</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">library</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">orderEntry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">orderEntry</span> <span class="attr">type</span>=<span class="string">&quot;library&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;TEST&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Maven: org.junit.jupiter:junit-jupiter-api:5.7.1&quot;</span> <span class="attr">level</span>=<span class="string">&quot;project&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">orderEntry</span> <span class="attr">type</span>=<span class="string">&quot;library&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;TEST&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Maven: org.apiguardian:apiguardian-api:1.1.0&quot;</span> <span class="attr">level</span>=<span class="string">&quot;project&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">orderEntry</span> <span class="attr">type</span>=<span class="string">&quot;library&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;TEST&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Maven: org.opentest4j:opentest4j:1.2.0&quot;</span> <span class="attr">level</span>=<span class="string">&quot;project&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">orderEntry</span> <span class="attr">type</span>=<span class="string">&quot;library&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;TEST&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Maven: org.junit.platform:junit-platform-commons:1.7.1&quot;</span> <span class="attr">level</span>=<span class="string">&quot;project&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">orderEntry</span> <span class="attr">type</span>=<span class="string">&quot;library&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;TEST&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Maven: org.junit.jupiter:junit-jupiter-engine:5.7.1&quot;</span> <span class="attr">level</span>=<span class="string">&quot;project&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">orderEntry</span> <span class="attr">type</span>=<span class="string">&quot;library&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;TEST&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Maven: org.junit.platform:junit-platform-engine:1.7.1&quot;</span> <span class="attr">level</span>=<span class="string">&quot;project&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>모든 의존성을 삭제 후 다시 Junit5만 의존성 추가하여 테스트를 실행하니…</p><img src="/2021/04/19/org-junit-platform-commons-JUnitException-TestEngine-with-ID-junit-vintage-failed-to-discover-tests/%EC%84%B1%EA%B3%B5.PNG" class="" title="org.junit.platform.commons.JUnitException: TestEngine with ID junit-vintage failed to discover tests"><p>드디어 성공적인 테스트를 완료 할 수 있었다.</p><h2 id="여담"><a href="#여담" class="headerlink" title="여담"></a>여담</h2><p>project setting에서 분명 모듈 관련된 설정을 모두 삭제 했는데 왜 .iml파일에 설정이 삭제되지 않고 남아있는진 모르겠지만, 필자와 같은 상황이 발생하는 다른 사람들에게 도움이 되길 바라며 글을 마무리한다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;p&gt;기존에 jar파일을 추가해서 Junit4로 테스트하던 프로젝트를 마찬가지로 jar파일을 Junit5로 버전 업해서 사용하고 있</summary>
      
    
    
    
    
    <category term="Junit" scheme="https://jungguji.github.io/tags/Junit/"/>
    
    <category term="개발" scheme="https://jungguji.github.io/tags/%EA%B0%9C%EB%B0%9C/"/>
    
    <category term="오류" scheme="https://jungguji.github.io/tags/%EC%98%A4%EB%A5%98/"/>
    
  </entry>
  
  <entry>
    <title>백준 2485번: 가로수</title>
    <link href="https://jungguji.github.io/2021/04/12/%EB%B0%B1%EC%A4%80-2485%EB%B2%88-%EA%B0%80%EB%A1%9C%EC%88%98/"/>
    <id>https://jungguji.github.io/2021/04/12/%EB%B0%B1%EC%A4%80-2485%EB%B2%88-%EA%B0%80%EB%A1%9C%EC%88%98/</id>
    <published>2021-04-12T13:16:19.000Z</published>
    <updated>2021-04-12T13:16:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p><a href="https://www.acmicpc.net/problem/2485">https://www.acmicpc.net/problem/2485</a></p><hr><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; differences = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> preValue = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">    <span class="keyword">while</span> (n-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> input = Integer.parseInt(br.readLine());</span><br><span class="line">        list.add(input);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (preValue != <span class="number">0</span>) &#123;</span><br><span class="line">            differences.add(Math.abs(preValue - input));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        preValue = input;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Collections.sort(list);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> gcd = Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; differences.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = gcd(differences.get(i-<span class="number">1</span>), differences.get(i));</span><br><span class="line">        gcd = temp &gt; gcd ? gcd : temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pre = list.get(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (list.get(i) - pre != gcd) &#123;</span><br><span class="line">            answer += ((list.get(i) - pre) / gcd) - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pre = list.get(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(answer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b!=<span class="number">0</span> ? gcd(b, a%b) : a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="흐름"><a href="#흐름" class="headerlink" title="흐름"></a>흐름</h2><ol><li>입력 받은 값들을 뺀 값의 차를 구한 값으로 약수를 구하기 위한 differences,<br>입력 받은 값을 그대로 저장하는 list 변수 생성.</li><li>두 리스트 모두 n 만큼 돌면서 값을 저장하는데</li><li>differences의 경우 첫 번쨰 루프에서 값을 저장 할 수 없으므로(2 번쨰 값부터 첫 번째 값과 뺄 수 있으므로) 이전 값이 있는 경우에만 리스트에 저장한다.</li><li>가로수들 사이에 끼워넣어야 되는 가로수의 개수를 구해야 하므로 입력 받은 가로수의 위치를 정렬한다.</li><li>가로수 간의 최소 간격을 구하기 위해 아까 저장한 가로수 간의 차이를 구한 리스트 differences를 돌면서 <a href="https://ko.wikipedia.org/wiki/%EC%9C%A0%ED%81%B4%EB%A6%AC%EB%93%9C_%ED%98%B8%EC%A0%9C%EB%B2%95">유클리드 호제법</a>을 이용해 최대공약수를 구하고, 구한 최대 공약수 중 가장 작은 값을 저장한다.</li><li>가로수 간의 차이값에서 최대 공약수를 구하는 이유는,</li><li>문제가 가로수를 일정한 간격으로 최대한 적게 심기게 하기 위한 문제 이므로 두 수에서 공통되는 값들 중 가장 큰 수인 최대 공약수를 구하고,</li><li>그 최대 공약수들 중 가장 작은 값이어야 모두 일정한 간격으로 심을 수 있으므로 최대 공약수 중 가장 작을 값을 구한다.</li><li>이렇게 잘 구한 값으로 이제 몇 개의 가로수를 더 심어야 하는지 알아내야 하므로</li><li>아까 정렬시킨 가로수 리스트를 반복 하면서 이전 가로수 와의 간격이 최대 공약수 보다 큰 녀석들이 있으면</li><li>그 녀석들 사이에 가로수를 심어야 되므로,</li><li>구한 간격을 최대 공약수로 나눈 값에서 -1 한 값을 더한다.</li><li>이 때 -1을 하는 이유는 두 수의 간격이므로 하나는 이미 심어져 있으니 -1 을 한다.</li><li>그렇게 추가로 심어야 하는 가로수의 개수를 모두 구하면</li><li>끝.</li></ol><hr><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><img src="/2021/04/12/%EB%B0%B1%EC%A4%80-2485%EB%B2%88-%EA%B0%80%EB%A1%9C%EC%88%98/%EC%BA%A1%EC%B2%98.PNG" class="" title="백준 2485번: 가로수"><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2485&quot;&gt;https://www.acmicpc.net</summary>
      
    
    
    
    
    <category term="알고리즘" scheme="https://jungguji.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
    <category term="백준" scheme="https://jungguji.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
    <category term="재귀" scheme="https://jungguji.github.io/tags/%EC%9E%AC%EA%B7%80/"/>
    
    <category term="공약수" scheme="https://jungguji.github.io/tags/%EA%B3%B5%EC%95%BD%EC%88%98/"/>
    
  </entry>
  
  <entry>
    <title>백준 10527번: Judging Troubles</title>
    <link href="https://jungguji.github.io/2021/04/01/%EB%B0%B1%EC%A4%80-10527%EB%B2%88-Judging-Troubles/"/>
    <id>https://jungguji.github.io/2021/04/01/%EB%B0%B1%EC%A4%80-10527%EB%B2%88-Judging-Troubles/</id>
    <published>2021-04-01T13:51:49.000Z</published>
    <updated>2021-04-01T13:51:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p><a href="https://www.acmicpc.net/problem/10527">https://www.acmicpc.net/problem/10527</a></p><hr><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Boolean&gt; isDuplicate = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    Map&lt;String, Integer&gt; domJudge = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        String input = br.readLine();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isDuplicate.containsKey(input)) &#123;</span><br><span class="line">            isDuplicate.put(input, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        domJudge.put(input, domJudge.getOrDefault(input, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Integer&gt; kattis = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        String input = br.readLine();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isDuplicate.containsKey(input)) &#123;</span><br><span class="line">            isDuplicate.put(input, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        kattis.put(input, kattis.getOrDefault(input, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;Map.Entry&lt;String, Integer&gt;&gt; entries1 = <span class="keyword">new</span> ArrayList&lt;&gt;(domJudge.entrySet());</span><br><span class="line">    List&lt;Map.Entry&lt;String, Integer&gt;&gt; entries2 = <span class="keyword">new</span> ArrayList&lt;&gt;(kattis.entrySet());</span><br><span class="line"></span><br><span class="line">    entries1.addAll(entries2);</span><br><span class="line">    Collections.sort(entries1, (e1, e2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (e1.getKey().compareTo(e2.getKey()) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e1.getKey().compareTo(e2.getKey()) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(e1.getValue(), e2.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">    Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; entries1.size(); i++) &#123;</span><br><span class="line">        Map.Entry&lt;String, Integer&gt; entry = entries1.get(i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isDuplicate.getOrDefault(entry.getKey(), <span class="keyword">false</span>) &amp;&amp; set.add(entry.getKey())) &#123;</span><br><span class="line">            answer += entry.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(answer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="흐름"><a href="#흐름" class="headerlink" title="흐름"></a>흐름</h2><ul><li>우선 이 문제는 domJudge와 kattis가 순서대로 n만큼씩 입력 받는 문제다.</li></ul><p>예제를 보며 얘기하면</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">correct</span><br><span class="line">wronganswer</span><br><span class="line">correct</span><br><span class="line">correct</span><br><span class="line">timelimit</span><br><span class="line">wronganswer</span><br><span class="line">correct</span><br><span class="line">timelimit</span><br><span class="line">correct</span><br><span class="line">timelimit</span><br></pre></td></tr></table></figure><p>이렇게 되어 있을 때 위에 다섯 줄은 domJudge에서 채점한 결과고, 그 아래 다섯 줄은 kattis 채점한 결과다.</p><p>이걸 생각하고 프로그램을 작성하면</p><ol><li>우선 양 쪽에서 채점된 결과들 중에 작은 녀석의 값을 골라야 하므로 채점 결과를 Key로 하는 Map을 만들고</li><li>n 만큼 돌면서 domJudge의 채점 결과를 저장하는데 이 때 처음나온 채점 결과는 Map에 false로 저장하고, 이전에 이미 나온 결과는 +1 해준다.</li><li>그 후 다시 n만큼 돌면서 kattis의 채점결과를 저장하는데</li><li>이 때는 전에 domJudge에서 나온 채점 결과 인지 확인해야 하므로 중복을 체크하기 위해 만든 Map에 채점 결과가 존재하면 그 key의 값을 true로 변경시켜서 양 쪽에서 모두 나온 결과 임을 저장한다.</li><li>그 후 양 쪽에서 모두 나온 채점 결과들 중 작은 값들을 더하기 위해</li><li>두 Map을 리스트로 변환 후 합쳐서 key와 value로 sorting 한다.</li><li>그 후 합친 리스트를 반복하면서..</li><li>채점 결과가 양 쪽 모두에서 나온 녀석이면서 이전에 더한 key가 아니라면 쭉 더하고</li><li>출력하고 끝낸다.</li></ol><hr><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><img src="/2021/04/01/%EB%B0%B1%EC%A4%80-10527%EB%B2%88-Judging-Troubles/%EC%BA%A1%EC%B2%98.PNG" class="" title="백준 10527번: Judging Troubles"><hr><h2 id="다른-분의-코드"><a href="#다른-분의-코드" class="headerlink" title="다른 분의 코드"></a>다른 분의 코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    String line = br.readLine().trim();</span><br><span class="line">    <span class="keyword">int</span> n = Integer.parseInt(line);</span><br><span class="line">    Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        String dom = br.readLine();</span><br><span class="line">        map.put(dom, map.getOrDefault(dom, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        String kattis = br.readLine();</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(kattis) &amp;&amp; map.get(kattis) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            map.put(kattis, map.get(kattis) - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(cnt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>나 처럼 바보 같이 Map을 여러 개 쓰지 않고 하나의 맵에 +1, -1로 해서 겹치는 결과 인지 아닌지 판단했다.</li><li>나는 왜 이렇게 생각하지 못했을까? 다른 곳에서도 흔히 쓰이는 방식인데</li><li>오늘도 역시 반성해본다…</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/10527&quot;&gt;https://www.acmicpc.ne</summary>
      
    
    
    
    
    <category term="알고리즘" scheme="https://jungguji.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
    <category term="백준" scheme="https://jungguji.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
    <category term="자료구조" scheme="https://jungguji.github.io/tags/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/"/>
    
  </entry>
  
  <entry>
    <title>백준 1417번: 국회의원 선거</title>
    <link href="https://jungguji.github.io/2021/03/30/%EB%B0%B1%EC%A4%80-1417%EB%B2%88-%EA%B5%AD%ED%9A%8C%EC%9D%98%EC%9B%90-%EC%84%A0%EA%B1%B0/"/>
    <id>https://jungguji.github.io/2021/03/30/%EB%B0%B1%EC%A4%80-1417%EB%B2%88-%EA%B5%AD%ED%9A%8C%EC%9D%98%EC%9B%90-%EC%84%A0%EA%B1%B0/</id>
    <published>2021-03-30T12:38:30.000Z</published>
    <updated>2021-03-30T12:38:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p><a href="https://www.acmicpc.net/problem/1417">https://www.acmicpc.net/problem/1417</a></p><hr><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line"></span><br><span class="line">    LinkedList&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> dasom = Integer.parseInt(br.readLine());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n-<span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> input = Integer.parseInt(br.readLine());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dasom &lt;= input) &#123;</span><br><span class="line">            queue.offer(input);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Collections.sort(queue);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !queue.isEmpty() &amp;&amp; queue.peekLast() &gt;= dasom; answer++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (queue.peek() &lt; dasom) &#123;</span><br><span class="line">            queue.poll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        queue.offer((queue.pollLast()-<span class="number">1</span>));</span><br><span class="line">        dasom++;</span><br><span class="line"></span><br><span class="line">        Collections.sort(queue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(answer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="흐름"><a href="#흐름" class="headerlink" title="흐름"></a>흐름</h2><ol><li>다솜이는 기호 1번이므로 첫 번째 입력을 다솜이의 표로 저장한다.</li><li><a href="https://ko.wikipedia.org/wiki/%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84_%ED%81%90">우선순위 큐</a>로 사용하기 위해 list에 입력들을 저장하는데 다솜이 보다 작을 경우엔 문제의 답과 상관이 없으므로 다솜이의 표보다 적은 표는 큐에 저장하지 않는다.</li><li>우선순위 큐로서 동작하게 하기 위해 반복 전에 큐를 한번 정렬시켜준다.</li><li>그 후엔 큐가 비거나, 큐의 가장 큰 값이 다솜이가 될 때까지 반복한다.</li><li>반복하면서 큐의 맨 앞이 다솜이보다 작다면, 이제 그 사람은 다솜이가 재낀 것 이므로 큐에서 빼주고,</li><li>제일 표가 많은 놈한테서 표 하나를 뻇어서 다솜이가 가져가면 되므로 큐의 마지막 값에서 -1 빼서 다시 큐에 넣어준다.</li><li>그리고 제일 표가 많은 놈에게 뺏은 표를 다솜이에게 줬으므로 다솜이의 값을 1 증가시키고</li><li>우선순위 큐 처럼 동작 할 수 있게 큐를 다시 정렬 시킨다.</li><li>반복된 횟수를 출력하면 끝.</li></ol><hr><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><img src="/2021/03/30/%EB%B0%B1%EC%A4%80-1417%EB%B2%88-%EA%B5%AD%ED%9A%8C%EC%9D%98%EC%9B%90-%EC%84%A0%EA%B1%B0/%EC%BA%A1%EC%B2%98.PNG" class="" title="백준 1417번: 국회의원 선거"><hr><h2 id="여담"><a href="#여담" class="headerlink" title="여담"></a>여담</h2><p>반복문에서 소팅을 하기 때문에 시간 초과가 날 것으로 예상했는데 수가 적은 문제라 그런지 무사히 통과되어 참 다행이다…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/1417&quot;&gt;https://www.acmicpc.net</summary>
      
    
    
    
    
    <category term="백준" scheme="https://jungguji.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
    <category term="자료구조" scheme="https://jungguji.github.io/tags/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/"/>
    
    <category term="우선순위 큐" scheme="https://jungguji.github.io/tags/%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%ED%81%90/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot + Vue CORS 설정</title>
    <link href="https://jungguji.github.io/2021/03/28/Spring%20Boot%20+%20Vue%20CORS%20%EC%84%A4%EC%A0%95/"/>
    <id>https://jungguji.github.io/2021/03/28/Spring%20Boot%20+%20Vue%20CORS%20%EC%84%A4%EC%A0%95/</id>
    <published>2021-03-28T09:40:28.000Z</published>
    <updated>2021-03-28T09:40:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>Front를 Vue.js, Back을 Spring Boot로 만든 토이 프로젝트에서 CORS로 인해 통신이 되지 않는 오류가 발생하여 문제를 해결한 방법을 작성 해둔다.</p><hr><h2 id="문제-상황"><a href="#문제-상황" class="headerlink" title="문제 상황"></a>문제 상황</h2><p>화면에서 체크박스를 클릭하면 서버로 requert를 보내고 서버에서 그에 맞는 response를 주는 방식에 간단한 프로젝트 인데 클릭 시 아래 이미지 처럼 ‘Network Error’라는 alert를 발생시키고 통신이 되지 않는 문제가 발생 하였고, 개발자 도구로 콘솔을 확인해보니 아래 이미지 처럼 ‘CORS Preflight Did Not Succeed’과</p><blockquote><p>교차 출처 요청 차단: 동일 출처 정책으로 인해 <a href="http://localhost:9312/frame%EC%97%90">http://localhost:9312/frame에</a> 있는 원격 자원을 차단하였습니다. (원인: CORS 사전 점검 응답 실패).</p></blockquote><p>라는 메시지가 출력된 것을 확인했다.</p><img src="/2021/03/28/Spring%20Boot%20+%20Vue%20CORS%20%EC%84%A4%EC%A0%95/error.PNG" class="" title="Spring Boot + Vue CORS 설정 CORS Error 에러 발생 CORS Error 에러 발생"><hr><h2 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h2><p>여러 가지 방법이 있겠지만 필자는 WebMvcConfigurer를 상속받아 설정을 추가해주는 방식으로 처리했다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">&quot;http://localhost:8080&quot;</span>)</span><br><span class="line">                .allowCredentials(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>위 코드 처럼 WebMvcConfigurer 를 상속받는 WebConfig class를 작성한다.</li><li>그 중 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.html#addCorsMappings-org.springframework.web.servlet.config.annotation.CorsRegistry-">addCorsMappings()</a> 메서드를 override 한다.</li><li>CorsRegistry 클래스의 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/CorsRegistry.html#addMapping-java.lang.String-">addMapping()</a> 메서드를 통해 CORS 요청 처리를 활성화할 URL를 지정하는데 이 때 “/**” 같은 Ant 스타일 패턴이나 정확한 경로(ex /admin)를 지정하는 것도 가능하다.</li><li>그 후 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/CorsRegistration.html#allowedOrigins-java.lang.String...-">allowedOrigins()</a> 메서드에서 CORS 요청을 허용 할 URL를 지정한다.</li><li>참고로 allowCredentials 설정을 true로 줬는데 이렇게 Access-Control-Allow-Credentials를 true로 할 경우 allowedOrigins()에서 “*”로 해서 모든 요청에 대해 CORS를 허용 할 수 없다.</li></ol><p>이 방법 외엔 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/CrossOrigin.html">@Crossorigin</a>을 이용해 개별 클래스 혹은 메서드에 CORS 요청 인증을 응답하도록 설정 하는 것도 가능하다.</p><h3 id="정상-동작한-모습"><a href="#정상-동작한-모습" class="headerlink" title="정상 동작한 모습"></a>정상 동작한 모습</h3><img src="/2021/03/28/Spring%20Boot%20+%20Vue%20CORS%20%EC%84%A4%EC%A0%95/%EC%A0%95%EC%83%81.PNG" class="" title="Spring Boot + Vue CORS 설정 정상적으로 통신하여 체크된 상황에 대한 코드를 응답한 모습 정상적으로 통신하여 체크된 상황에 대한 코드를 응답한 모습"><hr><h2 id="여담"><a href="#여담" class="headerlink" title="여담"></a>여담</h2><p>이전에 개발 할 때는 설정하지 않아도 잘 됐던거 같은데 오랜만에 프로젝트를 클론받아 실행하니 동작하지 않아 당황했다… 왜 그럴까?</p><hr><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><ul><li><a href="https://velog.io/@logqwerty/CORS">https://velog.io/@logqwerty/CORS</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/CORS">https://developer.mozilla.org/ko/docs/Web/HTTP/CORS</a></li><li><a href="https://dev-pengun.tistory.com/entry/Spring-Boot-CORS-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0">https://dev-pengun.tistory.com/entry/Spring-Boot-CORS-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0</a></li><li><a href="https://reikop.com/springboot-vue-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B02/">https://reikop.com/springboot-vue-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B02/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;p&gt;Front를 Vue.js, Back을 Spring Boot로 만든 토이 프로젝트에서 CORS로 인해 통신이 되지 않는 오류가 </summary>
      
    
    
    
    
    <category term="Spring Boot" scheme="https://jungguji.github.io/tags/Spring-Boot/"/>
    
    <category term="Vue" scheme="https://jungguji.github.io/tags/Vue/"/>
    
    <category term="CORS" scheme="https://jungguji.github.io/tags/CORS/"/>
    
  </entry>
  
  <entry>
    <title>Windows 10 SSH 접속</title>
    <link href="https://jungguji.github.io/2021/03/27/Windows%2010%20SSH%20%EC%A0%91%EC%86%8D/"/>
    <id>https://jungguji.github.io/2021/03/27/Windows%2010%20SSH%20%EC%A0%91%EC%86%8D/</id>
    <published>2021-03-27T14:43:38.000Z</published>
    <updated>2021-03-27T14:43:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>집에서 서버에 접속할 일이 생겨서 평소처럼 ssh로 접속을 하려고 했는데..<br>접속이 되지 않아 당황했는데 미래의 나와, 다른 사람들은 이러지 않길 바라며 글을 남긴다.</p><hr><h2 id="접속-방법"><a href="#접속-방법" class="headerlink" title="접속 방법"></a>접속 방법</h2><p><strong>우선 .pem 파일이 존재하는 경로에 폴더명이 한글인 폴더가 존재하면 안된다.</strong></p><ol><li>설정의 앱 및 기능에서 선택적 기능을 선택</li><li>기능 추가를 선택하여 ssh를 검색해서 OpenSSH 클라이언트를 설치</li><li>SSH 이용 가능</li></ol><hr><h2 id="여담"><a href="#여담" class="headerlink" title="여담"></a>여담</h2><p>나의 경우엔 .pem 파일이 한글 폴더가 있는 경로에 존재해서 인식하지 못했던 문제였지만<br>혹시 모르니 SSH 클라이언트 설치방법도 작성해놓는다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;p&gt;집에서 서버에 접속할 일이 생겨서 평소처럼 ssh로 접속을 하려고 했는데..&lt;br&gt;접속이 되지 않아 당황했는데 미래의 나와, </summary>
      
    
    
    
    
    <category term="SSH" scheme="https://jungguji.github.io/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>백준 4796번: 캠핑</title>
    <link href="https://jungguji.github.io/2021/03/25/%EB%B0%B1%EC%A4%80-4796%EB%B2%88-%EC%BA%A0%ED%95%91/"/>
    <id>https://jungguji.github.io/2021/03/25/%EB%B0%B1%EC%A4%80-4796%EB%B2%88-%EC%BA%A0%ED%95%91/</id>
    <published>2021-03-25T13:08:42.000Z</published>
    <updated>2021-03-25T13:08:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p><a href="https://www.acmicpc.net/problem/4796">https://www.acmicpc.net/problem/4796</a></p><hr><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    String input = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="string">&quot;0 0 0&quot;</span>.equals(input = br.readLine())) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] lpv = convertStringArrayToIntegerArray(input.split(<span class="string">&quot; &quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> l = lpv[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> p = lpv[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> v = lpv[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        sb.append(<span class="string">&quot;Case &quot;</span>).append(++i).append(<span class="string">&quot;: &quot;</span>).append((v/p) * l + ((v%p) &gt; l ? l : (v%p))).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(sb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] convertStringArrayToIntegerArray(String[] args) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[args.length];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (String str : args) &#123;</span><br><span class="line">        array[i++] = Integer.parseInt(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="흐름"><a href="#흐름" class="headerlink" title="흐름"></a>흐름</h2><ol><li>V일 중에 연속되는 P일 동안 L일 만큼 휴가를 사용 할 수 있으므로</li><li>V에서 P를 나눈 값에서 L일을 곱하면 사용 가능한 휴가 일수가 구해지고</li><li>L이 V일에서 P일을 나눈 값보다 작을 땐 L일 만큼 휴가를 더 갈 수 있고</li><li>큰 경우엔 V % P 일 만큼 갈 수 있으므로 구한 값을 더하면</li><li>총 휴가 일수를 구할 수 있다.</li></ol><hr><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><img src="/2021/03/25/%EB%B0%B1%EC%A4%80-4796%EB%B2%88-%EC%BA%A0%ED%95%91/%EC%BA%A1%EC%B2%98.PNG" class="" title="백준 4796번: 캠핑">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/4796&quot;&gt;https://www.acmicpc.net</summary>
      
    
    
    
    
    <category term="알고리즘" scheme="https://jungguji.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
    <category term="그리디" scheme="https://jungguji.github.io/tags/%EA%B7%B8%EB%A6%AC%EB%94%94/"/>
    
    <category term="백준" scheme="https://jungguji.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
  </entry>
  
  <entry>
    <title>Requestbody Annotation 사용 시 기본 생성자 필요</title>
    <link href="https://jungguji.github.io/2021/02/05/Requestbody-Annotation-%EC%82%AC%EC%9A%A9-%EC%8B%9C-%EA%B8%B0%EB%B3%B8-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%84%EC%9A%94/"/>
    <id>https://jungguji.github.io/2021/02/05/Requestbody-Annotation-%EC%82%AC%EC%9A%A9-%EC%8B%9C-%EA%B8%B0%EB%B3%B8-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%84%EC%9A%94/</id>
    <published>2021-02-05T13:39:20.000Z</published>
    <updated>2021-02-05T13:39:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>사실, 제목이 결론이다. @Requestbody Annotation을 사용하려면 반드시 해당 DTO에는 기본 생성자가 명시적으로 존재하여야 한다. 뭔가 설정을 잘못했는지는 모르겠지만 intellij 에서 stacktrace가 출력되지 않아 이 사실을 알 수 가 없어서 엄청나게 삽질을 했기에 내용을 정리한다…</p><hr><h2 id="본론"><a href="#본론" class="headerlink" title="본론"></a>본론</h2><h3 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h3><p>controller 테스트에서 모든 조건을 맞췄는데도 500 에러가 발생하여 테스트를 통과하지 못하는 상황이었는데 @Requestbody annotation을 DTO가 아닌 HashMap으로 변경하니 테스트가 정상적으로 통과되어 JSON이 제대로 DTO로 매핑되지 않아서 발생하는 문제라고 판단했다.</p><h3 id="에러-발생"><a href="#에러-발생" class="headerlink" title="에러 발생"></a>에러 발생</h3><img src="/2021/02/05/Requestbody-Annotation-%EC%82%AC%EC%9A%A9-%EC%8B%9C-%EA%B8%B0%EB%B3%B8-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%84%EC%9A%94/%EA%B8%B0%EB%B3%B8%EC%83%9D%EC%84%B1%EC%9E%90_%EC%97%90%EB%9F%AC.png" class="" title="Requestbody Annotation 사용 시 기본 생성자 필요 에러 발생 에러 발생"><blockquote><p>No suitable constructor found for type [simple type, class 클래스명]: can not instantiate from JSON object (missing default constructor or creator, or perhaps need to add/enable type information?)</p></blockquote><p>직역하면 기본 생성자가 존재하지 않아서 에러가 발생했다는 내용이다.</p><h3 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h3><p>빌더패턴을 사용하던 클래스에 @Noargsconstructor annotation을 사용해서 기본 생성자를 생성하게 하였다.</p><img src="/2021/02/05/Requestbody-Annotation-%EC%82%AC%EC%9A%A9-%EC%8B%9C-%EA%B8%B0%EB%B3%B8-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%84%EC%9A%94/%EC%84%B1%EA%B3%B5.png" class="" title="Requestbody Annotation 사용 시 기본 생성자 필요 성공 테스트 성공"><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>@Requestbody와 DTO를 매핑되게 해야 할 경우 많은 조건이 필요하다.<br>이전 포스트에 작성했던 boolean의 변수명이라던가, 지금과 같은 기본 생성자라 라던지… 이게 모두 @Requestbody가 jackson 라이브러리를 이용해 매핑하기 때문이다. </p><hr><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><ul><li><a href="https://velog.io/@conatuseus/RequestBody%EC%97%90-%EA%B8%B0%EB%B3%B8-%EC%83%9D%EC%84%B1%EC%9E%90%EB%8A%94-%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%9C%EA%B0%800">https://velog.io/@conatuseus/RequestBody%EC%97%90-%EA%B8%B0%EB%B3%B8-%EC%83%9D%EC%84%B1%EC%9E%90%EB%8A%94-%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%9C%EA%B0%80</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;p&gt;사실, 제목이 결론이다. @Requestbody Annotation을 사용하려면 반드시 해당 DTO에는 기본 생성자가 명시적으</summary>
      
    
    
    
    
    <category term="Junit" scheme="https://jungguji.github.io/tags/Junit/"/>
    
    <category term="Test" scheme="https://jungguji.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot Heroku에 배포하기</title>
    <link href="https://jungguji.github.io/2021/01/28/Spring-boot-Heroku%EC%97%90-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/"/>
    <id>https://jungguji.github.io/2021/01/28/Spring-boot-Heroku%EC%97%90-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/</id>
    <published>2021-01-28T12:07:20.000Z</published>
    <updated>2021-01-28T12:07:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>AWS 프리티어는 이미 다른 서비스가 이용하고 있고 Java를 지원해주는 클라우드 서비스가 없었는데 <a href="https://www.heroku.com/">heroku</a>를 발견하여 사용방법을 정리 해둔다.</p><p><strong>참고로 데이터베이스는 한글을 지원하지 않는다.</strong></p><hr><h2 id="본론"><a href="#본론" class="headerlink" title="본론"></a>본론</h2><ol><li>heroku 회원 가입</li></ol><img src="/2021/01/28/Spring-boot-Heroku%EC%97%90-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85.PNG" class="" title="Spring boot Heroku에 배포하기 회원가입 회원가입"><ol start="2"><li>App 생성</li></ol><img src="/2021/01/28/Spring-boot-Heroku%EC%97%90-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/new_app.PNG" class="" title="Spring boot Heroku에 배포하기 Create a new app Create a new app"><p>위에 보이는 create a new app 버튼을 클릭하고</p><img src="/2021/01/28/Spring-boot-Heroku%EC%97%90-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/image.png" class="" title="Spring boot Heroku에 배포하기 app 이름 지정 app 이름 지정"><p>App name을 지정해야 하는데 이미 heroku에 존재하는 service의 name은 생성 할 수 없고,<br>여기서 지정한 App name으로 호스팅 될 URL이 생성된다.</p><ul><li>ex) appname : backjoonframeautomaticgenerat<br>  URL : <a href="https://backjoonframeautomaticgenerat.herokuapp.com/">https://backjoonframeautomaticgenerat.herokuapp.com/</a></li></ul><ol start="3"><li>heroku CLI 설치</li></ol><img src="/2021/01/28/Spring-boot-Heroku%EC%97%90-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/CLI_%EC%84%A4%EC%B9%98.png" class="" title="Spring boot Heroku에 배포하기 Heroku CLI 설치 Heroku CLI 설치"><p>생성이 완료되면 위 화면처럼 Deploy tab으로 이동되는데 설명되어 있는 것 처럼 먼저 <a href="https://devcenter.heroku.com/articles/heroku-cli">Heroku CLI</a>를 자신의 OS 버전에 맞게 설치한다.</p><ol start="4"><li>Procfile 생성</li></ol><p>Heroku는 실행 할 때 마다 port를 자동으로 지정해주는데 port를 고정시키기 위해 우선 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto-use-short-command-line-arguments">application.properties에 port를 바인딩</a> 해준다.</p><h3 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=$&#123;port:<span class="number">8080</span>&#125;</span><br></pre></td></tr></table></figure><p>그 후 Procfile을 Project 루트 디렉토리에 확장자 없이 생성하고 아래와 같이 작성한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web: java -Dserver.port=$PORT $JAVA_OPTS -jar [실행될 jar파일 경로]</span><br></pre></td></tr></table></figure><h3 id="Procfile의-경로"><a href="#Procfile의-경로" class="headerlink" title="Procfile의 경로"></a>Procfile의 경로</h3><img src="/2021/01/28/Spring-boot-Heroku%EC%97%90-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/Procfile_%EA%B2%BD%EB%A1%9C.png" class="" title="Spring boot Heroku에 배포하기 Procfile의 경로 Procfile의 경로 루트 디렉토리에 오도록 작성한다."><ol start="5"><li>배포</li></ol><p>이후엔 heroku의 가이드를 그대로 따라하면 된다.</p><img src="/2021/01/28/Spring-boot-Heroku%EC%97%90-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/%EB%B0%B0%ED%8F%AC%EC%99%84%EB%A3%8C.png" class="" title="Spring boot Heroku에 배포하기 배포 완료 배포 완료"><p>모든 가이드를 정상적으로 잘 따라하면 위 처럼 접속할 수 있는 URL이 출력되고 해당 URL로 접속하면</p><ol start="6"><li>확인</li></ol><p><a href="https://backjoonframeautomaticgenerat.herokuapp.com/">https://backjoonframeautomaticgenerat.herokuapp.com/</a></p><img src="/2021/01/28/Spring-boot-Heroku%EC%97%90-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/%ED%99%95%EC%9D%B8.PNG" class="" title="Spring boot Heroku에 배포하기 확인 배포가 마무리된 모습"><p>정상적으로 실행되어 서비스가 실행되는 것을 확인 할 수 있다.</p><hr><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>데이터베이스를 사용하지 않는 서비스나, 한글이 입력되지 않는 서비스의 경우 무료로 이용 할 수 있는 좋은 클라우드 서비스 인 것 같다.</p><p>참고로 30분간 접속이 없으면 휴면 모드로 전환되어 최초 접속이 다소 느릴 수 있으나 무료 서비스인 만큼 그정도는 감안해주자.</p><p>이 글에 소개한 CLI를 이용한 방법 말고 Github와 연결해서 branch에 push하면 자동으로 배포되게 할 수 도 있는 것 같으니 찾아보고 적용하면 이 방법 보다 더 편할 것이다.</p><hr><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><ul><li><a href="https://jeong-pro.tistory.com/182">https://jeong-pro.tistory.com/182</a></li><li><a href="https://wedul.site/590">https://wedul.site/590</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;p&gt;AWS 프리티어는 이미 다른 서비스가 이용하고 있고 Java를 지원해주는 클라우드 서비스가 없었는데 &lt;a href=&quot;https</summary>
      
    
    
    
    
    <category term="Spring boot" scheme="https://jungguji.github.io/tags/Spring-boot/"/>
    
    <category term="Heroku" scheme="https://jungguji.github.io/tags/Heroku/"/>
    
    <category term="Could" scheme="https://jungguji.github.io/tags/Could/"/>
    
  </entry>
  
  <entry>
    <title>failed to lazily initialize a collection of role</title>
    <link href="https://jungguji.github.io/2021/01/22/failed-to-lazily-initialize-a-collection-of-role/"/>
    <id>https://jungguji.github.io/2021/01/22/failed-to-lazily-initialize-a-collection-of-role/</id>
    <published>2021-01-22T13:31:53.000Z</published>
    <updated>2021-01-22T13:31:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>연관관계에 있는 객체를 가져와서 set 하는 메서드를 테스트 하는 도중 아래와 같은 에러가 발생하였다.</p><hr><h2 id="본론"><a href="#본론" class="headerlink" title="본론"></a>본론</h2><h3 id="해당-에러"><a href="#해당-에러" class="headerlink" title="해당 에러"></a>해당 에러</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: com.jjlee.wedding.payment.domain.Cost.costOptions, no session or session was closed</span><br><span class="line"></span><br><span class="line">at org.hibernate.collection.AbstractPersistentCollection.throwLazyInitializationException(AbstractPersistentCollection.java:<span class="number">383</span>)</span><br><span class="line">at org.hibernate.collection.AbstractPersistentCollection.throwLazyInitializationExceptionIfNotConnected(AbstractPersistentCollection.java:<span class="number">375</span>)</span><br><span class="line">at org.hibernate.collection.AbstractPersistentCollection.readSize(AbstractPersistentCollection.java:<span class="number">122</span>)</span><br><span class="line">at org.hibernate.collection.PersistentBag.size(PersistentBag.java:<span class="number">248</span>)</span><br><span class="line">at com.xxxxxx.ImplTest.가져와서_셋해야하는지_테스트(CostServiceImplTest.java:<span class="number">89</span>)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">at org.junit.runners.model.FrameworkMethod$<span class="number">1.</span>runReflectiveCall(FrameworkMethod.java:<span class="number">59</span>)</span><br><span class="line">at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:<span class="number">12</span>)</span><br><span class="line">at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:<span class="number">56</span>)</span><br><span class="line">at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:<span class="number">17</span>)</span><br><span class="line">at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:<span class="number">26</span>)</span><br><span class="line">at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:<span class="number">75</span>)</span><br><span class="line">at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:<span class="number">86</span>)</span><br><span class="line">at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:<span class="number">84</span>)</span><br><span class="line">at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:<span class="number">366</span>)</span><br><span class="line">at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:<span class="number">252</span>)</span><br><span class="line">at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:<span class="number">94</span>)</span><br><span class="line">at org.junit.runners.ParentRunner$<span class="number">4.</span>run(ParentRunner.java:<span class="number">331</span>)</span><br><span class="line">at org.junit.runners.ParentRunner$<span class="number">1.</span>schedule(ParentRunner.java:<span class="number">79</span>)</span><br><span class="line">at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:<span class="number">329</span>)</span><br><span class="line">at org.junit.runners.ParentRunner.access$<span class="number">100</span>(ParentRunner.java:<span class="number">66</span>)</span><br><span class="line">at org.junit.runners.ParentRunner$<span class="number">2.</span>evaluate(ParentRunner.java:<span class="number">293</span>)</span><br><span class="line">at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:<span class="number">61</span>)</span><br><span class="line">at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:<span class="number">70</span>)</span><br><span class="line">at org.junit.runners.ParentRunner$<span class="number">3.</span>evaluate(ParentRunner.java:<span class="number">306</span>)</span><br><span class="line">at org.junit.runners.ParentRunner.run(ParentRunner.java:<span class="number">413</span>)</span><br><span class="line">at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:<span class="number">191</span>)</span><br><span class="line">at org.junit.runner.JUnitCore.run(JUnitCore.java:<span class="number">137</span>)</span><br><span class="line">at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:<span class="number">68</span>)</span><br><span class="line">at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:<span class="number">33</span>)</span><br><span class="line">at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:<span class="number">230</span>)</span><br><span class="line">at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:<span class="number">58</span>)</span><br></pre></td></tr></table></figure><p>이 때 디버깅을 해보면 연결된 entitiy에서</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unable to evaluate the expression Method threw <span class="string">&#x27;org.hibernate.LazyInitializationException&#x27;</span> exception.</span><br></pre></td></tr></table></figure><p>라는 에러가 발생해 있는데 이는 결국 select 한 entitiy가 영속성 컨텍스트 내에 존재하지 않기 때문에 발생한 애러이다.<br>위 에러에서 말하는 세션이 바로 영속성 컨텍스트를 말하는 것이고, 이는 한 트랜잭션안에 해당 entitiy가 존재하지 않다는 것과 같은 말이다.</p><h3 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h3><p>이를 해결하기 위해선 현재 지연로딩으로 되어있는 연관관계를 즉시로딩으로 변경하여 한번에 가져오던가,<br>혹은 Test 메서드에 @Transactional 어노테이션을 줘서 트랜잭션 내에 존재하도록 해주면 테스트가 정상적으로 통과되게 된다.</p><h3 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h3><hr><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><ul><li><a href="%5Bhttps://bebong.tistory.com/entry/JPA-Lazy-Evaluation-LazyInitializationException-could-not-initialize-proxy-%E2%80%93-no-Session%5D(https://bebong.tistory.com/entry/JPA-Lazy-Evaluation-LazyInitializationException-could-not-initialize-proxy-%E2%80%93-no-Session)"><a href="https://bebong.tistory.com/entry/JPA-Lazy-Evaluation-LazyInitializationException-could-not-initialize-proxy-%E2%80%93-no-Session">https://bebong.tistory.com/entry/JPA-Lazy-Evaluation-LazyInitializationException-could-not-initialize-proxy-–-no-Session</a></a></li><li><a href="%5Bhttps://ankonichijyou.tistory.com/entry/JPA-OneToMany-%EC%98%A4%EB%A5%98%5D(https://ankonichijyou.tistory.com/entry/JPA-OneToMany-%EC%98%A4%EB%A5%98)"><a href="https://ankonichijyou.tistory.com/entry/JPA-OneToMany-%EC%98%A4%EB%A5%98">https://ankonichijyou.tistory.com/entry/JPA-OneToMany-오류</a></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;p&gt;연관관계에 있는 객체를 가져와서 set 하는 메서드를 테스트 하는 도중 아래와 같은 에러가 발생하였다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2</summary>
      
    
    
    
    
    <category term="Junit" scheme="https://jungguji.github.io/tags/Junit/"/>
    
    <category term="JPA" scheme="https://jungguji.github.io/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>Junit4 설정 주입 에러</title>
    <link href="https://jungguji.github.io/2021/01/12/Junit4-%EC%84%A4%EC%A0%95-%EC%A3%BC%EC%9E%85-%EC%97%90%EB%9F%AC/"/>
    <id>https://jungguji.github.io/2021/01/12/Junit4-%EC%84%A4%EC%A0%95-%EC%A3%BC%EC%9E%85-%EC%97%90%EB%9F%AC/</id>
    <published>2021-01-12T12:45:32.000Z</published>
    <updated>2021-01-12T12:45:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>현재 작업 중인 프로젝트에서 테스트 코드를 작성해 테스트할 일이 있었는데 프로젝트의 환경은 spring 4.3에 Junit 4.8이었다.</p><p>이에 원래 사용하던 junit5로 넘어갈까 하였으나 junit5를 사용하려면 설정을 spring boot으로 해야 한다는 글들이 있어 같은 테스트 환경을 만들기 위해 junit만 4.12 버전으로 업그레이드한 후 테스트를 진행하였는데 spring 프로젝트지만 config 설정들을 boot 처럼 java 파일로 관리하는 형태여서 java 파일과 properties 파일을 동시에 잡아 줄 필요가 있었는데<br>@Contextconfiguration(classes = {블라블라…}, locations = {블라블라…})로 잡으니 에러가 발생하여 해결한 방법을 작성해놓는다.</p><hr><h2 id="본론"><a href="#본론" class="headerlink" title="본론"></a>본론</h2><h3 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;</span></span><br><span class="line"><span class="meta">        DatabaseConfig.class,</span></span><br><span class="line"><span class="meta">        SecurityConfig.class,</span></span><br><span class="line"><span class="meta">        SocialConfig.class,</span></span><br><span class="line"><span class="meta">        EnumConfig.class,</span></span><br><span class="line"><span class="meta">        WebMvcConfig.class</span></span><br><span class="line"><span class="meta">&#125;, locations = &quot;classpath:properties/test.properties&quot;)</span></span><br></pre></td></tr></table></figure><p>서론에 적은 것 처럼 classes와 locations를 둘 다 설정하였더니 아래와 같이 에러가 발생하였다.</p><h3 id="에러"><a href="#에러" class="headerlink" title="에러"></a>에러</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: Cannot process locations AND classes <span class="keyword">for</span> context configuration [ContextConfigurationAttributes@64c87930 declaringClass = <span class="string">&#x27;com.xxxx.xxxImplTest&#x27;</span>, classes = <span class="string">&#x27;&#123;class com.xxxx.config.DatabaseConfig, class com.xxx.config.SecurityConfig, class com.xxx.config.SocialConfig, class com.xxx.config.EnumConfig, class com.xxx.config.WebMvcConfig&#125;&#x27;</span>, locations = <span class="string">&#x27;&#123;classpath:properties/test.properties&#125;&#x27;</span>, inheritLocations = <span class="keyword">true</span>, initializers = <span class="string">&#x27;&#123;&#125;&#x27;</span>, inheritInitializers = <span class="keyword">true</span>, name = [<span class="keyword">null</span>], contextLoaderClass = <span class="string">&#x27;org.springframework.test.context.ContextLoader&#x27;</span>]: configure one or the other, but not both.</span><br><span class="line"></span><br><span class="line">at org.springframework.util.Assert.isTrue(Assert.java:<span class="number">68</span>)</span><br><span class="line">at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.processContextConfiguration(AbstractDelegatingSmartContextLoader.java:<span class="number">154</span>)</span><br><span class="line">at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildMergedContextConfiguration(AbstractTestContextBootstrapper.java:<span class="number">371</span>)</span><br><span class="line">at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildMergedContextConfiguration(AbstractTestContextBootstrapper.java:<span class="number">305</span>)</span><br><span class="line">at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildTestContext(AbstractTestContextBootstrapper.java:<span class="number">112</span>)</span><br><span class="line">at org.springframework.test.context.TestContextManager.&lt;init&gt;(TestContextManager.java:<span class="number">120</span>)</span><br><span class="line">at org.springframework.test.context.TestContextManager.&lt;init&gt;(TestContextManager.java:<span class="number">105</span>)</span><br><span class="line">at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTestContextManager(SpringJUnit4ClassRunner.java:<span class="number">152</span>)</span><br><span class="line">at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.&lt;init&gt;(SpringJUnit4ClassRunner.java:<span class="number">143</span>)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">423</span>)</span><br><span class="line">at org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:<span class="number">104</span>)</span><br><span class="line">at org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:<span class="number">86</span>)</span><br><span class="line">at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:<span class="number">70</span>)</span><br><span class="line">at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:<span class="number">37</span>)</span><br><span class="line">at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:<span class="number">70</span>)</span><br><span class="line">at org.junit.internal.requests.ClassRequest.createRunner(ClassRequest.java:<span class="number">28</span>)</span><br><span class="line">at org.junit.internal.requests.MemoizingRequest.getRunner(MemoizingRequest.java:<span class="number">19</span>)</span><br><span class="line">at org.junit.internal.requests.FilterRequest.getRunner(FilterRequest.java:<span class="number">36</span>)</span><br><span class="line">at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:<span class="number">49</span>)</span><br><span class="line">at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:<span class="number">33</span>)</span><br><span class="line">at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:<span class="number">230</span>)</span><br><span class="line">at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:<span class="number">58</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p>@Testpropertysource(classpath:””)로 test properties를 잡아주고<br>@Contextconfiguration(classes = { XXXConfig.class}) 로 Java config 파일들을 잡아준다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;</span></span><br><span class="line"><span class="meta">        DatabaseConfig.class,</span></span><br><span class="line"><span class="meta">        SecurityConfig.class,</span></span><br><span class="line"><span class="meta">        SocialConfig.class,</span></span><br><span class="line"><span class="meta">        EnumConfig.class,</span></span><br><span class="line"><span class="meta">        WebMvcConfig.class</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Testpropertysource(&quot;classpath:properties/test.properties&quot;)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;p&gt;현재 작업 중인 프로젝트에서 테스트 코드를 작성해 테스트할 일이 있었는데 프로젝트의 환경은 spring 4.3에 Junit 4</summary>
      
    
    
    
    
    <category term="Junit" scheme="https://jungguji.github.io/tags/Junit/"/>
    
    <category term="Test" scheme="https://jungguji.github.io/tags/Test/"/>
    
    <category term="Spring" scheme="https://jungguji.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Hexo blog backup 방법</title>
    <link href="https://jungguji.github.io/2021/01/02/Hexo-blog-backup-%EB%B0%A9%EB%B2%95/"/>
    <id>https://jungguji.github.io/2021/01/02/Hexo-blog-backup-%EB%B0%A9%EB%B2%95/</id>
    <published>2021-01-02T06:54:05.000Z</published>
    <updated>2021-01-02T06:54:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>많은 블로그 서비스 중 필자는 Git, Github를 활용해서 사용하는 hexo로 github 블로그를 선택했지만, 다른 블로그 서비스들과는 달리 설치형 블로그의 특성상 설치된 PC가 아닌 경우엔 블로그에 글을 작성하는 일이 쉽지 않고, 블로그가 설치된 PC가 고장이라도 나는 날에는 고스라니 블로그를 날려버리는 상황이 닥치는 경우도 왕왕있다. (예로 필자는 블로그를 설치한 HDD가 고장나 블로그를 새로 작성했다.) 이런 경우를 방지하고, 블로그 작성의 확장성을 위해 github을 이용해 Hexo 블로그를 back up 하는 방법을 알아본다.</p><hr><h2 id="방법"><a href="#방법" class="headerlink" title="방법"></a>방법</h2><img src="/2021/01/02/Hexo-blog-backup-%EB%B0%A9%EB%B2%95/1_%EC%A0%80%EC%9E%A5%EC%86%8C.PNG" class="" title="Hexo blog backup 방법 post와 테마를 저장 할 저장소 생성 " alt="post와 테마를 저장 할 저장소 생성"><ol><li>우선 위 사진처럼 github에서 테마와 post를 저장 할 repository를 생성한다.<br>이 때 테마를 저장 할 저장소의 이름은 테마와 같게 한다.</li></ol><img src="/2021/01/02/Hexo-blog-backup-%EB%B0%A9%EB%B2%95/2_%ED%85%8C%EB%A7%88_%EC%A0%80%EC%9E%A5%EC%86%8C_%EB%B3%80%EA%B2%BD.PNG" class="" title="Hexo blog backup 방법 설치한 테마의 저장소 변경 " alt="설치한 테마의 저장소 변경"><ol start="2"><li>테마를 저장하기 위해 연결된 원격 저장소의 위치를 확인하고 설치한 테마 폴더 안에서 git 원격 저장소 주소를 변경한다.</li><li>변경 후 테마용 저장소에 테마를 push한다.</li></ol><img src="/2021/01/02/Hexo-blog-backup-%EB%B0%A9%EB%B2%95/3_%ED%85%8C%EB%A7%88-%EC%A0%80%EC%9E%A5%ED%99%95%EC%9D%B8.PNG" class="" title="Hexo blog backup 방법 push 된 테마 확인 " alt="push 된 테마 확인"><ol start="4"><li>위 처럼 정상적으로 저장되어 있는지 확인하고 themes 폴더안에서 테마를 삭제한다.</li><li>git의 submodule 기능을 이용해 저장한 테마를 submodule로 추가하는데 이 때 디렉토리의 위치는 themes 폴더 내로 이동해서 submodule 기능을 실행한다.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add 테마 저장소</span><br></pre></td></tr></table></figure><ol start="6"><li>post를 저장 할 저장소 주소를 추가한다.(cotent)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add content post 저장소</span><br></pre></td></tr></table></figure><img src="/2021/01/02/Hexo-blog-backup-%EB%B0%A9%EB%B2%95/4_post-%EC%A0%80%EC%9E%A5%ED%99%95%EC%9D%B8.PNG" class="" title="Hexo blog backup 방법 post 저장 확인 " alt="post 저장 확인"><ol start="7"><li>post 저장용 저장소에 내용을 push하고 정상적으로 저장되었는지 확인한다.</li><li>이 후엔 post 작성 후 post만 content 저장소로 push해주면 된다.</li></ol><hr><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><p>이제 우리는 불미스러운 사고로 블로그가 설치된 HDD가 고장나거나(ㅠㅠ), 블로그가 설치 안된 다른 PC or 노트북에서도 백업된 theme와 post들을 다운받아 블로그를 작성 할 수 있게 되었다.</p><p>여담이지만, 과거로 돌아간다면 나는 velog를 사용 할 듯 싶다.</p><hr><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><ul><li><a href="https://futurecreator.github.io/2018/07/18/hexo-blog-backup/">Hexo 배포 원리와 백업하기</a></li><li><a href="https://blog.naver.com/PostView.nhn?blogId=bestmic&logNo=220939712681&proxyReferer=https://www.google.com/">Git cached 삭제</a></li><li><a href="http://snowdeer.github.io/git/2018/08/01/how-to-remove-git-submodule/">Git Submodule 삭제방법</a></li><li><a href="https://stackoverflow.com/questions/24472596/git-fatal-pathspec-is-in-submodule">Git: fatal: Pathspec is in submodule</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;p&gt;많은 블로그 서비스 중 필자는 Git, Github를 활용해서 사용하는 hexo로 github 블로그를 선택했지만, 다른 블로</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>RequestBody Annotation 사용 시 boolean 변수 바인딩 에러</title>
    <link href="https://jungguji.github.io/2020/12/31/RequestBody-Annotation-%EC%82%AC%EC%9A%A9-%EC%8B%9C-boolean-%EB%B3%80%EC%88%98-%EB%B0%94%EC%9D%B8%EB%94%A9-%EC%97%90%EB%9F%AC/"/>
    <id>https://jungguji.github.io/2020/12/31/RequestBody-Annotation-%EC%82%AC%EC%9A%A9-%EC%8B%9C-boolean-%EB%B3%80%EC%88%98-%EB%B0%94%EC%9D%B8%EB%94%A9-%EC%97%90%EB%9F%AC/</id>
    <published>2020-12-31T13:08:54.000Z</published>
    <updated>2020-12-31T13:08:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>토이프로젝트 중 @Reqeust 어노테이션을 적용한 DTO에서 boolean 데이터를 제대로 전달 받지 못하는 문제가 발생하여 이를 정리한다.</p><hr><h2 id="문제-발생"><a href="#문제-발생" class="headerlink" title="문제 발생"></a>문제 발생</h2><p>vue.js에서 넘어온 데이터를 @RequestBody 어노테이션을 활용해 DTO 객체로 전달 받으려 하였는데 boolean 타입의 데이터가 정상적으로 넘어오지 않는 문제가 발생하였다.</p><h3 id="문제가-발생한-Test-Code"><a href="#문제가-발생한-Test-Code" class="headerlink" title="문제가 발생한 Test Code"></a>문제가 발생한 Test Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dto_boolean_test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//given</span></span><br><span class="line">    RequestDTO dto = RequestDTO.builder()</span><br><span class="line">            .isTestCase(<span class="keyword">true</span>)</span><br><span class="line">            .isNQuantity(<span class="keyword">true</span>)</span><br><span class="line">            .isSpaceIncludeNumber(<span class="keyword">true</span>)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    String test = objectMapper.writeValueAsString(dto);</span><br><span class="line"></span><br><span class="line">    System.out.println(test);</span><br><span class="line">    <span class="keyword">final</span> ResultActions action = mockMvc.perform(post(<span class="string">&quot;/frame&quot;</span>)</span><br><span class="line">            .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">            .content(test))</span><br><span class="line">            .andDo(print());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//then</span></span><br><span class="line">    MvcResult result = action</span><br><span class="line">            .andExpect(status().isOk())</span><br><span class="line">            .andExpect(content().json(test))</span><br><span class="line">            .andReturn();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="에러-결과"><a href="#에러-결과" class="headerlink" title="에러 결과"></a>에러 결과</h3><img src="/2020/12/31/RequestBody-Annotation-%EC%82%AC%EC%9A%A9-%EC%8B%9C-boolean-%EB%B3%80%EC%88%98-%EB%B0%94%EC%9D%B8%EB%94%A9-%EC%97%90%EB%9F%AC/test%EC%8B%A4%ED%8C%A8.PNG" class="" title="RequestBody Annotation 사용 시 boolean 변수 바인딩 에러"><hr><h2 id="원인"><a href="#원인" class="headerlink" title="원인"></a>원인</h2><blockquote><p> You can annotate any field with @Getter and/or @Setter, to let lombok generate the default getter/setter automatically.<br>A default getter simply returns the field, and is named getFoo if the field is called foo (or isFoo if the field’s type is boolean). </p><footer><strong>Project Lombok</strong><cite><a href="https://projectlombok.org/features/GetterSetter">Project Lombok</a></cite></footer></blockquote><p>위 설명처럼 lombok에서 제공하는 @Getter 혹은 @Setter 어노테이션을 사용 할 경우 자동으로 getter/setter 메서드를 생성해주는데<br>이 때 boolean 타입의 변수에 붙는 prefix는 get이 아닌 is이므로 @RequestBody에서 찾을 수 없어 바인딩 되지 않아 발생하는 문제였다.</p><h3 id="실패한-코드"><a href="#실패한-코드" class="headerlink" title="실패한 코드"></a>실패한 코드</h3><img src="/2020/12/31/RequestBody-Annotation-%EC%82%AC%EC%9A%A9-%EC%8B%9C-boolean-%EB%B3%80%EC%88%98-%EB%B0%94%EC%9D%B8%EB%94%A9-%EC%97%90%EB%9F%AC/%EC%8B%A4%ED%8C%A8%ED%95%9C_%EC%BD%94%EB%93%9C.PNG" class="" title="RequestBody Annotation 사용 시 boolean 변수 바인딩 에러 실패한_코드 실패했을 당시 DTO 실패한_코드 실패했을 당시 DTO"><p>이 처럼 boolean 변수에 is prefix를 붙여놓은 상태에서 @Getter 어노테이션을 사용하니, 내부적으로 isIsTestCase() 같은 이상한 네이밍의 메서드가 생성되서<br>@RequestBody에서 바인딩에 사용하는 Jackson 라이브러리의 ObjectMapper에서 필드를 찾을 수 없어서 바인딩 되지 않아 DTO에 정상적으로 값이 입력되지 않았던 것이다.</p><blockquote><p>By default Jackson maps the fields of a JSON object to fields in a Java object by matching the names of the JSON field to the getter and setter methods in the Java object. Jackson removes the “get” and “set” part of the names of the getter and setter methods, and converts the first character of the remaining name to lowercase.</p><footer><strong>Jackson ObjectMapper</strong><cite><a href="https://tutorials.jenkov.com/java-json/jackson-objectmapper.html#how-jackson-objectmapper-matches-json-fields-to-java-fields">Jackson ObjectMapper</a></cite></footer></blockquote><hr><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><ol><li>boolean 변수명에서 is prefix를 제거한다.</li><li>default로 false로 되어 있는 lombok.getter.noIsPrefix=true 설정을 추가한다.<br>이 설정을 추가하면 boolean 변수도 get prefix를 사용한다.</li></ol><p>필자는 boolean 변수에서 is prefix를 제거하는 방식으로 처리했다.<br>다른 타입은 자료형에 따라 prefix를 붙이지 않는 상황에서 boolean 변수에만 붙이는 것이 옳지 않다고 생각했기 때문에 1번을 선택했다.</p><h3 id="수정된-코드"><a href="#수정된-코드" class="headerlink" title="수정된 코드"></a>수정된 코드</h3><img src="/2020/12/31/RequestBody-Annotation-%EC%82%AC%EC%9A%A9-%EC%8B%9C-boolean-%EB%B3%80%EC%88%98-%EB%B0%94%EC%9D%B8%EB%94%A9-%EC%97%90%EB%9F%AC/%EC%84%B1%EA%B3%B5%ED%95%9C_%EC%BD%94%EB%93%9C.PNG" class="" title="RequestBody Annotation 사용 시 boolean 변수 바인딩 에러 문제를 수정한 DTO 에러 문제를 수정한 DTO"><h3 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h3><img src="/2020/12/31/RequestBody-Annotation-%EC%82%AC%EC%9A%A9-%EC%8B%9C-boolean-%EB%B3%80%EC%88%98-%EB%B0%94%EC%9D%B8%EB%94%A9-%EC%97%90%EB%9F%AC/test%EC%84%B1%EA%B3%B5.PNG" class="" title="RequestBody Annotation 사용 시 boolean 변수 바인딩 에러 수정 후 성공한 테스트 에러 수정 후 성공한 테스트"><hr><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><ul><li><a href="https://projectlombok.org/features/GetterSetter">https://projectlombok.org/features/GetterSetter</a></li><li><a href="https://velog.io/@conatuseus/RequestBody%EC%97%90-%EC%99%9C-%EA%B8%B0%EB%B3%B8-%EC%83%9D%EC%84%B1%EC%9E%90%EB%8A%94-%ED%95%84%EC%9A%94%ED%95%98%EA%B3%A0-Setter%EB%8A%94-%ED%95%84%EC%9A%94-%EC%97%86%EC%9D%84%EA%B9%8C-3-idnrafiw">https://velog.io/@conatuseus/RequestBody%EC%97%90-%EC%99%9C-%EA%B8%B0%EB%B3%B8-%EC%83%9D%EC%84%B1%EC%9E%90%EB%8A%94-%ED%95%84%EC%9A%94%ED%95%98%EA%B3%A0-Setter%EB%8A%94-%ED%95%84%EC%9A%94-%EC%97%86%EC%9D%84%EA%B9%8C-3-idnrafiw</a></li><li><a href="http://tutorials.jenkov.com/java-json/jackson-objectmapper.html#how-jackson-objectmapper-matches-json-fields-to-java-fields">http://tutorials.jenkov.com/java-json/jackson-objectmapper.html#how-jackson-objectmapper-matches-json-fields-to-java-fields</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;p&gt;토이프로젝트 중 @Reqeust 어노테이션을 적용한 DTO에서 boolean 데이터를 제대로 전달 받지 못하는 문제가 발생하여</summary>
      
    
    
    
    
    <category term="-Spring-Boot -" scheme="https://jungguji.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>백준 18870번: 좌표 압축</title>
    <link href="https://jungguji.github.io/2020/12/15/%EB%B0%B1%EC%A4%80-18870%EB%B2%88-%EC%A2%8C%ED%91%9C-%EC%95%95%EC%B6%95/"/>
    <id>https://jungguji.github.io/2020/12/15/%EB%B0%B1%EC%A4%80-18870%EB%B2%88-%EC%A2%8C%ED%91%9C-%EC%95%95%EC%B6%95/</id>
    <published>2020-12-15T05:43:55.000Z</published>
    <updated>2020-12-15T05:43:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p><a href="https://www.acmicpc.net/problem/18870">https://www.acmicpc.net/problem/18870</a></p><hr><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    br.readLine();</span><br><span class="line">    Integer[] array = convertStringArrayToIntegerArray(br.readLine().split(<span class="string">&quot; &quot;</span>));</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(array.clone());</span><br><span class="line"></span><br><span class="line">    Collections.sort(list);</span><br><span class="line"></span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(i)) &#123;</span><br><span class="line">            map.put(i, index++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : array) &#123;</span><br><span class="line">            sb.append(map.get(i)).append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(sb.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Integer[] convertStringArrayToIntegerArray(String[] args) &#123;</span><br><span class="line">    Integer[] array = <span class="keyword">new</span> Integer[args.length];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (String str : args) &#123;</span><br><span class="line">        array[i++] = Integer.parseInt(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="흐름"><a href="#흐름" class="headerlink" title="흐름"></a>흐름</h2><ol><li>입력받은 좌표를 저장한 리스트로 수정하면 출력 순서를 맞출 수 없으니 우선 좌표 list를 복사한다.</li><li>복사한 list를 정렬하고 순서대로 반복하면서 좌표값을 key로 index를 저장한다.<ol><li>{-10 : 0}, {-9, 1}… {4,4}</li></ol></li><li>입력받은 좌표를 순서대로 반복하면서 map에 key로 index를 가져온다.</li><li>끝</li></ol><hr><h2 id="좌표-압축의-이유"><a href="#좌표-압축의-이유" class="headerlink" title="좌표 압축의 이유"></a>좌표 압축의 이유</h2><img src="/2020/12/15/%EB%B0%B1%EC%A4%80-18870%EB%B2%88-%EC%A2%8C%ED%91%9C-%EC%95%95%EC%B6%95/%EC%95%95%EC%B6%95%EC%A0%84.PNG" class="" title="백준 18870번: 좌표 압축 좌표 {2 4 -10 4 -9} 압축 전 " alt="좌표 {2 4 -10 4 -9} 압축 전"><br /><img src="/2020/12/15/%EB%B0%B1%EC%A4%80-18870%EB%B2%88-%EC%A2%8C%ED%91%9C-%EC%95%95%EC%B6%95/%EC%95%95%EC%B6%95%ED%9B%84.PNG" class="" title="백준 18870번: 좌표 압축 좌표 {2 4 -10 4 -9} 압축 전 " alt="좌표 {2 4 -10 4 -9} 압축 후"><ul><li>문제의 예제인 좌표 {2 4 -10 4 -9}을 위와 같은 알고리즘으로 압축하면 {2 3 0 3 1}이 되는데 위 그림 처럼 압축된 점들도 같은 동일선상 안에 놓이게 된다.</li><li>이렇게 범위가 매우 넓은 좌표의 경우에 좌표를 인덱싱해서 처리 할 경우 손쉽게 처리 할 수 있게 된다.</li></ul><hr><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><img src="/2020/12/15/%EB%B0%B1%EC%A4%80-18870%EB%B2%88-%EC%A2%8C%ED%91%9C-%EC%95%95%EC%B6%95/%EC%BA%A1%EC%B2%98.PNG" class="" title="백준 1406번: 에디터"><hr><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><ul><li><a href="https://www.desmos.com/calculator/id7dqtpnmv?lang=ko">https://www.desmos.com/calculator/id7dqtpnmv?lang=ko</a></li><li><a href="https://codingdog.tistory.com/entry/%EC%A2%8C%ED%91%9C-%EC%95%95%EC%B6%95-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%B2%94%EC%9C%84%EA%B0%80-%ED%81%B4-%EB%95%8C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B3%B5%EA%B0%84%EC%9D%84-%EC%A4%84%EC%9D%BC%EA%B9%8C%EC%9A%94">https://codingdog.tistory.com/entry/%EC%A2%8C%ED%91%9C-%EC%95%95%EC%B6%95-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%B2%94%EC%9C%84%EA%B0%80-%ED%81%B4-%EB%95%8C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B3%B5%EA%B0%84%EC%9D%84-%EC%A4%84%EC%9D%BC%EA%B9%8C%EC%9A%94</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/18870&quot;&gt;https://www.acmicpc.ne</summary>
      
    
    
    
    
    <category term="알고리즘" scheme="https://jungguji.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
    <category term="백준" scheme="https://jungguji.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
    <category term="좌표압축" scheme="https://jungguji.github.io/tags/%EC%A2%8C%ED%91%9C%EC%95%95%EC%B6%95/"/>
    
    <category term="정렬" scheme="https://jungguji.github.io/tags/%EC%A0%95%EB%A0%AC/"/>
    
  </entry>
  
  <entry>
    <title>백준 1406번: 에디터</title>
    <link href="https://jungguji.github.io/2020/12/14/%EB%B0%B1%EC%A4%80-1406%EB%B2%88-%EC%97%90%EB%94%94%ED%84%B0/"/>
    <id>https://jungguji.github.io/2020/12/14/%EB%B0%B1%EC%A4%80-1406%EB%B2%88-%EC%97%90%EB%94%94%ED%84%B0/</id>
    <published>2020-12-14T06:12:57.000Z</published>
    <updated>2020-12-14T06:12:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p><a href="https://www.acmicpc.net/problem/1406">https://www.acmicpc.net/problem/1406</a></p><hr><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">char</span>[] input = br.readLine().toCharArray();</span><br><span class="line"></span><br><span class="line">    LinkedList&lt;Character&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : input) &#123;</span><br><span class="line">        list.add(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListIterator&lt;Character&gt; it = list.listIterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        it.next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        String command = br.readLine();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (command) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;L&quot;</span> :</span><br><span class="line">                <span class="keyword">if</span> (it.hasPrevious()) &#123;</span><br><span class="line">                    it.previous();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;D&quot;</span> :</span><br><span class="line">                <span class="keyword">if</span> (it.hasNext()) &#123;</span><br><span class="line">                    it.next();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;B&quot;</span> :</span><br><span class="line">                <span class="keyword">if</span> (it.hasPrevious() &amp;&amp; !list.isEmpty()) &#123;</span><br><span class="line">                    it.previous();</span><br><span class="line">                    it.remove();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                it.add(command.charAt(<span class="number">2</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : list) &#123;</span><br><span class="line">        sb.append(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(sb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>이 문제는 로직보다 걸리는 시간이 문제였다.</li><li>처음엔 LinkedList를 그대로 사용해 add, remove를 했지만 시간초과로 인해 <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ListIterator.html">ListIterator</a>을 이용해 해결했다.</li></ul><hr><h2 id="ListIterator"><a href="#ListIterator" class="headerlink" title="ListIterator"></a>ListIterator</h2><ul><li>List를 양방향으로 탐색하고, 루프 중에 리스트를 수정하고, 리스트에서 현재 위치를 가져올 수 있다.</li><li>커서는 previous()로 리턴되는 원소와 next()로 리턴되는 원소 사이에 존재한다.</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">                    Element(0)   Element(1)   Element(2)   ... Element(n-1)</span><br><span class="line">cursor positions:  ^            ^            ^            ^                  ^</span><br></pre></td></tr></table></figure><ul><li>remove()와 set()를 호출해도 커서의 위치는 움직이지 않는다.</li><li>remove() 호출 시 next()혹은 preivous()에 의해 리턴된 마지막 요소를 리스트에서 제거한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&quot;B&quot;</span> :</span><br><span class="line">        <span class="keyword">if</span> (it.hasPrevious() &amp;&amp; !list.isEmpty()) &#123;</span><br><span class="line">            it.previous();</span><br><span class="line">            it.remove();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><img src="/2020/12/14/%EB%B0%B1%EC%A4%80-1406%EB%B2%88-%EC%97%90%EB%94%94%ED%84%B0/%EC%BA%A1%EC%B2%98.PNG" class="" title="백준 1406번: 에디터"><hr><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><ul><li><a href="https://www.acmicpc.net/board/view/59173">https://www.acmicpc.net/board/view/59173</a></li><li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ListIterator.html">https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ListIterator.html</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/1406&quot;&gt;https://www.acmicpc.net</summary>
      
    
    
    
    
    <category term="알고리즘" scheme="https://jungguji.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
    <category term="백준" scheme="https://jungguji.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
    <category term="자료구조" scheme="https://jungguji.github.io/tags/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/"/>
    
  </entry>
  
  <entry>
    <title>백준 11724번: 연결 요소의 개수</title>
    <link href="https://jungguji.github.io/2020/12/08/%EB%B0%B1%EC%A4%80-11724%EB%B2%88-%EC%97%B0%EA%B2%B0-%EC%9A%94%EC%86%8C%EC%9D%98-%EA%B0%9C%EC%88%98/"/>
    <id>https://jungguji.github.io/2020/12/08/%EB%B0%B1%EC%A4%80-11724%EB%B2%88-%EC%97%B0%EA%B2%B0-%EC%9A%94%EC%86%8C%EC%9D%98-%EA%B0%9C%EC%88%98/</id>
    <published>2020-12-08T06:42:15.000Z</published>
    <updated>2020-12-08T06:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p><a href="https://www.acmicpc.net/problem/11724">https://www.acmicpc.net/problem/11724</a></p><hr><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] nm = convertStringArrayToIntegerArray(br.readLine().split(<span class="string">&quot; &quot;</span>));</span><br><span class="line">    <span class="keyword">int</span> n = nm[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> m = nm[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span>[][] graph = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (m-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] xy = convertStringArrayToIntegerArray(br.readLine().split(<span class="string">&quot; &quot;</span>));</span><br><span class="line"></span><br><span class="line">        graph[xy[<span class="number">0</span>]][xy[<span class="number">1</span>]] = <span class="keyword">true</span>;</span><br><span class="line">        graph[xy[<span class="number">1</span>]][xy[<span class="number">0</span>]] = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span>[] isVisit = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; graph.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isVisit[i]) &#123;</span><br><span class="line">            answer += bfs(isVisit, graph, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(answer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] convertStringArrayToIntegerArray(String[] args) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[args.length];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (String str : args) &#123;</span><br><span class="line">        array[i++] = Integer.parseInt(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">boolean</span>[] isVisit, <span class="keyword">boolean</span>[][] graph,<span class="keyword">int</span> startIndex)</span> </span>&#123;</span><br><span class="line">    Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    queue.offer(startIndex);</span><br><span class="line">    isVisit[startIndex] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = queue.poll();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; isVisit.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isVisit[i]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (graph[x][i]) &#123;</span><br><span class="line">                queue.offer(i);</span><br><span class="line">                isVisit[i] = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="흐름"><a href="#흐름" class="headerlink" title="흐름"></a>흐름</h2><ol><li>그래프의 연결 관계를 <a href="https://ko.wikipedia.org/wiki/%EC%9D%B8%EC%A0%91%ED%96%89%EB%A0%AC">인접행렬</a>로 만들기 위해 정점의 개수 + n한 크기의 2차원 배열을 만들고, </li><li>이 문제에서 그래프는 방향이 없는 무방향 그래프이기 때문에 a-&gt;b로 가는 간선이 있으면 b-&gt;a로 가는 간선도 있는 것이므로 대칭이 되도록 배열에 저장한다.</li><li>이후 정점의 개수만큼 루프 돌면서 연결요소의 개수를 구하는데 아직 간선이 연결되지 않은 정점일 경우에만 BFS 탐색을 통해 탐색한다.</li><li>queue를 이용해 bfs를 구현하는데 우선 탐색이 시작되는 정점의 index를 queue에 저장하고, isVisit[] 변수에도 true로 해당 index를 탐색했다고 저장한다.</li><li>queue가 빌 때 까지 반복하면서 queue에 저장된 index를 poll한다.</li><li>정점의 개수 만큼 반복하면서 이미 연결된 정점이면 넘어가고</li><li>아직 연결되지 않은 정점이면서 다른 정점과 연결된 정점이면 queue에 해당 index를 저장하고, 방문했으니 true도 저장한다.</li><li>queue가 비어 루프가 종료되면 연결 요소 하나가 완성된 것이므로 1을 return 하고 bfs를 종료한다.</li><li>return된 1들을 저장해 모든 정점을 탐색 후 종료한다.</li><li>끝</li></ol><hr><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><img src="/2020/12/08/%EB%B0%B1%EC%A4%80-11724%EB%B2%88-%EC%97%B0%EA%B2%B0-%EC%9A%94%EC%86%8C%EC%9D%98-%EA%B0%9C%EC%88%98/%EC%BA%A1%EC%B2%98.PNG" class="" title="백준 11724번: 연결 요소의 개수"><hr><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><ul><li><a href="https://sarah950716.tistory.com/12">https://sarah950716.tistory.com/12</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/11724&quot;&gt;https://www.acmicpc.ne</summary>
      
    
    
    
    
    <category term="알고리즘" scheme="https://jungguji.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
    <category term="백준" scheme="https://jungguji.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
    <category term="탐색" scheme="https://jungguji.github.io/tags/%ED%83%90%EC%83%89/"/>
    
    <category term="BFS" scheme="https://jungguji.github.io/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>백준 5525번: IOIOI</title>
    <link href="https://jungguji.github.io/2020/12/02/%EB%B0%B1%EC%A4%80-5525%EB%B2%88-IOIOI/"/>
    <id>https://jungguji.github.io/2020/12/02/%EB%B0%B1%EC%A4%80-5525%EB%B2%88-IOIOI/</id>
    <published>2020-12-02T09:02:25.000Z</published>
    <updated>2020-12-02T09:02:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p><a href="https://www.acmicpc.net/problem/5525">https://www.acmicpc.net/problem/5525</a></p><hr><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">    br.readLine();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> answer = solution(n, br.readLine());</span><br><span class="line"></span><br><span class="line">    System.out.println(answer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> n, String target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>[] s = target.toCharArray();</span><br><span class="line">    <span class="keyword">char</span>[] targetString = getTargetString(n).toCharArray();</span><br><span class="line">    <span class="keyword">int</span>[] fail = failFunction(targetString);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (start &lt;= s.length - targetString.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m &lt; targetString.length &amp;&amp; s[start + m] == targetString[m]) &#123;</span><br><span class="line">            ++m;</span><br><span class="line">            <span class="keyword">if</span> (m == targetString.length) &#123;</span><br><span class="line">                answer++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>  (m == <span class="number">0</span>) &#123;</span><br><span class="line">                start++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                start += (m - fail[m - <span class="number">1</span>]);</span><br><span class="line">                m = fail[m - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getTargetString</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    sb.append(<span class="string">&quot;I&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        sb.append(<span class="string">&quot;OI&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] failFunction(<span class="keyword">char</span>[] target) &#123;</span><br><span class="line">    <span class="keyword">int</span> n = target.length;</span><br><span class="line">    <span class="keyword">int</span>[] fail = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (start + m &lt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target[start + m] == target[m]) &#123;</span><br><span class="line">            m++;</span><br><span class="line">            fail[start + m - <span class="number">1</span>] = m;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">                start++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                start += (m - fail[m - <span class="number">1</span>]);</span><br><span class="line">                m = fail[m - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="흐름"><a href="#흐름" class="headerlink" title="흐름"></a>흐름</h2><ul><li><strong><a href="https://ko.wikipedia.org/wiki/%EC%BB%A4%EB%88%84%EC%8A%A4-%EB%AA%A8%EB%A6%AC%EC%8A%A4-%ED%94%84%EB%9E%AB_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98">KMP 알고리즘</a></strong> 을 이용해 해결</li></ul><ol><li>S에서 찾을 문자열(targetString)을 만든다.</li><li>찾을 문자열에서 실패함수 값을 구한다.</li><li>배열의 범위를 벗어나기 전까지 반복한다.</li><li>검색 할 문자열 s에서 찾을 단어을 한 문자씩 비교한다.</li><li>한 문자가 같으면, 그 다음 문자를 비교 할 수 있게 m을 1씩 더해서 최종적으로 문자열에 단어가 포함되어 있으면 answer를 증가시킨다.</li><li>문자가 일치하지 않으면<ol><li>m이 0이면 시작도 못해본거니깐 검색 할 문자열에서 한 문자 뒤로 간다.<br>ex) S = ABCDEF 일 경우, B부터 검색하도록 start를 증가</li><li>0이 아니면 단어에서 어느정도 일치한 문자열이 존재한 것이므로 비교 시작 할 문자의 index를 m에서 실패함수 값을 빼서 구한다.</li><li>일치한 문자열 뒤 부터 검색하면 되므로 m도 실패함수 값에서 구한다.</li></ol></li><li>반복이 끝나면 answer 값을 return 한다.</li><li>끝.</li></ol><hr><h2 id="KMP-알고리즘-해설"><a href="#KMP-알고리즘-해설" class="headerlink" title="KMP 알고리즘 해설"></a>KMP 알고리즘 해설</h2><blockquote><p>문자열에서 특정 패턴을 찾아내는 문자열 검색 알고리즘</p><footer><strong>위키백과</strong></footer></blockquote><ul><li>비교한 정보를 최대한 활용</li><li>문자열 S = OOIOIIOIOIOIOIOIOIOIOOIOI 에서 패턴 M = IOIOI 를 찾는다고 가정</li><li>우선 패턴 M의 실패함수를 구하기 위해 IOIOI에서 접두사와 접미사의 길이가 가장 긴 부분을 구한다.</li></ul><h3 id="실패함수"><a href="#실패함수" class="headerlink" title="실패함수"></a>실패함수</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] failFunction(<span class="keyword">char</span>[] target) &#123;</span><br><span class="line">    <span class="keyword">int</span> n = target.length;</span><br><span class="line">    <span class="keyword">int</span>[] fail = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (start + m &lt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target[start + m] == target[m]) &#123;</span><br><span class="line">            m++;</span><br><span class="line">            fail[start + m - <span class="number">1</span>] = m;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">                start++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                start += (m - fail[m - <span class="number">1</span>]);</span><br><span class="line">                m = fail[m - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>IOIOI 패턴에서 index 1에 저장된 ‘O’와 0에 저장된 ‘I’는 같지 않으므로 비교가 시작되는 위치를 1 증가 시킨다. (현재 start = 2, m = 0)</li><li>루프에 의해 다시 비교하면 2에 저장된 ‘I’와 0에 저장된 ‘O’는 같으니 m을 증가시키고 접두사와 접미사가 일치한 값인 m를 저장한다. (현재 start = 2, m = 1)<ol><li>IOIOI에서 IOI까지 진행한 상태에서 I와 I가 일치 했으므로 길이 1이 일치한 것</li></ol></li><li>3에 저장된 ‘O’과 1에 저장된 ‘O’가 같으므로, 다시 m을 1 증가 시키고 접두사와 접미사가 일치한 값인 m을 저장한다. (현재 start = 2, m = 2)<ol><li>IOIOI에서 IOIO까지 진행한 상태에서 ‘IO’와 ‘IO’가 같으므로 길이 2가 일치한 것</li></ol></li><li>4에 저장된 ‘I’과 2에 저장된 ‘I’가 같으므로, 다시 m을 1 증가 시키고 접두사와 접미사가 일치한 값인 m을 저장한다. (현재 start = 2, m = 3)<ol><li>IOIOI는 접두사 ‘IOI’와 ‘IOI’의 길이가 3이므로 3</li></ol></li><li>array return</li><li>끝</li></ol><h3 id="KMP-알고리즘"><a href="#KMP-알고리즘" class="headerlink" title="KMP 알고리즘"></a>KMP 알고리즘</h3><ul><li>실패함수 값 구하는 것과 동일하다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> n, String target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>[] s = target.toCharArray();</span><br><span class="line">    <span class="keyword">char</span>[] targetString = getTargetString(n).toCharArray();</span><br><span class="line">    <span class="keyword">int</span>[] fail = failFunction(targetString);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (start &lt;= s.length - targetString.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m &lt; targetString.length &amp;&amp; s[start + m] == targetString[m]) &#123;</span><br><span class="line">            ++m;</span><br><span class="line">            <span class="keyword">if</span> (m == targetString.length) &#123;</span><br><span class="line">                answer++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>  (m == <span class="number">0</span>) &#123;</span><br><span class="line">                start++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                start += (m - fail[m - <span class="number">1</span>]);</span><br><span class="line">                m = fail[m - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>실패함수 array [0, 0, 1, 2, 3]</li></ul><ol><li>m이 패턴의 길이보다 작고, 문자열 s(OOIOIIOIOIOIOIOIOIOIOOIOI) 에서 start+m 한 index의 문자와 비교할 패턴(IOIOI)의 m 번째 문자가 같지 않으므로 s에서 비교가 시작되는 위치를 1 증가 시킨다. (현재 start = 1, m = 0)</li><li>S의 1와 패턴의 0을 비교해도 여전히 같지 않으므로 시작 위치를 또 증가 시킨다. (start = 2, m = 0)</li><li>S의 2와 패턴의 0을 비교하면 둘다 ‘I’로 같으므로 m을 증가 시키고 패턴의 길이와 같을 때 까지 반복한다. (start = 2, m = 1)</li><li>S의 3와 패턴의 1을 비교하면 둘다 ‘O’로 같으므로 m을 증가 시키고 패턴의 길이와 같을 때 까지 반복한다. (start = 2, m = 2)</li><li>S의 4와 패턴의 2을 비교하면 둘다 ‘I’로 같으므로 m을 증가 시키고 패턴의 길이와 같을 때 까지 반복한다. (start = 2, m = 3)</li><li>S의 5와 패턴의 3을 비교하면 같지 않고 이제 m이 0이 아니므로,</li><li>s의 시작 위치를 증가 시켜야 하는데 1을 증가 시키는게 아니라 이전에 구한 실패 함수 값에서 찾아온다.<ol><li>(m(3) - 실패함수 값 array[m(3) - 1]) = 2</li><li>즉 현재 시작 위치에서 1을 더한 값이 아닌 2를 더한다.</li><li>이미 index 4까지는 접두사 접미사가 2 자리까지 같기 때문에</li></ol></li><li>m 역시 실패함수 값을 가져온다.<ol><li>IOIOI에서 IOIO까지 비교한 값에서 실패했기 떄문에 </li><li>그 이전 접미사 접두사 길이만큼으로 비교한다.</li></ol></li><li>이 시점에서 start = 4, m = 1이 되고 루프를 반복한다.</li><li>4와 1은 같지 않으므로 다시 7번부터 8번까지 반복해서 start와 m을 조정한다.<ol><li>이 예제로 하면 처음부터 같지 않았으므로 start는 한칸만 뒤로 가고</li><li>m 역시 접두사 접미사 1 짜리도 실패했으므로 처음부터 비교한다.</li><li>(start = 5, m = 0)</li></ol></li><li>(5, 0), (6, 1), (7, 2), (8, 3), (9, 4) 이 쭉~ 같으므로 드디어 문자열 s에서 패턴을 찾은 것이므로 answer을 증가 시킨다.</li><li>그 이후로 다시 비교하면 m의 길이가 패턴의 길이를 넘어 갔으므로,</li><li>start와 m의 위치를 다시 조정한다.</li><li>반복</li><li>끝.</li></ol><ul><li>결국 정리하면, 처음 말한 것 처럼 이미 비교한 값은 다시 비교하지 않고 그 다음 부터 비교하는 방식으로 시간을 줄인다.</li><li>더 자세한 설명들은 글 마지막 참고 사이트를 찾아가면 다른 분들이 매우 자세하게 설명해주시고 계신다.</li></ul><hr><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><img src="/2020/12/02/%EB%B0%B1%EC%A4%80-5525%EB%B2%88-IOIOI/%EC%BA%A1%EC%B2%98.PNG" class="" title="백준 5525번: IOIOI"><hr><h2 id="테스트-케이스"><a href="#테스트-케이스" class="headerlink" title="테스트 케이스"></a>테스트 케이스</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">assertEquals(<span class="number">4</span>, test.solution(<span class="number">1</span>, <span class="string">&quot;OOIOIOIOIIOII&quot;</span>));</span><br><span class="line">assertEquals(<span class="number">6</span>, test.solution(<span class="number">2</span>, <span class="string">&quot;OOIOIIOIOIOIOIOIOIOIOOIOI&quot;</span>));</span><br><span class="line">assertEquals(<span class="number">7</span>, test.solution(<span class="number">1</span>, <span class="string">&quot;IOIOIOIOIOIOIOI&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><ul><li><a href="https://m.blog.naver.com/tpinlab/10119424299">https://m.blog.naver.com/tpinlab/10119424299</a></li><li><a href="https://blog.naver.com/PostView.nhn?blogId=kks227&logNo=220917078260&categoryNo=299&parentCategoryNo=0&viewDate=&currentPage=4&postListTopCurrentPage=&from=menu&userTopListOpen=true&userTopListCount=5&userTopListManageOpen=false&userTopListCurrentPage=4">https://blog.naver.com/PostView.nhn?blogId=kks227&amp;logNo=220917078260&amp;categoryNo=299&amp;parentCategoryNo=0&amp;viewDate=&amp;currentPage=4&amp;postListTopCurrentPage=&amp;from=menu&amp;userTopListOpen=true&amp;userTopListCount=5&amp;userTopListManageOpen=false&amp;userTopListCurrentPage=4</a></li><li><a href="https://baeharam.github.io/posts/algorithm/kmp/">https://baeharam.github.io/posts/algorithm/kmp/</a></li><li><a href="https://vvshinevv.tistory.com/2">https://vvshinevv.tistory.com/2</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/5525&quot;&gt;https://www.acmicpc.net</summary>
      
    
    
    
    
    <category term="알고리즘" scheme="https://jungguji.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
    <category term="백준" scheme="https://jungguji.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
    <category term="문자열" scheme="https://jungguji.github.io/tags/%EB%AC%B8%EC%9E%90%EC%97%B4/"/>
    
    <category term="KMP" scheme="https://jungguji.github.io/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>프로세스와 스레드</title>
    <link href="https://jungguji.github.io/2020/11/18/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9C/"/>
    <id>https://jungguji.github.io/2020/11/18/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9C/</id>
    <published>2020-11-18T08:50:57.000Z</published>
    <updated>2020-11-18T08:50:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><ul><li>프로세스(Process)란 메모리 위에 올라와서 실행 중인 프로그램으로 각각의 프로세스는 모두 독립적인 상태이고 Os로부터 자원을 할당 받은 작업의 단위.</li><li>스레드(Thread)란 프로세스 내에서 실행되는 작업의 수행 단위로 각각의 스레드는 프로세스가 할당받은 자원을 이용하면서 스레드간 메모리를 공유하며 작동한다.</li></ul><hr><h2 id="작동-방식"><a href="#작동-방식" class="headerlink" title="작동 방식"></a>작동 방식</h2><h3 id="프로세스"><a href="#프로세스" class="headerlink" title="프로세스"></a>프로세스</h3><img src="/2020/11/18/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9C/process.png" class="" title="프로세스와 스레드 OS에서 자원을 할당받은 프로세스들 " alt="OS에서 자원을 할당받은 프로세스들 (이미지 출처: https:&#x2F;&#x2F;gmlwjd9405.github.io&#x2F;2018&#x2F;09&#x2F;14&#x2F;process-vs-thread.html)"><ul><li>프로세스는 OS로부터 Code, Data, Stack, Heap으로 이루어진 독립된 메모리 영역을 할당 받는다.</li><li>각각 독립된 영역을 할당 받으므로 기본적으로 프로세스들 간에는 다른 프로세스의 변수나, 자료구조에 접근 할 수 없으며 서로 간 통신을 위해선 커널 영역에 IPC를 이용해 프로세스간 통신을 할 수 있다.</li></ul><h3 id="프로세스-내-메모리-구조"><a href="#프로세스-내-메모리-구조" class="headerlink" title="프로세스 내 메모리 구조"></a>프로세스 내 메모리 구조</h3><ol><li>Code 영역 : 프로그램에서 수행 할 코드가 로딩 되는 메모리</li><li>Data 영역 : 프로그램이 실행 될 때 생성되고, 종료 될 때 시스템에 반환되며 BBS와 Data영역으로 나뉘는데 BBS엔 초기화 되지 않은 변수를 위한 영역이고, Data는 초기화된 데이터를 저장하는 메모리이다.</li><li>Heap 영역 : 프로그램이 실행되는 동안 필요에 의해 동적으로 사요되는 메모리 영역으로 대표적으로 C언어의 malloc함수를 이용해 메모리를 할당한다면 이 영역에 할당되고 Java의 Object 타입들은 heap 영역에 생성된다.</li><li>Stack 영역 : 프로그램이 자동으로 사용하는 임시 메모리 영역으로 지연벽수, 파라미터, 리턴 값 등 잠시 사용됐다가 사라지는 데이터를 저장하는 영역으로 함수 호출 시 생성되고 함수가 끝나면 반환된다. 예로 메서드 내에서 선언한 지역 변수는 Stack 영역에 저장되기 때문에 메서드가 끝날 때 함께 사라지므로 다른 메서드에서 호출 할 수 없다.</li></ol><h3 id="스레드"><a href="#스레드" class="headerlink" title="스레드"></a>스레드</h3><img src="/2020/11/18/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9C/thread.png" class="" title="프로세스와 스레드 프로세스에서 자원을 할당받은 스레드들 " alt="프로세스에서 자원을 할당받은 스레드들 (이미지 출처: https:&#x2F;&#x2F;gmlwjd9405.github.io&#x2F;2018&#x2F;09&#x2F;14&#x2F;process-vs-thread.html)"><ul><li>스레드는 프로세스 내부에 존재하고 Stack 영역만 각 스레드마다 독립적으로 할당 받고 그 외에 프로세스 영역에 있는 code, data, heap 영역은 프로세스 내에 있는 스레드 끼리 공유한다.</li><li>때문에 한 스레드에서 공유된 영역의 자원을 수정한다면 다른 스레드에서 그 자원을 사용 할 때 변경된 자원을 사용하게 되고</li><li>결국 개발자가 자원을 동기적으로 사용 할 수 있도록 처리 할 수 있어야 한다.</li><li>프로세스 내 자원을 함께 공유하기 때문에 모든 자원을 각각 독립되게 할당 받은 프로세스와 달리 같은 프로세스 내의 스레드가 문제가 생긴다면 다른 스레드들도 강제로 종료되게 된다.</li></ul><hr><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><ul><li><a href="https://www.yalco.kr/14_process_thread/">https://www.yalco.kr/14_process_thread/</a></li><li><a href="https://gmlwjd9405.github.io/2018/09/14/process-vs-thread.html">https://gmlwjd9405.github.io/2018/09/14/process-vs-thread.html</a></li><li><a href="https://velog.io/@raejoonee/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EC%B0%A8%EC%9D%B4">https://velog.io/@raejoonee/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EC%B0%A8%EC%9D%B4</a></li><li><a href="https://recorda.tistory.com/entry/20160503%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0">https://recorda.tistory.com/entry/20160503%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0</a></li><li><a href="https://ehpub.co.kr/54-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0/">https://ehpub.co.kr/54-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;결론&quot;&gt;&lt;a href=&quot;#결론&quot; class=&quot;headerlink&quot; title=&quot;결론&quot;&gt;&lt;/a&gt;결론&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;프로세스(Process)란 메모리 위에 올라와서 실행 중인 프로그램으로 각각의 프로세스는 모두 독립적인 상태이고 O</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Synchronous, Asynchronous와 Blocking, Non-Blocking</title>
    <link href="https://jungguji.github.io/2020/11/16/Synchronous-Asynchronous%EC%99%80-Blocking-Non-Blocking/"/>
    <id>https://jungguji.github.io/2020/11/16/Synchronous-Asynchronous%EC%99%80-Blocking-Non-Blocking/</id>
    <published>2020-11-16T13:47:28.000Z</published>
    <updated>2020-11-16T13:47:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><ul><li>Synchronous, Asynchronous 는 두 개 이상의 대상에 대한 시간 을 관리하는 방법이고</li><li>Blocking, Non-Blocking 은 직접 제어 할 수 없는 대상을 처리하는 방법에 대한 것이다.</li></ul><h3 id="Synchronous-Asynchronous"><a href="#Synchronous-Asynchronous" class="headerlink" title="Synchronous, Asynchronous"></a>Synchronous, Asynchronous</h3><ul><li>두 개 이상의 대상들의 시간을 처리하는 방식</li><li>Synchronous는 두 개 이상의 대상들의 시간을 일치 시키는 것 으로 메서드가 종료되는 시간과 결과를 전달받은 시간이 일치하면 Synchronous(동기) 방식이다.</li><li>Asynchronous는 두 개 이상의 대상들의 시간을 일치 시키자 않는 것 으로 메서드가 종료되는 시간과 결과를 전달받은 시간이 일치하지 않으면 Asynchronous(비동기) 방식이다.</li></ul><h3 id="Blocking-Non-Blocking"><a href="#Blocking-Non-Blocking" class="headerlink" title="Blocking, Non-Blocking"></a>Blocking, Non-Blocking</h3><ul><li>직접 제어 할 수 없는 대상에 대한 처리 방식</li><li>Blocking은 직접 제어 할 수 없는 대상이 작업이 끝날 떄 까지 <strong>제어권을 넘기지 않아 작업이 끝날 떄 까지 대기</strong> 하는 방식이다.</li><li>Non-Blocking은 직접 제어 할 수 없는 대상의 작업의 종료와 관계없이 <strong>제어권을 바로 다시 얻어와 다른 일을 할 수 있게</strong> 하는 방식이다.</li></ul><hr><h2 id="본론"><a href="#본론" class="headerlink" title="본론"></a>본론</h2><h3 id="Synchronous"><a href="#Synchronous" class="headerlink" title="Synchronous"></a>Synchronous</h3><p>우선 Synchronous의 뜻을 사전에선 아래와 같이 정의하고 있다.</p><blockquote><p>동시 발생하는</p><footer><strong>네이버 어학사전</strong></footer></blockquote><p>이 처럼 두 개 이상의 작업을 동시에 발생시키거나 동시에 종료시키는 행동을 말한다.</p><p>동기 방식을 사용 할 경우 메서드를 호출 했을 때 결과를 호출한 쪽에서 스스로 확인하고 처리하기 떄문에 결과를 처리 할 때까지 기다렸다가 결과를 전달받고 메서드를 종료 시킨다.</p><p>간단히 요약하면 메서드를 호출하면 그 메서드가 종료되는 시간과 결과가 return 되는 시간이 같다는 것으로 메서드가 종료되는 시간과 결과가 return 되는 시간이 같으므로 동기 방식이라 말한다.</p><p>혹은 2개 이상의 일을 각각 실행시켜 A가 끝나는 시간과 B가 시작하는 시간이 같은 경우도 마찬가지로 동기 방식이라고 할 수 있다.</p><p>Java로 예를 들면 쓰레드를 동기 시키기 위해 사용하는 <a href="https://www.javamex.com/tutorials/synchronization_concurrency_synchronized1.shtml">synchronized</a>가 있고 일반적으로는 일부러 설정하지 않는 한 보통의 메서드 호출은 모두 동기 방식으로 사용된다.</p><h3 id="Asynchronous"><a href="#Asynchronous" class="headerlink" title="Asynchronous"></a>Asynchronous</h3><p>Asynchronous 비동기 방식은 부정형 접두사 A를 붙여서 두 개 이상의 대상의 시간을 일치 시키지 않는 방식으로 동기 방식과 반대로 동작한다.</p><p>즉 메서드를 호출 했을 때 결과가 리턴되지 않더라도 다른 작업을 수행하거나 메서드를 종료하고 나중에 처리되면 그 때 결과물을 가져온다.</p><p>이 때 메서드를 호출한 시간과 리턴 받은 시간이 일치하지 않으므로 이러한 방식을 비동기 방식이라 한다.</p><p>보통 ajax를 통해 많이 사용 해봤을 것이고, Java에선 쓰레드를 활용해 비동기적으로 처리 할 수 있고, Spring에선 <a href="https://www.baeldung.com/spring-async">@Async Annotation</a>을 이용해 비동기 방식을 처리 할 수 있다.</p><h3 id="Blocking"><a href="#Blocking" class="headerlink" title="Blocking"></a>Blocking</h3><p>결론에서 말한 것 처럼 Blocking은 직접 제어 할 수 없는 대상이 작업이 끝날 때 까지 제어권을 넘기지 않아 작업이 끝날 때 까지 대기하게 하는 방식이다.</p><p>예를 들면 스타크래프트에서 테란의 SCV는 한번 건물을 짓기 시작하면 건설이 끝날 때 까지 다른 동작을 할 수 없으므로, Blocking 상태라고 할 수 있고, Java에선 System.in 같은 I/O 처리를 예로 들 수 있다.</p><h3 id="Non-Blocking"><a href="#Non-Blocking" class="headerlink" title="Non-Blocking"></a>Non-Blocking</h3><p>Blocking과 반대되는 방식으로 작업의 처리 여부와 상관없이 작업을 호출한 쪽이 다시 제어권을 가져와서 자유롭게 다른 일을 처리할 수 있는 방식을 Non-Blocking 방식이라고 한다.</p><p>예를 들어 프로토스의 프로브는 건물을 짓게 하면 차원 균열만 개방하고 바로 미네라를 캐는 등의 다른 일을 수행 할 수 있으므로 프로브는 Non-Blocking 상태라고 할 수 있다.</p><img src="/2020/11/16/Synchronous-Asynchronous%EC%99%80-Blocking-Non-Blocking/scv.gif" class="" title="Synchronous, Asynchronous와 Blocking, Non-Blocking 서플라이디포를 건설 하는 동안 다른 행위를 할 수 없는 SCV " alt="서플라이디포를 건설 하는 동안 다른 행위를 할 수 없는 SCV"><img src="/2020/11/16/Synchronous-Asynchronous%EC%99%80-Blocking-Non-Blocking/%ED%94%84%EB%A1%9C%EB%B8%8C.png" class="" title="Synchronous, Asynchronous와 Blocking, Non-Blocking 첫 번째 파일럿을 소환 후 파일럿이 완성되기 전에 두 번째 파일럿을 소환 할 수 있는 프로브 " alt="첫 번째 파일럿을 소환 후 파일럿이 완성되기 전에 두 번째 파일럿을 소환 할 수 있는 프로브"><hr><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><ul><li><a href="https://velog.io/@codemcd/Sync-VS-Async-Blocking-VS-Non-Blocking-sak6d01fhx">https://velog.io/@codemcd/Sync-VS-Async-Blocking-VS-Non-Blocking-sak6d01fhx</a></li><li><a href="https://www.youtube.com/watch?v=HKlUvCv9hvA&amp;t=806s">https://www.youtube.com/watch?v=HKlUvCv9hvA&amp;t=806s</a></li><li><a href="https://nesoy.github.io/articles/2017-01/Synchronized">https://nesoy.github.io/articles/2017-01/Synchronized</a></li><li><a href="https://homoefficio.github.io/2017/02/19/Blocking-NonBlocking-Synchronous-Asynchronous/">https://homoefficio.github.io/2017/02/19/Blocking-NonBlocking-Synchronous-Asynchronous/</a></li><li><a href="https://www.notion.so/Sync-vs-Async-Block-vs-Non-block-da3e458e74c84201abfd4bcbf2ed00c2">https://www.notion.so/Sync-vs-Async-Block-vs-Non-block-da3e458e74c84201abfd4bcbf2ed00c2</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;결론&quot;&gt;&lt;a href=&quot;#결론&quot; class=&quot;headerlink&quot; title=&quot;결론&quot;&gt;&lt;/a&gt;결론&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Synchronous, Asynchronous 는 두 개 이상의 대상에 대한 시간 을 관리하는 방법이고&lt;/li&gt;
&lt;</summary>
      
    
    
    
    
    <category term="면접 질문" scheme="https://jungguji.github.io/tags/%EB%A9%B4%EC%A0%91-%EC%A7%88%EB%AC%B8/"/>
    
    <category term="개발" scheme="https://jungguji.github.io/tags/%EA%B0%9C%EB%B0%9C/"/>
    
  </entry>
  
</feed>
